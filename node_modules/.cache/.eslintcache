[{"C:\\wamp64\\www\\Projet_TER\\src\\index.js":"1","C:\\wamp64\\www\\Projet_TER\\src\\App.js":"2","C:\\wamp64\\www\\Projet_TER\\src\\reportWebVitals.js":"3","C:\\wamp64\\www\\Projet_TER\\src\\views\\Quiz.js":"4","C:\\wamp64\\www\\Projet_TER\\src\\views\\Tree.js":"5","C:\\wamp64\\www\\Projet_TER\\src\\views\\Users.js":"6","C:\\wamp64\\www\\Projet_TER\\src\\components\\Nav.js":"7","C:\\wamp64\\www\\Projet_TER\\src\\components\\Toolbar.js":"8","C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\historic.js":"9","C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\method.js":"10","C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\issues.js":"11","C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\Historic.js":"12","C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\Method.js":"13","C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\Issues.js":"14","C:\\wamp64\\www\\Projet_TER\\src\\components\\Exemple.js":"15","C:\\wamp64\\www\\Projet_TER\\src\\views\\FileUpload.js":"16","C:\\wamp64\\www\\Projet_TER\\src\\components\\Warning.js":"17","C:\\wamp64\\www\\Projet_TER\\src\\views\\Summary.js":"18","C:\\wamp64\\www\\Projet_TER\\src\\components\\Loader.js":"19","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\ModalDeleteUser.js":"20","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\ModalEditHome.js":"21","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\ModalEditRole.js":"22","C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\DropMethodCard.js":"23","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\ModalConfirmation.js":"24","C:\\wamp64\\www\\Projet_TER\\src\\views\\Login.js":"25","C:\\wamp64\\www\\Projet_TER\\src\\views\\Home.js":"26","C:\\wamp64\\www\\Projet_TER\\src\\components\\AuthenticatedRoute.js":"27","C:\\wamp64\\www\\Projet_TER\\src\\views\\Register.js":"28","C:\\wamp64\\www\\Projet_TER\\src\\contexts\\Auth.js":"29","C:\\wamp64\\www\\Projet_TER\\src\\services\\AuthApi.js":"30","C:\\wamp64\\www\\Projet_TER\\src\\services\\LocalStorage.js":"31","C:\\wamp64\\www\\Projet_TER\\src\\components\\tree\\CustomNode.js":"32","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\tree\\ModalEditCritere.js":"33","C:\\wamp64\\www\\Projet_TER\\src\\components\\tree\\DebugNode.js":"34","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\tree\\ModalEditEdge.js":"35","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\tree\\ModalEditMethod.js":"36","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\tree\\ModalEditEndNode.js":"37","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\ModalInformation.js":"38","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\ModalWarning.js":"39"},{"size":517,"mtime":1620724748144,"results":"40","hashOfConfig":"41"},{"size":2457,"mtime":1623340331266,"results":"42","hashOfConfig":"41"},{"size":375,"mtime":1620050997354,"results":"43","hashOfConfig":"41"},{"size":11998,"mtime":1624449540693,"results":"44","hashOfConfig":"41"},{"size":35127,"mtime":1624449598288,"results":"45","hashOfConfig":"41"},{"size":7376,"mtime":1624449610267,"results":"46","hashOfConfig":"41"},{"size":3223,"mtime":1623422133426,"results":"47","hashOfConfig":"41"},{"size":1148,"mtime":1623340331270,"results":"48","hashOfConfig":"41"},{"size":2830,"mtime":1623422133432,"results":"49","hashOfConfig":"41"},{"size":4356,"mtime":1624449536980,"results":"50","hashOfConfig":"41"},{"size":2468,"mtime":1624449483621,"results":"51","hashOfConfig":"41"},{"size":1928,"mtime":1621000482087,"results":"52","hashOfConfig":"53"},{"size":3137,"mtime":1620996322242,"results":"54","hashOfConfig":"53"},{"size":1737,"mtime":1621000482096,"results":"55","hashOfConfig":"53"},{"size":474,"mtime":1621432746891,"results":"56","hashOfConfig":"41"},{"size":5594,"mtime":1624449517637,"results":"57","hashOfConfig":"41"},{"size":377,"mtime":1621432746891,"results":"58","hashOfConfig":"41"},{"size":2862,"mtime":1624449565919,"results":"59","hashOfConfig":"41"},{"size":156,"mtime":1621432746891,"results":"60","hashOfConfig":"41"},{"size":1134,"mtime":1623330547509,"results":"61","hashOfConfig":"41"},{"size":1558,"mtime":1624449477898,"results":"62","hashOfConfig":"41"},{"size":1563,"mtime":1623340543819,"results":"63","hashOfConfig":"41"},{"size":3820,"mtime":1624449498121,"results":"64","hashOfConfig":"41"},{"size":1750,"mtime":1621432746891,"results":"65","hashOfConfig":"41"},{"size":2989,"mtime":1624449483621,"results":"66","hashOfConfig":"41"},{"size":5492,"mtime":1624449525731,"results":"67","hashOfConfig":"41"},{"size":996,"mtime":1623340331268,"results":"68","hashOfConfig":"41"},{"size":3340,"mtime":1624449560411,"results":"69","hashOfConfig":"41"},{"size":190,"mtime":1623248022379,"results":"70","hashOfConfig":"41"},{"size":1817,"mtime":1624449489874,"results":"71","hashOfConfig":"41"},{"size":299,"mtime":1623248022409,"results":"72","hashOfConfig":"41"},{"size":608,"mtime":1623248022379,"results":"73","hashOfConfig":"41"},{"size":1948,"mtime":1623340331274,"results":"74","hashOfConfig":"41"},{"size":248,"mtime":1623248022379,"results":"75","hashOfConfig":"41"},{"size":1546,"mtime":1623248022379,"results":"76","hashOfConfig":"41"},{"size":7732,"mtime":1624449483605,"results":"77","hashOfConfig":"41"},{"size":1601,"mtime":1623248022379,"results":"78","hashOfConfig":"41"},{"size":834,"mtime":1623340331271,"results":"79","hashOfConfig":"41"},{"size":1124,"mtime":1623340331272,"results":"80","hashOfConfig":"41"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dpxjx3",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13nmaw6",{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\wamp64\\www\\Projet_TER\\src\\index.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\App.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\reportWebVitals.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\views\\Quiz.js",["173","174","175"],"import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Issues from '../components/quiz/issues';\r\nimport Historic from '../components/quiz/historic';\r\nimport Method from '../components/quiz/method';\r\n\r\n\r\nexport class Quiz extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tree: null,\r\n            checkedDecision: null,\r\n            currentMethod: null,\r\n            currentIssue: null,\r\n            retainedMethods: [],\r\n            currentDecisions: [],\r\n            historic: [],\r\n            step: 0        \r\n        };\r\n        // this.componentDidMount = this.componentDidMount.bind(this);\r\n    }\r\n\r\n    // met a jour le questionnaire\r\n    // historic : met a jour l'historique normalement\r\n    // editHistoric : met a jour artificiellement quand on est sur une méthode (arret du flux)\r\n    changeData = async (nextIssueId, decision = null, allChoices = null, historic = true, editHistoric = false) => {\r\n        // ID de la prochaine question\r\n        this.setState({checkedDecision: decision});\r\n\r\n        //  Vérifie si la décision renvoie une méthode\r\n        let method = this.checkMethod(decision);\r\n\r\n        if(method){\r\n            this.manageMethod(decision, method);\r\n        } else {\r\n            // si ID prochaine question pas égal a 0 on récupère info\r\n            if(nextIssueId !== 0){\r\n                if(allChoices){\r\n                    // si on est sur le critère de fin et qu'on continue, on reinitialise l'historique\r\n                    let restart;\r\n                    allChoices.forEach(element => {\r\n                        let decision = this.state.tree.decisions.find(el => el.ID_Decision === element);\r\n                        if(decision.ID_Critere_sortant === 0){\r\n                            // on détecte le critère de fin quand une des décision a un critère sortant null\r\n                            restart = true;\r\n                        }\r\n                    });\r\n                    if(restart){\r\n                        this.addRetainedMethods();\r\n                        this.setState({\r\n                            historic: [],\r\n                            step: 0,\r\n                        }, () => {\r\n                            // quand on conitnu a la fin du questionnaire\r\n                            this.manageStoreData(nextIssueId, decision, historic, editHistoric);\r\n                        });\r\n                    } else {\r\n                        // quand on répond au critère (comportement de base)\r\n                        this.manageStoreData(nextIssueId, decision, historic, editHistoric);\r\n                    }\r\n                } else {\r\n                    // quand on sort d'une méthode (pas de choix fait)\r\n                    this.manageStoreData(nextIssueId, decision, historic, editHistoric);\r\n                }\r\n            }else {\r\n                // quand on sort du questionnaire\r\n                await this.addRetainedMethods();         \r\n                this.props.history.push({\r\n                    pathname: '/summary',\r\n                    state: { retainedMethods: this.state.retainedMethods }\r\n                })            \r\n            }\r\n        }\r\n    }\r\n\r\n    manageStoreData = (nextIssueId, decision, historic, editHistoric) => {\r\n        // on va chercher la prochaine question et réponses\r\n        let issue = this.state.tree.criteres.find(critere => critere.ID_Critere === nextIssueId);\r\n        let decisions =  this.state.tree.decisions.filter(decision => decision.ID_Critere_entrant === issue.ID_Critere);\r\n        let oldIssue = this.state.currentIssue;\r\n        this.setState({\r\n            currentIssue: issue,\r\n            currentDecisions: decisions,\r\n            step: this.state.step + 1\r\n        }, () => {\r\n            // on met a jour l'historique\r\n            if(historic){\r\n                this.manageHistoric(decision, oldIssue)\r\n            }\r\n            if(editHistoric){\r\n                let historicElement = {\r\n                    issue: this.state.currentIssue,\r\n                    decision: null\r\n                }\r\n                this.setState({historic: this.state.historic.concat(historicElement)});  \r\n            }\r\n        });    \r\n    }\r\n\r\n    // on ajoute la méthode dans l'historique\r\n    manageMethod = (decision, method) => {\r\n        let newHistoric = this.state.historic.slice();\r\n        newHistoric[newHistoric.length - 1].decision = decision;\r\n        this.setState({historic: newHistoric}); \r\n\r\n        let historicElement = {\r\n            method: method,\r\n            checked: false\r\n        }\r\n        this.setState({historic: this.state.historic.concat(historicElement)}); \r\n    }\r\n\r\n    checkedMethod = (method, checked) => {\r\n        let index;\r\n        this.state.historic.forEach(element => {\r\n            if('method' in element){\r\n                if(element.method.ID_Methode === method.ID_Methode){\r\n                    index = this.state.historic.indexOf(element);\r\n                }\r\n            }\r\n        });\r\n        let historicElement = {\r\n            method: method,\r\n            checked: checked\r\n        }\r\n        let newHistoric = this.state.historic.slice();\r\n        newHistoric[index] = historicElement;\r\n        this.setState({historic: newHistoric}); \r\n    }\r\n\r\n    // on regarde si une méthode est associé a la décision prise\r\n    checkMethod = (decision) => {\r\n        if(decision){\r\n            let method = this.state.tree.methodes.find(methode => methode.ID_Decision === decision.ID_Decision);\r\n            if(method){\r\n                this.setState({currentMethod: method});\r\n                return method;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ajoute les méthodes retenu lors du précédent passage\r\n    // se produit lorsque on restart le questionnaire\r\n    addRetainedMethods = () => {\r\n        return new Promise((resolve,reject)=>{\r\n            let methods = [];\r\n            this.state.historic.forEach(element => {\r\n                if('method' in element){\r\n                    if(element.checked){\r\n                        if(this.state.retainedMethods.length){\r\n                            let exist =  this.state.retainedMethods.filter(retainedMethod => retainedMethod.method.ID_Methode === element.method.ID_Methode);\r\n                            if(!exist.length){\r\n                                methods.push(element);\r\n                            }\r\n                        } else {\r\n                            console.log(\"PAR LA\")\r\n                            methods.push(element);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            console.log(methods)\r\n        this.setState({retainedMethods: this.state.retainedMethods.concat(methods)}, () => resolve()); \r\n        });\r\n    }\r\n\r\n    // on retourne dans l'historique \r\n    backOut = (ID, type) => {\r\n        // si on retroune a une question\r\n        if(type === 'issue'){\r\n            // si au moment ou on retourne on est sur une méthode\r\n            if(this.state.currentMethod){\r\n                this.setState({currentMethod: null}, () => {\r\n                    this.backIssue(ID);\r\n                })\r\n            } else {\r\n                this.backIssue(ID);\r\n            }\r\n        } else {\r\n            // si on retourne a une méthode\r\n            // let index =  this.state.historic.indexOf(this.state.historic.find(el => el.method));\r\n            let index;\r\n            this.state.historic.forEach(element => {\r\n                if('method' in element){\r\n                    if(element.method.ID_Methode === ID){\r\n                        index = this.state.historic.indexOf(element);\r\n                    }\r\n                }\r\n            });\r\n            let decisionBeforeMethod = this.state.historic[index - 1].decision;   \r\n            this.state.historic.length = index;\r\n            this.setState({step: index});\r\n            this.changeData(decisionBeforeMethod.ID_Critere_sortant, decisionBeforeMethod, null, false);\r\n        }\r\n    }\r\n\r\n    // on rebind les bonne data en fonction de l'ID du critère sélectionné dans l'historique\r\n    backIssue = (ID) => {\r\n        let index;\r\n        this.changeData(ID, null, null, false);\r\n        this.state.historic.forEach(element => {\r\n            if('issue' in element){\r\n                if(element.issue.ID_Critere === ID){\r\n                    index = this.state.historic.indexOf(element);\r\n                }\r\n            }\r\n        });\r\n        // let index =  this.state.historic.indexOf(this.state.historic.find(el => el.issue.ID_Critere === ID));\r\n        this.state.historic.length = index + 1;\r\n        this.state.historic[index].decision = null;\r\n        this.setState({step: index + 1});\r\n    }\r\n\r\n    // on gère l'historique\r\n    manageHistoric = (decision = null, oldIssue) => {\r\n        // si nous ne somme aps sur une méthode\r\n        this.state.historic.forEach(element => {\r\n            if('issue' in element){\r\n                if(element.issue.ID_Critere === oldIssue.ID_Critere){\r\n                    element.decision = decision;\r\n                }\r\n            }\r\n        });\r\n\r\n        // on ajoute le nouveau critère sans décision dans l'historique\r\n        let historicElement = {\r\n            issue: this.state.currentIssue,\r\n            decision: null\r\n        }\r\n        this.setState({historic: this.state.historic.concat(historicElement)}); \r\n    }\r\n\r\n    // on reprend le questionnaire la ou on en était depuis une méthode\r\n    resumeQuiz = () => {\r\n        this.setState({currentMethod: null}, () => {\r\n            this.changeData(this.state.checkedDecision.ID_Critere_sortant, null, null, false, true);\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        let protocol = window.location.protocol;\r\n        let host = window.location.hostname;\r\n        let url = protocol + '//' + host;\r\n\r\n        if(!this.state.tree){\r\n            //axios.get(url + '/API/Controllers/lireArbre.php')\r\n            axios.get(url + '/API/Controllers/lireArbre.php')\r\n            .then(response => {\r\n                this.setState({tree: response.data});\r\n                this.changeData(response.data.entree[0].ID_Critere);\r\n            })\r\n            .catch(error => console.log(error))\r\n        }\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Quiz\">\r\n                {this.state.currentMethod\r\n                    ? <Method method={this.state.currentMethod}\r\n                        checkedDecision={this.state.checkedDecision}\r\n                        changeData={this.changeData}  \r\n                        resumeQuiz={this.resumeQuiz} \r\n                        checkedMethod={this.checkedMethod}\r\n                        historic={this.state}\r\n                    />\r\n                    :<Issues issue={this.state.currentIssue} \r\n                        decisions={this.state.currentDecisions} \r\n                        changeData={this.changeData}\r\n                        step={this.state.step}\r\n                    />\r\n                }\r\n                \r\n                <div className=\"aside\">\r\n                    <Historic historic={this.state.historic} \r\n                        backOut={this.backOut}\r\n                    />\r\n\r\n                    {this.state.retainedMethods.length ?\r\n                        <div className=\"retainedMethods\">  \r\n                         <div className=\"retainedMethods-header\">\r\n                            <h3>Retained methods</h3>\r\n                        </div>              \r\n                            {this.state.retainedMethods.map((element, i) => {   \r\n                                return(<div key={i}>\r\n                                    <p>{element.method.Libelle}</p>\r\n                                </div>)\r\n                            })}\r\n                        </div>\r\n                        : <div></div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Quiz;\r\n","C:\\wamp64\\www\\Projet_TER\\src\\views\\Tree.js",["176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport $, { get } from 'jquery';\r\nimport axios from 'axios';\r\nimport ReactFlow, {addEdge, ReactFlowProvider, removeElements} from 'react-flow-renderer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport Loader from '../components/Loader';\r\nimport Toolbar from '../components/Toolbar';\r\nimport CustomNode from '../components/tree/CustomNode';\r\nimport DebugNode from '../components/tree/DebugNode';\r\n\r\nimport ModalEditCritere from '../components/modal/tree/ModalEditCritere';\r\nimport ModalEditEdge from '../components/modal/tree/ModalEditEdge';\r\nimport ModalEditMethod from '../components/modal/tree/ModalEditMethod';\r\nimport ModalEditEndNode from '../components/modal/tree/ModalEditEndNode';\r\nimport ModalWarning from '../components/modal/ModalWarning';\r\nimport ModalInformation from '../components/modal/ModalInformation';\r\nimport ModalConfirmation from '../components/modal/ModalConfirmation';\r\nimport { faHubspot } from '@fortawesome/free-brands-svg-icons';\r\n\r\nfunction Tree() {\r\n    // noeud custom pour les critères\r\n    const nodeTypes = {\r\n        critereNode: CustomNode,\r\n        debugNode: DebugNode\r\n    };\r\n\r\n    // tableau de couleur (sera bindé par la suite lors de la construction de l'arbre)\r\n    const colors = ['black', 'marron', 'blue', 'red', 'purple', 'fushia', 'green', 'lime', 'yellow',\r\n'navy', 'aqua', 'aquamarine', 'chocolate', 'coral', 'crimson', 'darkcyan', 'darkgreen', 'darkorange', 'darkseagreen',\r\n'deeppink', 'gold', 'indgo', 'lightcoral'];\r\n\r\n    const [initialTree, setInitialTree] = useState(null);\r\n    const [nextId, setNextId] = useState(\"1\");\r\n    const [nextEdgeId, setNextEdgeId] = useState(\"D1\");\r\n    const [nextMethodId, setNextMethodId] = useState(\"M1\");\r\n    const [elements, setElements] = useState([]);\r\n    const [remove, setRemove] = useState(false);\r\n\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    const reactFlowWrapper = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    const onElementsRemove = (elementsToRemove) => setElements((els) => removeElements(elementsToRemove, els));\r\n    const onConnect = (params) => setElements((els) => addEdge({\r\n        ...params,\r\n        id: getEdgeId(), arrowHeadType: 'arrowclosed', label: '', type: 'smoothstep',\r\n    }, els, setNextEdgeId(\"D\" + (parseInt(nextEdgeId.slice(1)) + 1).toString())));\r\n\r\n    // HOOKS REACT-FLOW\r\n\r\n    const onDragOver = (event) => {\r\n        event.preventDefault();\r\n        event.dataTransfer.dropEffect = 'move';\r\n    };\r\n\r\n    // créer l'objet au drop\r\n    const onDrop = (event) => {\r\n        event.preventDefault();\r\n\r\n        //check if input/output already exists\r\n        const type = event.dataTransfer.getData('application/reactflow');\r\n        if (type!= null && type == \"input\" || type == \"output\") {\r\n            if (checkExist(type)) {\r\n                return alert(\"Désolé, il ne peut y avoir qu'un seul noeud de type \" + type)\r\n            }\r\n        }\r\n\r\n        const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n        let toolbarWidth = $('aside').width();\r\n        console.log(reactFlowBounds.left)\r\n        const position = reactFlowInstance.project({\r\n            x: event.clientX - (reactFlowBounds.left + toolbarWidth),\r\n            y: event.clientY - reactFlowBounds.top,\r\n        });\r\n        createNode(type, position);\r\n    };\r\n\r\n    // au clique d'un élément on effectue une actions elon son type\r\n    const onElementClick = (event, element) => {\r\n        if(!remove){\r\n            switch (element.type) {\r\n                case 'critereNode':\r\n                    openModalEditCritere(element);\r\n                    break;\r\n                case 'default':\r\n                    openModalEditMethod(element);\r\n                    break;\r\n                case 'smoothstep':\r\n                    openModalEditEdge(element);\r\n                    break;\r\n                case 'input':\r\n                    alert(\"Cannot modify start node\")\r\n                    break;\r\n                case 'output':\r\n                    openModalEditEndNode(element);\r\n                    break;\r\n            }\r\n        } else {\r\n            // si le mode remove est activé on vérifie que l'élement n'est pas relié\r\n            // si l'élement n'est pas flottant on indique qu'il doit l'être pour être supprimé\r\n            if(element.type != \"smoothstep\"){\r\n                let edges = elements.filter(item => item.type === \"smoothstep\");\r\n                let attachedEdges = edges.filter(item => item.source === element.id || item.target === element.id );\r\n                if(attachedEdges.length > 0){\r\n                    alert(\"You must remove all edges from this element\")\r\n                } else {\r\n                    openModalConfirmation(element)\r\n                }\r\n            } else {\r\n                openModalConfirmation(element)\r\n            }\r\n        }\r\n    }\r\n\r\n    const onPaneClick = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    // FUNCTIONS\r\n\r\n    // return les prochains ID utilisable\r\n    function getId() {\r\n        return nextId;\r\n    }\r\n\r\n    function getEdgeId() {\r\n        return nextEdgeId;\r\n    }\r\n\r\n    function getMethodId() {\r\n        return nextMethodId;\r\n    }\r\n\r\n    /*\r\n    crée un noeud de type :\r\n        - input\r\n        - output\r\n        - default (method)\r\n        - critereNode (critere)\r\n\r\n    parametres :\r\n        - type : type du noeud\r\n        - position : position du client si noeud créer via toolbar ou position x et y stocké en bd\r\n        - data : toutes les data du noeud de la BD, si noeud créer via toolbar le label et générer par défault\r\n    */\r\n    function createNode(type, position, data) {\r\n        let newNode;\r\n        switch (type) {\r\n            case 'input':\r\n                // noeud entree\r\n                newNode = {\r\n                    id: \"0\",\r\n                    type,\r\n                    position,\r\n                    data: {label: `${type} node`},\r\n                };\r\n                break;\r\n            case 'output':\r\n                // noeud sortie\r\n                newNode = {\r\n                    id: \"S0\",\r\n                    type,\r\n                    position,\r\n                    data: {\r\n                        label: `${type} node`,\r\n                        message: (data ? data.Message : null)\r\n                    },\r\n                };\r\n                break;\r\n            case 'critereNode':\r\n                // noeud critere\r\n                if(data){\r\n                    newNode = {\r\n                        id: data.ID_Critere,\r\n                        type,\r\n                        position,\r\n                        data: {\r\n                            label: data.Libelle,\r\n                            informations: (data.Informations ? data.Informations : null)\r\n                        },\r\n                    };\r\n                } else {\r\n                    newNode = {\r\n                        id: getId(),\r\n                        type,\r\n                        position,\r\n                        data: {label: \"default critere label\"},\r\n                    };\r\n                    setNextId((parseInt(nextId) + 1).toString());\r\n                }\r\n                break;\r\n            case 'default':\r\n                // noeud methode\r\n                if(data){\r\n                    newNode = {\r\n                        id: \"M\" + data.ID_Methode,\r\n                        type,\r\n                        position,\r\n                        data: {\r\n                            label: data.Libelle,\r\n                            description: data.Description,\r\n                            productedData: data.Donnees_produites,\r\n                            workforce: data.Effectif_preconise,\r\n                            method: data.Type_methode,\r\n                            analysis: data.Type_analyse,\r\n                            exemple: data.Exemple\r\n                        },\r\n                    };   \r\n                } else {\r\n                    newNode = {\r\n                        id: getMethodId(),\r\n                        type,\r\n                        position,\r\n                        data: {label: \"default method label\"},\r\n                    };\r\n                    setNextMethodId(\"M\" + (parseInt(getMethodId().slice(1)) + 1).toString());\r\n                }\r\n                break;\r\n        }\r\n        // insertion du noeud dans les elements react flow render\r\n        setElements((es) => es.concat(newNode));\r\n    }\r\n    \r\n    // crée un lien entre 2 noeuds\r\n    function createEdge(id, id_source, id_target, label, color){\r\n        let newEdge = {\r\n            id: id,\r\n            source: id_source,\r\n            target: id_target,\r\n            type: 'smoothstep',\r\n            arrowHeadType: 'arrowclosed',\r\n            label: label,\r\n            style: { stroke: color },\r\n        }\r\n        setElements((es) => es.concat(newEdge));\r\n    }\r\n\r\n    // check if a node type already exists (utilisé pour vérifier qu'on ne crée pas 2 noeuds input et output)\r\n    function checkExist(type) {\r\n        if(elements){\r\n            for (let i = 0; i < elements.length; i++) {\r\n                if (elements[i].type == type) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // gestion de la supression\r\n    function deleteMode(){\r\n        remove ? setRemove(false) : setRemove(true);\r\n    }\r\n\r\n    // supprimer un element\r\n    function deleteElement(element){\r\n            let selectedElement = elements.find(el => el.id === element.id);\r\n            let index = elements.indexOf(selectedElement);\r\n            setElements(elements.filter(item => elements.indexOf(item) !== index))\r\n    }\r\n\r\n    // toggle de style quand on active le mode remove\r\n    useEffect(() => {\r\n        if(remove){\r\n            $(\".canvas\").addClass( \"removeMode\" );\r\n            $(\".removeModeMessage\").css(\"opacity\", \"1\");\r\n            $(\".Toolbar\").css({\"pointer-events\": \"none\", \"filter\" : \"grayscale(1)\"});\r\n        } else {\r\n            $(\".canvas\").removeClass( \"removeMode\" );\r\n            $(\".removeModeMessage\").css(\"opacity\", \"0\");\r\n            $(\".Toolbar\").css({\"pointer-events\": \"auto\", \"filter\" : \"none\"});\r\n        }\r\n    },[remove]);\r\n\r\n    // INIT TREE\r\n\r\n    // initialise le noeud de debut et le premier critere pour commencer\r\n    function initTree(){\r\n        let startNode = initialTree.entree[0];\r\n        createNode('input', {x: parseInt(startNode.x), y: parseInt(startNode.y)});\r\n\r\n        let firstNode = initialTree.criteres.find(el => el.ID_Critere === initialTree.entree[0].ID_Critere);\r\n        createNode('critereNode', {x: parseInt(firstNode.x), y: parseInt(firstNode.y)}, firstNode);\r\n        createEdge('D0' ,'0', firstNode.ID_Critere, null);\r\n\r\n        let endNode = initialTree.sortie[0];\r\n        createNode('output',  {x: parseInt(endNode.x), y: parseInt(endNode.y)}, endNode);\r\n\r\n        // initialise la fin de l'arbre\r\n        initNodes(initialTree.entree[0].ID_Critere);\r\n    }\r\n\r\n    // initilialise critère, méthodes et décisiosn depuis le premier critère\r\n    function initNodes(start){\r\n        initialTree.criteres.forEach(node => {\r\n            // on récupère une couleur\r\n            let color = colors[0]\r\n            colors.splice(0, 1);\r\n\r\n            if(node.ID_Critere !== start){\r\n                createNode('critereNode',  {x: parseInt(node.x), y: parseInt(node.y)}, node)\r\n            }\r\n            // on récupère les décisions attaché au critère et on regarde si un méthode est attaché\r\n            let decisions = getDecisions(node.ID_Critere);\r\n            decisions.forEach(decision => {\r\n                // si une méthode est associé a la décision on traite différement\r\n                let method = getMethod(decision);\r\n                if(method){\r\n                    createNode('default',  {x: parseInt(method.x), y: parseInt(method.y)}, method);\r\n                    // on crée le lien d'entrée et de sortie de la méthode\r\n                    createEdge(\"D\" + decision.ID_Decision ,node.ID_Critere, \"M\" + method.ID_Methode, decision.Libelle, color);\r\n                    createEdge(\"DM\" + decision.ID_Decision, \"M\" + method.ID_Methode, decision.ID_Critere_sortant, null, color);\r\n                } else {\r\n                    if(decision.ID_Critere_sortant){\r\n                        createEdge(\"D\" + decision.ID_Decision, decision.ID_Critere_entrant, decision.ID_Critere_sortant, decision.Libelle, color);\r\n                    } else {\r\n                        createEdge(\"D\" + decision.ID_Decision, decision.ID_Critere_entrant, \"S0\", decision.Libelle, color);\r\n                    }\r\n                }\r\n            })                \r\n        });\r\n    }\r\n\r\n    // on set edgeId a l'id maximum\r\n    function initEdgesId(){\r\n        let highest = 0;\r\n        initialTree.decisions.forEach(decision => {\r\n            if(parseInt(decision.ID_Decision) >= highest){\r\n                highest = decision.ID_Decision;\r\n            }\r\n        })\r\n        setNextEdgeId(\"D\" + (parseInt(highest) + 1).toString());\r\n    }\r\n\r\n    // on set methodId a l'id maximum\r\n    function initMethodId(){\r\n        let highest = 0;\r\n        initialTree.methodes.forEach(methode => {\r\n            if(parseInt(methode.ID_Methode) >= highest){\r\n                highest = methode.ID_Methode;\r\n            }\r\n        })\r\n        setNextMethodId(\"M\" + (parseInt(highest) + 1).toString());\r\n    }\r\n\r\n    // on set nodeId a l'id maximum\r\n    function initNodeId(){\r\n        let highest = 0;\r\n        initialTree.criteres.forEach(critere => {\r\n            if(parseInt(critere.ID_Critere) >= highest){\r\n                highest = critere.ID_Critere;\r\n            }\r\n        })\r\n        setNextId((parseInt(highest) + 1).toString());\r\n    }\r\n\r\n    // retourne les décisions d'un noeud\r\n    function getDecisions(nodeId){\r\n        let decisions =  initialTree.decisions.filter(decision => decision.ID_Critere_entrant === nodeId);\r\n        return decisions;\r\n    }\r\n\r\n    // retourne la méthode d'un décision si elle existe\r\n    function getMethod(decision){\r\n        let method =  initialTree.methodes.find(method => method.ID_Decision === decision.ID_Decision);\r\n        return method;\r\n    }\r\n\r\n    // récupère l'arbre a l'initialisation du composant\r\n    useEffect(() => {\r\n        if(!initialTree){\r\n            let protocol = window.location.protocol;\r\n            let host = window.location.hostname;\r\n            let url = protocol + '//' + host;\r\n                axios.get(url + '/API/Controllers/lireArbre.php')\r\n                .then(response => {\r\n                    setInitialTree(response.data)\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    },[]);\r\n\r\n    // quand l'arbre et chargé et si il possède une entree on lance la création de l'arbre visuel\r\n    useEffect(() => {\r\n        if(initialTree){\r\n            // si l'arbre possède un noeud d'entrée et de sortie on peut le construire\r\n            if(initialTree.entree.length && initialTree.sortie.length){\r\n                initTree();\r\n                initEdgesId();\r\n                initMethodId();\r\n                initNodeId();\r\n            }else{\r\n                // si ce n'est pas le cas on vérifie si il existe, si il y'a des résidu on prévient qu'il y'a un problème\r\n                if(initialTree.methodes.length || initialTree.criteres.length || initialTree.decisions.length){\r\n                    alert('Something went wrong, tree cannot be built');\r\n                }\r\n            }\r\n        } \r\n    }, [initialTree]);\r\n\r\n\r\n    // RECONSTRUCTION DE L'ARBRE\r\n\r\n    /*\r\n    types :\r\n        - input (start node)\r\n        - output (end node)\r\n        - default (node)\r\n        - smoothstep (edge)\r\n    */\r\n    function saveTree() {\r\n        // on récupère les élements de l'instance react flow\r\n        let flow = reactFlowInstance.toObject();\r\n        // on set l'arbre que nous allons envoyé au serveur\r\n        let finalTree = {\r\n            criteres: [],\r\n            methodes: [],\r\n            methodesRessources: initialTree.methodesRessources,\r\n            decisions: [],\r\n            entree: [],\r\n            sortie: [],\r\n        };\r\n\r\n        // pour chaque élément on le transforme pour le serveur\r\n        flow.elements.forEach(element => {\r\n            let transformedElement;\r\n            switch (element.type) {\r\n                case 'critereNode':\r\n                    transformedElement = transformToCritere(element);\r\n                    finalTree.criteres.push(transformedElement)\r\n                    break;\r\n                case 'default':\r\n                    transformedElement = transformToMethod(element, flow);\r\n                    finalTree.methodes.push(transformedElement)\r\n                    break;\r\n                case 'smoothstep':\r\n                    if(element.label){\r\n                        transformedElement = transformToDecision(element, flow);\r\n                        finalTree.decisions.push(transformedElement)\r\n                    }\r\n                        break;\r\n                case 'input':\r\n                    transformedElement = transformToEntree(element,flow);\r\n                    finalTree.entree.push(transformedElement)\r\n                    break;\r\n                case 'output':\r\n                    transformedElement = transformToSortie(element);\r\n                    finalTree.sortie.push(transformedElement)\r\n                    break;\r\n            }\r\n        })\r\n        \r\n        // on regarde si il y'a des erreurs dans l'arbre (cas inaproprié)\r\n        let error = checkTree(finalTree);\r\n        if(!error){\r\n            let protocol = window.location.protocol;\r\n            let host = window.location.hostname;\r\n            let url = protocol + '//' + host;\r\n                axios.post(url + '/API/Controllers/creerArbre.php', finalTree)\r\n                .then(response => {\r\n                    setModalInformationOpen(true);\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    }\r\n\r\n    /*\r\n        Fonctions de transformation de l'arbre final\r\n    */\r\n\r\n    // transforme un critère au bon objet\r\n    function transformToCritere(element){\r\n        let critere = {\r\n            ID_Critere: element.id,\r\n            Libelle: element.data.label,\r\n            Informations: (element.data.informations ? element.data.informations : null),\r\n            x: element.position.x,\r\n            y: element.position.y\r\n        }\r\n        return critere;\r\n    }\r\n\r\n    // transforme une méthode au bon objet\r\n    function transformToMethod(element, flow){\r\n        // récupère l'id de décision pointant cette méthode\r\n        let decision = flow.elements.find(el => el.type === \"smoothstep\" && el.target === element.id);\r\n        let method = {\r\n            ID_Methode: element.id.slice(1),\r\n            ID_Decision: (decision ? decision.id.slice(1) : null),\r\n            Libelle: element.data.label,\r\n            Description: element.data.description,\r\n            Donnees_produites: element.data.productedData,\r\n            Effectif_preconise: element.data.workforce,\r\n            Exemple: element.data.exemple,\r\n            Type_analyse: element.data.analysis,\r\n            Type_methode: element.data.method,\r\n            x: element.position.x,\r\n            y: element.position.y\r\n        }\r\n        return method;\r\n    }\r\n\r\n    // transforme une décision au bon objet\r\n    function transformToDecision(element, flow){\r\n        let outDecision;\r\n        // vérifie si la décision porte une méthode pour avoir le noeud de sortie de la décision\r\n        if(element.target.includes(\"M\")){\r\n            outDecision = flow.elements.find(el => el.type === \"smoothstep\" && el.source === element.target);\r\n        }\r\n\r\n        let decision = {\r\n            ID_Decision: element.id.slice(1),\r\n            ID_Critere_entrant: element.source,\r\n            ID_Critere_sortant: (outDecision ? outDecision.target : element.target),\r\n            Libelle: element.label,\r\n        }\r\n        return decision;\r\n    }\r\n\r\n    // transforme l'entree au bon objet\r\n    function transformToEntree(element, flow){\r\n        let outDecision = flow.elements.find(el => el.type === \"smoothstep\" && el.source === element.id);\r\n        let startNode = {\r\n            ID_Entree: element.id,\r\n            ID_Critere: (outDecision ? outDecision.target : null),\r\n            x: element.position.x,\r\n            y: element.position.y\r\n        }\r\n        return startNode;\r\n    }\r\n\r\n    // transforme la sortie au bon objet\r\n    function transformToSortie(element){\r\n        let endNode = {\r\n            ID_Sortie: 1, //element.id.slice(1),\r\n            message: element.data.message,\r\n            x: element.position.x,\r\n            y: element.position.y\r\n        }\r\n        return endNode;\r\n    }\r\n\r\n    /*\r\n    l'abre doit :\r\n        - posséder un noeud entree et sortie\r\n        - ne pas posséder d'élements flottant (non relié ou partiellement relié)\r\n        - ne pas posséder d'élements non labellisé excepté les noeud d'entree, sortie,\r\n            liens sortant des méthodes et le lien source du noeud d'entree\r\n    */\r\n    function checkTree(finalTree){\r\n        let error = false;\r\n        // vérifie si il y'a bien un noeud d'entrée et de sortie\r\n        if(finalTree.entree.length != 1){\r\n            setErrorMessage(\"Tree must have start node\");\r\n            error = true;\r\n        } else if (finalTree.sortie.length != 1){\r\n            setErrorMessage(\"Tree must have end node\");\r\n            error = true;\r\n        } else if (!finalTree.criteres.length){\r\n            setErrorMessage(\"Tree must have node\");\r\n            error = true;\r\n        } \r\n\r\n        // si c'est le cas on vérifie si il n'y a pas de noeud flottant\r\n        if(!error){\r\n            let floatingNode = checkFloatingNode(finalTree);\r\n            let floatingMethod = checkFloatingMethod(finalTree);\r\n            if(floatingNode || floatingMethod){\r\n                error = true;\r\n            }\r\n        }\r\n        \r\n        return error;\r\n    }\r\n\r\n    // vérifie si il y'a un noeud flottant\r\n    function checkFloatingNode(finalTree){\r\n        let condition = true;\r\n\r\n        // pour chaque critère on regarde les décisions entrante et sortante\r\n        finalTree.criteres.forEach(critere => {\r\n            let outputEdge = null;\r\n            let inputEdge = null;\r\n            outputEdge = finalTree.decisions.filter(decision => decision.ID_Critere_entrant === critere.ID_Critere);\r\n            inputEdge = finalTree.decisions.filter(decision => decision.ID_Critere_sortant === critere.ID_Critere);\r\n\r\n            // on gère le cas ou c'est la décision suivant le noeud d'entrée\r\n            if(!inputEdge.length){\r\n                if(finalTree.entree[0].ID_Critere === critere.ID_Critere){\r\n                    inputEdge.push(finalTree.entree[0]);\r\n                }\r\n            }\r\n\r\n            // si il n'ya pas de noeud sortant ou entrant la condition n'est pas respecté\r\n            if(!inputEdge.length || !outputEdge.length){\r\n                condition = false;\r\n            }\r\n\r\n            // si le noeud sortant contient un \"M\" ca veut dire qu'il manque un lien après la méthode\r\n            // la condition n'est pas respecté\r\n            outputEdge.forEach(element =>{\r\n                if(element.ID_Critere_sortant.charAt(0) === \"M\"){\r\n                    condition = false;\r\n                }\r\n            })\r\n        })\r\n        // si la condition n'est pas respecté on set un message d'erreur\r\n        if(!condition){\r\n            setErrorMessage(\"There is a floating node somewhere, check that each edge has a label (except output edge from the start node and methods) and that each critere is connected\");\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // vérifie si il y'a une méthode flottante\r\n    function checkFloatingMethod(finalTree){\r\n        let condition = true;\r\n\r\n        finalTree.methodes.forEach(element => {\r\n            if(!element.ID_Decision){\r\n                condition = false;\r\n            } else {\r\n                let decision = finalTree.decisions.find(item => item.ID_Decision === element.ID_Decision);\r\n                if(!decision){\r\n                    condition = false;\r\n                } else {\r\n                    // vérifie qu'un méthode n'est pas conencté au noeud de fin\r\n                    if(decision.ID_Critere_sortant == \"S0\"){\r\n                        condition = false;\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        switch(condition){\r\n            case true:\r\n                return false;\r\n            case false:\r\n                if(!errorMessage){\r\n                    setErrorMessage(\"There is a floating method somewhere, check that each edge has a label and that each method is connected\");\r\n                }\r\n                return true;\r\n        }\r\n    }\r\n    \r\n    // MODAL MANAGEMENT\r\n\r\n    // warning modal\r\n    const [modalWarningOpen, setModalWarningOpen] = useState(false);\r\n\r\n    function closeModalWarning(){\r\n        setErrorMessage(null);\r\n        setModalWarningOpen(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(errorMessage){\r\n            setModalWarningOpen(true);\r\n        }\r\n    }, [errorMessage]);\r\n\r\n\r\n    // information modal\r\n    const [modalInformationOpen, setModalInformationOpen] = useState(false);\r\n\r\n    function closeModalInformation(){\r\n        setModalInformationOpen(false);\r\n    }\r\n\r\n\r\n    // connfirmation modal\r\n    const [modalConfirmationOpen, setModalConfirmationOpen] = useState(false);\r\n    const [messageConfirmation, setMessageConfirmation] = useState(null);\r\n    const [selectedConfirmationElement, setSelectedConfirmationElement] = useState(null);\r\n\r\n    function openModalConfirmation(element) {\r\n        setModalConfirmationOpen(true);\r\n        setMessageConfirmation(\"Do you want to delete this element ?\")\r\n        setSelectedConfirmationElement(element)\r\n    }\r\n\r\n    function closeConfirmationModal(){\r\n        setModalConfirmationOpen(false);\r\n    }\r\n\r\n\r\n    // edit critères modale\r\n    const [modalEditCritereOpen, setModalEditCritereOpen] = useState(false);\r\n    const [selectedCritere, setSelectedCritere] = useState(null);\r\n\r\n    function openModalEditCritere(element) {\r\n        let critere = elements.find(el => el.id === element.id);\r\n        setSelectedCritere(critere);\r\n        setModalEditCritereOpen(true);\r\n    }\r\n\r\n    function closeModalEditCritere(){\r\n        setModalEditCritereOpen(false);\r\n    }\r\n\r\n    function saveCritere(label, informations){\r\n        // change les data dans l'instance react flow\r\n        selectedCritere.data.label = label;\r\n        if(informations){selectedCritere.data.informations = informations;}\r\n\r\n        // force le rendu du noeud\r\n        // l'instance ne se rerender pas si modification dans sous object donc on change position\r\n        selectedCritere.position = {x: selectedCritere.position.x, y: selectedCritere.position.y + 1}\r\n        rerenderFlow();\r\n    }\r\n\r\n\r\n    // edit edges modal\r\n    const [modalEditEdgeOpen, setModalEditEdgeOpen] = useState(false);\r\n    const [selectedEdge, setSelectedEdge] = useState(null);\r\n\r\n    function openModalEditEdge(element) {\r\n        let edge = elements.find(el => el.id === element.id);\r\n        setSelectedEdge(edge);\r\n        setModalEditEdgeOpen(true);\r\n    }\r\n\r\n    function closeModalEditEdge(){\r\n        setModalEditEdgeOpen(false);\r\n    }\r\n\r\n    function saveEdge(label){\r\n        selectedEdge.label = label;\r\n        rerenderFlow();\r\n    }\r\n\r\n\r\n    // edit methode modale\r\n    const [modalEditMethodOpen, setModalEditMethodOpen] = useState(false);\r\n    const [selectedMethod, setSelectedMethod] = useState(null);\r\n\r\n    function openModalEditMethod(element) {\r\n        let method = elements.find(el => el.id === element.id);\r\n        setSelectedMethod(method);\r\n        setModalEditMethodOpen(true);\r\n    }\r\n\r\n    function closeModalEditMethod(){\r\n        setModalEditMethodOpen(false);\r\n    }\r\n\r\n    function saveMethod(newData, newResources){\r\n        // change les data dans l'instance react flow\r\n        selectedMethod.data.label = newData.label;\r\n        selectedMethod.data.description = newData.description;\r\n        selectedMethod.data.productedData = newData.productedData;\r\n        selectedMethod.data.workforce = newData.workforce;\r\n        selectedMethod.data.method = newData.method;\r\n        selectedMethod.data.analysis = newData.analysis;\r\n        selectedMethod.data.exemple = newData.exemple;\r\n\r\n        // liste des ressources actuellement associé à la méthode\r\n        let thisMethodResources = initialTree.methodesRessources.filter(item => item.ID_Methode === selectedMethod.id.slice(1));\r\n\r\n        // associe les ressources qui ne l'etait aps deja a la méthode        \r\n        newResources.forEach(newResource => {\r\n            let resource = thisMethodResources.filter(item => item.ID_Ressource === newResource.ID_Ressource);\r\n            if(!resource.length){\r\n                let newMethodResource = {\r\n                    ID_Methode: selectedMethod.id.slice(1),\r\n                    ID_Ressource: newResource.ID_Ressource\r\n                }\r\n                initialTree.methodesRessources.push(newMethodResource);\r\n            }\r\n        })\r\n\r\n        // supprime les ressources qui ne sont plus associé\r\n        initialTree.methodesRessources.forEach(oldResource => {\r\n            let resource = newResources.filter(item => item.ID_Ressource === oldResource.ID_Ressource);\r\n            if(!resource.length){\r\n                let index =  initialTree.methodesRessources.indexOf(oldResource);\r\n                initialTree.methodesRessources = initialTree.methodesRessources.filter(item => initialTree.methodesRessources.indexOf(item) !== index);\r\n            }   \r\n        })\r\n        \r\n\r\n        // force le rendu du noeud\r\n        // l'instance ne se rerender pas si modification dans sous object donc on change position\r\n        selectedMethod.position = {x: selectedMethod.position.x, y: selectedMethod.position.y + 1}\r\n        rerenderFlow();\r\n    }\r\n\r\n\r\n    // edit noeud de fin modale\r\n    const [modalEditEndNodeOpen, setModalEditEndNodeOpen] = useState(false);\r\n    const [selectedEndNode, setSelectedEndNode] = useState(null);\r\n\r\n    function openModalEditEndNode(element) {\r\n        let endNode = elements.find(el => el.id === element.id);\r\n        setSelectedEndNode(endNode);\r\n        setModalEditEndNodeOpen(true);\r\n    }\r\n\r\n    function closeModalEditEndNode(){\r\n        setModalEditEndNodeOpen(false);\r\n    }\r\n\r\n    function saveEndNode(message){\r\n        // change les data dans l'instance react flow\r\n        selectedEndNode.data.message = message;\r\n\r\n        // force le rendu du noeud\r\n        // l'instance ne se rerender pas si modification dans sous object donc on change position\r\n        selectedEndNode.position = {x: selectedEndNode.position.x, y: selectedEndNode.position.y + 1}\r\n        rerenderFlow();\r\n    }\r\n\r\n\r\n    // FORCE RERENDER\r\n    function rerenderFlow(){\r\n        let cloneElements = [...elements];\r\n        setElements(cloneElements);     \r\n    }\r\n\r\n    return (\r\n        <div className=\"Tree\">\r\n            {elements ?\r\n                <ReactFlowProvider>\r\n                    <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n                        <Toolbar className=\"tools\"\r\n                            save={saveTree}\r\n                        />\r\n                        <div className=\"canvas\">\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                nodeTypes={nodeTypes}\r\n                                onElementsRemove={onElementsRemove}\r\n                                onConnect={onConnect}\r\n                                // deleteKeyCode={46}\r\n                                onLoad={setReactFlowInstance}\r\n                                onDrop={onDrop}\r\n                                onDragOver={onDragOver}\r\n                                onElementClick={onElementClick}\r\n                                onPaneClick={onPaneClick}/>\r\n                        </div>\r\n                        <FontAwesomeIcon onClick={() => deleteMode()} className=\"icon delete\" icon={faTrashAlt} />\r\n                        <p className=\"removeModeMessage\">Warning, you activated the suppression mode</p>\r\n                    </div>\r\n                    {/*<button onClick={() => console.log(nextEdgeId)}>debug</button>*/}\r\n\r\n                    <ModalEditCritere\r\n                        title=\"Edit critere\"\r\n                        open={modalEditCritereOpen}  \r\n                        close={closeModalEditCritere}\r\n                        mainAction={saveCritere}\r\n                        selectedCritere={selectedCritere}\r\n                    />\r\n\r\n                    <ModalEditEdge\r\n                        title=\"Edit Edge\"\r\n                        open={modalEditEdgeOpen}  \r\n                        close={closeModalEditEdge}\r\n                        mainAction={saveEdge}\r\n                        selectedEdge={selectedEdge}\r\n                    />\r\n\r\n                    <ModalEditMethod\r\n                        title=\"Edit Method\"\r\n                        open={modalEditMethodOpen}  \r\n                        close={closeModalEditMethod}\r\n                        mainAction={saveMethod}\r\n                        selectedMethod={selectedMethod}\r\n                        initialTree={initialTree}\r\n                    />\r\n\r\n                    <ModalEditEndNode\r\n                        title=\"Edit End node\"\r\n                        open={modalEditEndNodeOpen}  \r\n                        close={closeModalEditEndNode}\r\n                        mainAction={saveEndNode}\r\n                        selectedEndNode={selectedEndNode}\r\n                    />\r\n\r\n                    <ModalWarning\r\n                        message={errorMessage}\r\n                        open={modalWarningOpen}  \r\n                        close={closeModalWarning}\r\n                    />\r\n\r\n                    <ModalInformation\r\n                        open={modalInformationOpen}  \r\n                        close={closeModalInformation}\r\n                    />\r\n\r\n                    <ModalConfirmation\r\n                        title=\"Warning\"\r\n                        message={messageConfirmation}\r\n                        open={modalConfirmationOpen}  \r\n                        close={closeConfirmationModal}\r\n                        mainAction={deleteElement}\r\n                        mainActionParameters={selectedConfirmationElement}\r\n                        mainActionName=\"Delete\"\r\n                    />\r\n                </ReactFlowProvider>\r\n            : <Loader/> \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tree;\r\n","C:\\wamp64\\www\\Projet_TER\\src\\views\\Users.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\Nav.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\Toolbar.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\historic.js",["193"],"import React, {useState} from 'react';\r\n\r\nimport ModalConfirmation from \"../modal/ModalConfirmation\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUndoAlt, faCheckCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport Loader from '../Loader';\r\nimport Exemple from '../Exemple'\r\n\r\n\r\nfunction Historic(props) {\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [selectedElement, setSelectedElement] = useState(null);\r\n\r\n    function openModal(element) {\r\n        setModalOpen(true);\r\n        setSelectedElement(element)\r\n    }\r\n\r\n    function closeModal(){\r\n        setModalOpen(false);\r\n    }\r\n\r\n    function back(element){\r\n        let ID;\r\n        let type;\r\n        if ('issue' in element) {\r\n            ID = element.issue.ID_Critere;\r\n            type = 'issue';\r\n        }\r\n        if ('method' in element) {\r\n            ID = element.method.ID_Methode;\r\n            type = 'method';\r\n        }\r\n        props.backOut(ID, type);\r\n    }\r\n\r\n    function undo(){\r\n        if(props.historic.length > 1){\r\n            let element = props.historic[props.historic.length - 2];\r\n            back(element);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Historic\">\r\n            <div className=\"historic-header\">\r\n                <h3>Progression</h3>\r\n                <FontAwesomeIcon onClick={undo} className=\"icon\" icon={faUndoAlt} />\r\n            </div>\r\n            {props.historic ?\r\n                <ul>\r\n                {props.historic.map((element, i) => {   \r\n                        return (\r\n                            <li onClick={openModal.bind(this, element)} key={i}>\r\n                                    <p title={element.issue ? element.issue.Libelle : element.method.Libelle}>{element.issue ? element.issue.Libelle : element.method.Libelle}</p>\r\n                                    {element.decision &&\r\n                                        <p>{element.decision.Libelle}</p>\r\n                                    }  \r\n                                    {element.checked &&\r\n                                        <FontAwesomeIcon className=\"icon\" icon={faCheckCircle} />\r\n                                    }                            \r\n                            </li>\r\n                        ) \r\n                    })}\r\n                </ul>\r\n                : <Loader/>\r\n            }\r\n            <ModalConfirmation\r\n                title=\"Warning\"\r\n                message=\"Do you really want to come back at this step ? Any selected method will be lost.\"\r\n                open={modalOpen}  \r\n                close={closeModal}\r\n                mainAction={back}\r\n                mainActionParameters={selectedElement}\r\n                mainActionName=\"Come Back\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Historic;\r\n\r\n","C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\method.js",["194","195"],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faChartPie, faClipboard, faFilePdf, faFolderOpen, faUsers} from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction Method(props) {\r\n    const [checked, setChecked] = useState(false);\r\n    const [ressources, setRessources] = useState(null);\r\n\r\n    function finish() {\r\n        props.changeData(0);\r\n    }\r\n\r\n    function resume() {\r\n        props.resumeQuiz();\r\n    }\r\n\r\n    function toggleValue(){\r\n        setChecked(!checked);\r\n    }\r\n\r\n\r\n    function getRessources() {\r\n        let protocol = window.location.protocol;\r\n        let host = window.location.hostname;\r\n        let url = protocol + '//' + host;\r\n\r\n        const json = JSON.stringify({id_methode: Number(props.method.ID_Methode)});\r\n        axios.post(url + '/API/Controllers/ressource/lireRessourcesMethode.php', json)\r\n            .then(response => {\r\n                setRessources(response.data);\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    function openFile(name) {\r\n        let protocol = window.location.protocol;\r\n        let host = window.location.hostname;\r\n        let url = protocol + '//' + host;\r\n        window.open(url+ '/API/documentsRessources/' + name);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRessources();\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        props.checkedMethod(props.method, checked);\r\n    }, [checked]);\r\n\r\n    \r\n    return (\r\n        <div className=\"Method\">\r\n            <div className=\"methodCard\">\r\n                <div className=\"header\">\r\n                    <div className=\"informations\">\r\n                        <h3>{props.method.Libelle}</h3>\r\n                        <p>{props.method.Description}</p>\r\n                        <div>\r\n                            <div>\r\n                                <FontAwesomeIcon className=\"icon\" icon={faUsers} />  \r\n                                <p>workforce</p> \r\n                                <p>{props.method.Effectif_preconise}</p>\r\n                            </div>\r\n                            <div>\r\n                                <FontAwesomeIcon className=\"icon\" icon={faFolderOpen} />  \r\n                                <p>produced data</p> \r\n                                <p>{props.method.Donnees_produites}</p>\r\n                            </div>\r\n                            <div>\r\n                                <FontAwesomeIcon className=\"icon\" icon={faClipboard} />  \r\n                                <p>method</p>\r\n                                <p>{props.method.Type_methode}</p>\r\n                            </div>\r\n                            <div>\r\n                                <FontAwesomeIcon className=\"icon\" icon={faChartPie} />  \r\n                                <p>analysis</p>\r\n                                <p>{props.method.Type_analyse}</p>\r\n                            </div>\r\n                        </div>\r\n                        <p>{props.method.Exemple}</p>\r\n                    </div>\r\n                    {ressources ?\r\n                    <div className=\"ressources\">                \r\n                            {ressources.map((element, i) => {   \r\n                                return(<div onClick={() => openFile(element.Nom)} key={i} className=\"ressource\">\r\n                                    <FontAwesomeIcon className=\"icon\" icon={faFilePdf} /> \r\n                                    <p title={element.Nom}>{element.Nom}</p>\r\n                                </div>)\r\n                            })}\r\n                    </div>\r\n                    : <p>No ressources</p>\r\n                    }\r\n                </div>\r\n                <div className=\"footer\">\r\n                    <label className=\"switch\">\r\n                        <input onChange={toggleValue} type=\"checkbox\"/>\r\n                        <span className=\"slider round\"></span>\r\n                    </label>\r\n                    <span>retain this method</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"action\">\r\n                <button className=\"button outlined\" onClick={finish}>Finish</button>\r\n                <button className=\"button filled\" onClick={resume}>Continue</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Method;","C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\issues.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\Historic.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\Method.js",["196"],"C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\Issues.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\Exemple.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\views\\FileUpload.js",["197","198","199"],"import React, {useEffect, useState} from \"react\";\r\nimport $ from 'jquery';\r\nimport axios from 'axios';\r\nimport pdf from '../public/pdf.svg'\r\nimport doc from '../public/doc.svg'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUpload, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport ModalConfirmation from '../components/modal/ModalConfirmation';\r\n\r\nfunction FileUpload(props) {\r\n    const [file, setFile] = useState(null);\r\n    const [allFiles, setAllFiles] = useState(null);\r\n\r\n    // appel la fonction d'upload de fichier avec en parametre le fichier contenu dans file\r\n    function onSubmit(e) {\r\n        e.preventDefault()\r\n        uploadFile(file);\r\n    }\r\n\r\n    // stock le fichier dans la variable file\r\n    function onChange(e) {\r\n        setFile(e.target.files[0]);\r\n    }\r\n\r\n    // requete d'upload du fichier\r\n    function uploadFile(file) {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        let protocol = window.location.protocol;\r\n        let host = window.location.hostname;\r\n        let url = protocol + '//' + host;\r\n        axios.post(url + '/API/Controllers/ressource/uploadFile.php', formData, {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        }).then(response =>{\r\n            if(response.data.Error){\r\n                alert(response.data.Error);\r\n            }   \r\n            // recharge les fichiers et reset la variable file\r\n            loadFiles();\r\n            setFile(null);\r\n        }).catch(error =>{\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    // ouvre un fichier stocké sur le serveur\r\n    function openFile(name){\r\n        let protocol = window.location.protocol;\r\n        let host = window.location.hostname;\r\n        let url = protocol + '//' + host;\r\n        window.open(url+ '/API/documentsRessources/' + name);\r\n    }\r\n\r\n    // supprime un fichier\r\n    function deleteFile(id){\r\n        let protocol = window.location.protocol;\r\n        let host = window.location.hostname;\r\n        let url = protocol + '//' + host;\r\n        let data = JSON.stringify({id: Number(id)});\r\n        console.log(data);\r\n        axios({\r\n            method: 'delete',\r\n            url: url+ '/API/Controllers/ressource/supprimerRessource.php',\r\n            data: data\r\n        }).then(response => loadFiles())\r\n    }\r\n\r\n    // charge les fichiers\r\n    function loadFiles(){\r\n        let protocol = window.location.protocol;\r\n        let host = window.location.hostname;\r\n        let url = protocol + '//' + host;\r\n        axios.get(url + '/API/Controllers/ressource/lire.php')\r\n        .then(response =>{\r\n            setAllFiles(response.data.ressources)\r\n        });\r\n    }\r\n\r\n    function getIcon(filename){\r\n        let src = filename.slice(-3);\r\n        let test = false;\r\n        (src == \"pdf\" ? test = true : test = false);\r\n        switch(test){\r\n            case true:\r\n                return pdf;\r\n            case false:\r\n                return doc;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(file){\r\n            $(\"form>label\").html(file.name);\r\n            $(\"form>label\").css(\"color\", \"black\");\r\n        } else {\r\n            $(\"form>label\").html(\"Import file...\");\r\n            $(\"form>label\").css(\"color\", \"lightgray\");\r\n        }\r\n    }, [file]);\r\n\r\n    useEffect(() => {\r\n        if(!allFiles){\r\n            loadFiles();\r\n        }\r\n    }, []);\r\n\r\n    // Modal management\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [message, setMessage] = useState(null);\r\n    const [selectedElement, setSelectedElement] = useState(null);\r\n\r\n    function openModal(element) {\r\n        setModalOpen(true);\r\n        setMessage(\"Do you want to delete \" + element.Nom + \" ?\")\r\n        setSelectedElement(element.ID_Ressource)\r\n    }\r\n\r\n    function closeModal(){\r\n        setModalOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"FileUpload\">\r\n            <div>\r\n                <form onSubmit={onSubmit}>\r\n                    <button className=\"filled submit-button\" type=\"submit\">                        \r\n                        <FontAwesomeIcon icon={faUpload} />\r\n                    </button>\r\n                    <label htmlFor=\"file-upload\">Import file...</label>\r\n                    <input id=\"file-upload\" type=\"file\" onChange={onChange}/>\r\n                </form>\r\n                <h3> List of files already uploaded :</h3>\r\n                {allFiles &&\r\n                    <div className=\"item-list\">\r\n                        {allFiles.map((element, i) => {   \r\n                            return (<div className=\"item\" title={element.Nom} key={i}>\r\n                                <p onClick={() => openModal(element)}><FontAwesomeIcon icon={faTrash} /></p>\r\n                                <img onClick={() => openFile(element.Nom)} src={getIcon(element.Nom)} alt=\"icon pdf\"/>\r\n                                <p onClick={() => openFile(element.Nom)}>{element.Nom}</p>\r\n                                </div>\r\n                            ) \r\n                            \r\n                        })}    \r\n                    </div>\r\n                }  \r\n            </div>\r\n\r\n            <ModalConfirmation\r\n                title=\"Warning\"\r\n                message={message}\r\n                open={modalOpen}  \r\n                close={closeModal}\r\n                mainAction={deleteFile}\r\n                mainActionParameters={selectedElement}\r\n                mainActionName=\"Delete\"\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FileUpload;\r\n","C:\\wamp64\\www\\Projet_TER\\src\\components\\Warning.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\views\\Summary.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\Loader.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\ModalDeleteUser.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\ModalEditHome.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\ModalEditRole.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\quiz\\DropMethodCard.js",["200"],"import React, {useEffect, useState} from 'react';\r\n\r\nimport $ from 'jquery';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faChartPie, faClipboard, faFilePdf, faFolderOpen, faSortDown, faUsers} from '@fortawesome/free-solid-svg-icons'\r\nimport axios from \"axios\";\r\n\r\nfunction DropMethodCard(props) {\r\n\r\n    const [ressources, setRessources] = useState(null);\r\n\r\n\r\n    function getRessources() {\r\n        let protocol = window.location.protocol;\r\n        let host = window.location.hostname;\r\n        let url = protocol + '//' + host;\r\n\r\n        const json = JSON.stringify({id_methode: Number(props.method.ID_Methode)});\r\n        axios.post(url + '/API/Controllers/ressource/lireRessourcesMethode.php', json)\r\n            .then(response => {\r\n                setRessources(response.data);\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRessources();\r\n    }, []);\r\n\r\n\r\n    function openFile(name) {\r\n        let protocol = window.location.protocol;\r\n        let host = window.location.hostname;\r\n        let url = protocol + '//' + host;\r\n        window.open(url+ '/API/documentsRessources/' + name);\r\n    }\r\n\r\n    function dropCard(e) {\r\n        let parentId = e.currentTarget.parentElement.id;\r\n        console.log(parentId)\r\n        $(\"#\" + parentId).toggleClass('dropped');\r\n    }\r\n\r\n    return (\r\n        <div className=\"Method\">\r\n            <div id={props.id} className=\"methodCard dropDown\">\r\n                <div className=\"header\">\r\n                    <div className=\"informations\">\r\n                        <h3>{props.method.Libelle}</h3>\r\n                        <p>{props.method.Description}</p>\r\n                        <div>\r\n                            <div>\r\n                                <FontAwesomeIcon className=\"icon\" icon={faUsers} />  \r\n                                <p>workforce</p> \r\n                                <p>{props.method.Effectif_preconise}</p>\r\n                            </div>\r\n                            <div>\r\n                                <FontAwesomeIcon className=\"icon\" icon={faFolderOpen} />  \r\n                                <p>produced data</p> \r\n                                <p>{props.method.Donnees_produites}</p>\r\n                            </div>\r\n                            <div>\r\n                                <FontAwesomeIcon className=\"icon\" icon={faClipboard} />  \r\n                                <p>method</p>\r\n                                <p>{props.method.Type_methode}</p>\r\n                            </div>\r\n                            <div>\r\n                                <FontAwesomeIcon className=\"icon\" icon={faChartPie}/>\r\n                                <p>analysis</p>\r\n                                <p>{props.method.Type_analyse}</p>\r\n                            </div>\r\n                        </div>\r\n                        <p>{props.method.Exemple}</p>\r\n                    </div>\r\n                    {ressources ?\r\n                        <div className=\"ressources\">\r\n                            {ressources.map((element, i) => {\r\n                                return (<div onClick={() => openFile(element.Nom)} key={i} className=\"ressource\">\r\n                                    <FontAwesomeIcon className=\"icon\" icon={faFilePdf}/>\r\n                                    <p>{element.Nom}</p>\r\n                                </div>)\r\n                            })}\r\n                        </div>\r\n                        : <p>No ressources</p>\r\n                    }\r\n                </div>\r\n                <div onClick={(e) => dropCard(e)} className=\"deploy\">\r\n                    <FontAwesomeIcon icon={faSortDown}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DropMethodCard;\r\n","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\ModalConfirmation.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\views\\Login.js",["201"],"import React, {useContext, useState} from 'react';\r\nimport Auth from \"../contexts/Auth\";\r\nimport {login, isUser} from \"../services/AuthApi\";\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nconst Login = (props) => {\r\n\r\n    //Utilisation du contexte pour vérifier les états de connexion\r\n    const {setIsAuthenticated, setUserRole } = useContext(Auth);\r\n\r\n    const [user, setUser] = useState({\r\n        username: \"\",\r\n        mot_de_passe: \"\"\r\n    });\r\n\r\n    // set les informations récupérer des inputs dans une variable\r\n    const handleChange = ({currentTarget}) => {\r\n        const {name, value} = currentTarget;\r\n        setUser({...user, [name]: value})\r\n    }\r\n\r\n    // envoie les informations de connexion a la fonction login de AuthApi\r\n    const handleSubmit = async event => {\r\n        event.preventDefault();\r\n\r\n        //Set les états du contexte quand on est connecté\r\n        try {\r\n            const response = await login(user);\r\n            if(response === false){\r\n                props.history.push({\r\n                    pathname: '/login',\r\n                    state: { error: \"Error, incorrect password or username\" }\r\n                })\r\n            }\r\n            else {\r\n                setIsAuthenticated(response);\r\n                let userRole = isUser();\r\n                if(userRole){\r\n                    setUserRole(userRole)\r\n                }\r\n                props.history.push('/quiz')\r\n            }\r\n\r\n        } catch ({response}) {\r\n            console.log(response);\r\n            props.history.push({\r\n                pathname: '/login',\r\n                state: { error: \"Error, incorrect password or username.\" }\r\n            })\r\n        }\r\n    }\r\n\r\n    // renvoie sur la page register\r\n    const change = () => {\r\n        props.history.push('/register')\r\n    }\r\n\r\n    return (\r\n        <div className=\"LoginRegister\">\r\n            <div>\r\n                <h3>Sign in</h3>\r\n                <div className=\"InputItems\">\r\n                    <div>\r\n                        <input className =\"inputIcon\" type=\"text\" id=\"username\" name=\"username\" required placeholder=\"    Username\"\r\n                            onChange={handleChange}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <input className =\"inputIcon\" type=\"password\" id=\"password\" name=\"mot_de_passe\" required placeholder={\"    Password\"}\r\n                            onChange={handleChange}/>\r\n                    </div>\r\n                </div>\r\n                {props.location.state &&(<p className=\"error\">{props.location.state.error}</p>)}\r\n\r\n                <div className=\"action\">\r\n                    <button className=\"button filled\" onClick={handleSubmit}>Sign in</button>\r\n                </div>\r\n\r\n                <div className=\"signup\">\r\n                    <p>Don't have an account ? <a onClick={change}>Create one now</a></p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\wamp64\\www\\Projet_TER\\src\\views\\Home.js",["202","203"],"import Loader from \"../components/Loader\";\r\nimport logo from \"../public/logothedre.png\";\r\nimport demo from \"../public/HomeDemo.png\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPen} from \"@fortawesome/free-solid-svg-icons\";\r\nimport ModalEditHome from \"../components/modal/ModalEditHome\";\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport Auth from \"../contexts/Auth\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport $ from 'jquery';\r\n\r\n\r\n/**\r\n * @Goal : Render home, open modal to edit description, call to api to edit\r\n * @UsedByModule : App.js\r\n * @ModuleUsed : Loader, ModalEditHome\r\n * @VisibleVariables :\r\n * @VisibleProcedures :\r\n * @returns {JSX.Element}\r\n */\r\nfunction Home() {\r\n    /**\r\n     * Setup state for role, description, newDescription, modalOpen\r\n     */\r\n    const [description, setDescription] = useState(null);\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [newDescription, setNewDescription] = useState(null);\r\n    const {userRole, setUserRole} = useContext(Auth);\r\n    const history = useHistory();\r\n\r\n    /**\r\n     * Call API to update description\r\n     */\r\n    function getHomeContent() {\r\n        let protocol = window.location.protocol;\r\n        let host = window.location.hostname;\r\n        let url = protocol + '//' + host;\r\n\r\n        if (description === null) {\r\n            axios.get(url + '/API/Controllers/accueil/lire.php')\r\n                .then(response => {\r\n                    setDescription(response.data['description']);\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Effect before render\r\n     */\r\n    useEffect(() => {\r\n        getHomeContent();\r\n    });\r\n\r\n    /**\r\n     * Set boolean modalOpen to true\r\n     */\r\n    function handleOpen() {\r\n        setModalOpen(true);\r\n    }\r\n\r\n    /**\r\n     * Set boolean modalOpen to false\r\n     */\r\n    function handleClose() {\r\n        setModalOpen(false);\r\n    }\r\n\r\n    /**\r\n     * Update newDescription with param description\r\n     * @param description the new description\r\n     */\r\n    function handleChange(description) {\r\n        setNewDescription(description);\r\n    }\r\n\r\n    /**\r\n     * Call to API to edit description\r\n     */\r\n    function edit() {\r\n        if (newDescription !== null) {\r\n            let data = JSON.stringify({description: newDescription});\r\n            let protocol = window.location.protocol;\r\n            let host = window.location.hostname;\r\n            let url = protocol + '//' + host;\r\n            axios.put(url +'/API/Controllers/accueil/modifier.php',data)\r\n                .then(() => {\r\n                    axios.get(url+ '/API/Controllers/accueil/lire.php')\r\n                        .then(response => {\r\n                            setDescription(response.data['description']);\r\n                        })\r\n                        .catch(error => console.log(error))\r\n                    handleClose();\r\n                })\r\n                .catch(function (erreur) {\r\n                    console.log(erreur);\r\n                });\r\n        }\r\n        handleClose();\r\n    }\r\n\r\n    /**\r\n     * Redirect to quiz component\r\n     */\r\n    const redirect = () => {\r\n        history.push('/quiz')\r\n    }\r\n\r\n    /**\r\n     * Return Loader if description is not set\r\n     */\r\n    if (description === null) return (<Loader/>);\r\n    /**\r\n     * Return content if description is set, contains ModalEditHome\r\n     */\r\n    else return (\r\n        <div className=\"Home\">\r\n            <div>\r\n                <div>\r\n                <h1><strong>MATUI</strong>'s tree in digital version</h1>\r\n                    <div className=\"content\">\r\n                        <div>\r\n                            <h3><strong>What is it ?</strong></h3>\r\n                            <p>This application helps you to choose a data production method. It is presented in the form of a questionnaire, and your answers will guide you towards methods that you can choose or not. Each method has associated documents to help you apply it.</p><button className=\"button filled\" onClick={redirect}>Start now</button>\r\n                        </div>\r\n                        <div>\r\n                            <img src={demo} alt={'Tool demo'}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <h3>More explanation\r\n                    {userRole===\"super-admin\"  && ( <FontAwesomeIcon className=\"icon\" icon={faPen} onClick={handleOpen}/>)}\r\n                    {userRole===\"administrator\" && ( <FontAwesomeIcon className=\"icon\" icon={faPen} onClick={handleOpen}/>)}\r\n                </h3>\r\n        \r\n                <div className=\"content\">\r\n                    <div className=\"logo\">\r\n                        <img src={logo} alt={'Logo Thedre'}/>\r\n                    </div>\r\n                    <p>{description}</p>\r\n                </div>\r\n            </div>\r\n            <ModalEditHome\r\n                    title=\"Modify description\"\r\n                    message=\"Please modify\"\r\n                    oldDescription={description}\r\n                    actionButton=\"Confirm\"\r\n                    closeButton=\"Quit\"\r\n                    open={modalOpen}\r\n                    close={handleClose}\r\n                    mainAction={edit}\r\n                    changeAction={handleChange}\r\n                />\r\n        </div>\r\n    );\r\n}\r\nexport default Home;","C:\\wamp64\\www\\Projet_TER\\src\\components\\AuthenticatedRoute.js",["204"],"import React, {useContext} from 'react';\r\nimport Auth from \"../contexts/Auth\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\n\r\nconst AuthenticatedRoute = ({path, component}) => {\r\n    const {isAuthenticated} = useContext(Auth);\r\n    const {userRole} = useContext(Auth);\r\n    if(isAuthenticated){\r\n        switch(userRole){\r\n            case 'user':\r\n                // accès a rien\r\n                return <Redirect to=\"/\"/>\r\n            case 'administrator':\r\n                // accès a l'arbre uniquement\r\n                if(path === '/manageTree' || path === '/fileUpload'){\r\n                    return <Route path={path} component={component}/> \r\n                } else {\r\n                    return <Redirect to=\"/\"/>\r\n                }\r\n            case 'super-admin':\r\n                // accès a tout\r\n                return <Route path={path} component={component}/> \r\n        }\r\n    } else {\r\n        return <Redirect to=\"/login\"/>\r\n    }\r\n}\r\nexport default AuthenticatedRoute; ","C:\\wamp64\\www\\Projet_TER\\src\\views\\Register.js",["205"],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router\";\r\n\r\nfunction Register() {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [mail, setMail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\r\n    const [errorPseudo, setErrorPseudo] =useState(null);\r\n    const [errorMail, setErrorMail] =useState(null);\r\n    const history = useHistory();\r\n\r\n    // enregistre un nouveau compte\r\n    function register() {\r\n        let protocol = window.location.protocol;\r\n        let host = window.location.hostname;\r\n        let url = protocol + '//' + host;\r\n\r\n        if (username !== \"\" && mail !== \"\" && password !== \"\" && passwordConfirmation !== \"\" && password === passwordConfirmation) {\r\n            const json = JSON.stringify({mail: mail, pseudo: username, mot_de_passe: password});\r\n            axios.post(url + '/API/Controllers/utilisateur/creerUtilisateur.php', json)\r\n                // axios.post(url + '/API/Controllers/connexion.php', json)\r\n                .then(response => {\r\n                    if(response.data.ErrorPseudo){\r\n                        setErrorPseudo(response.data.ErrorPseudo);\r\n                    }\r\n                    else if(response.data.ErrorMail){\r\n                        setErrorMail(response.data.ErrorMail);\r\n                    }\r\n                    else {\r\n                        history.push({\r\n                            pathname:  \"/login\",\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"LoginRegister\">\r\n            <div>\r\n                <h3>Sign up</h3>\r\n                <div className=\"InputItems\">\r\n                    <div>\r\n                        <input type=\"text\" id=\"username\" name=\"username\" required placeholder=\"     Username\"\r\n                               onChange={e => setUsername(e.target.value)}/>\r\n                        {errorPseudo &&(<p className=\"error\">{errorPseudo}</p>)}\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"mail\" id=\"mail\" name=\"mail\" required placeholder=\"     Mail\"\r\n                               onChange={e => setMail(e.target.value)}/>\r\n                        { errorMail &&(<p className=\"error\">{errorMail}</p>)}\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"password\" id=\"password\" name=\"password\" required placeholder=\"     Password\"\r\n                               onChange={e => setPassword(e.target.value)}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <input type=\"password\" id=\"passwordConfirmation\" name=\"passwordConfirmation\" required\r\n                               placeholder={\"     Confirm password\"}\r\n                               onChange={e => setPasswordConfirmation(e.target.value)}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"action\">\r\n                    <button className=\"button filled\" onClick={register}>Sign up</button>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;\r\n","C:\\wamp64\\www\\Projet_TER\\src\\contexts\\Auth.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\services\\AuthApi.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\services\\LocalStorage.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\tree\\CustomNode.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\tree\\ModalEditCritere.js",["206"],"import React, {useEffect, useState} from \"react\";\r\nimport $ from 'jquery';\r\n\r\nfunction ModalEditCritere(props) {\r\n    const [critere, setCritere] = useState(null);\r\n    const [title, setTitle] = useState(null);\r\n\r\n    function customFunction(){\r\n        let label = $('#label').val();\r\n        let informations = $('#informations').val();\r\n        props.mainAction(label, informations)\r\n        closeModal();\r\n    }\r\n\r\n    function closeModal() {\r\n        $('.ModalEditCritere').css(\"display\", \"none\");\r\n        props.close();\r\n        setCritere(null)\r\n    }\r\n\r\n    function openModal() {\r\n        $('.ModalEditCritere').css(\"display\", \"block\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.open) {\r\n            openModal();\r\n            setCritere(props.selectedCritere)\r\n            setTitle(props.title)\r\n        }\r\n    }, [props.open]);\r\n\r\n\r\n    return (\r\n        <div className=\"Modal ModalEditCritere\">\r\n            {title &&\r\n            <div>\r\n                <h3>{title}</h3>\r\n                <div>\r\n                    {critere &&\r\n                        <form>\r\n                            <label for=\"label\">label</label>\r\n                            <input type=\"text\" id=\"label\" name=\"label\" placeholder=\"\" defaultValue={critere.data.label}/>\r\n                            <label for=\"informations\">additional informations</label>\r\n                            <textarea type=\"text\" id=\"informations\" name=\"informations\" placeholder=\"\" defaultValue={critere.data.informations}/>\r\n                        </form>\r\n                    }\r\n                    <div className=\"action\">\r\n                        <button className=\"button filled\" onClick={customFunction}>Save</button>\r\n                        <button className=\"button outlined\" onClick={closeModal}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModalEditCritere;\r\n","C:\\wamp64\\www\\Projet_TER\\src\\components\\tree\\DebugNode.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\tree\\ModalEditEdge.js",["207"],"import React, {useEffect, useState} from \"react\";\r\nimport $ from 'jquery';\r\n\r\nfunction ModalEditEdge(props) {\r\n    const [edge, setEdge] = useState(null);\r\n    const [title, setTitle] = useState(null);\r\n\r\n    function customFunction(){\r\n        let label = $('#label').val();\r\n        props.mainAction(label)\r\n        closeModal();\r\n    }\r\n\r\n    function closeModal() {\r\n        $('.ModalEditEdge').css(\"display\", \"none\");\r\n        props.close();\r\n        setEdge(null)\r\n    }\r\n\r\n    function openModal() {\r\n        $('.ModalEditEdge').css(\"display\", \"block\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.open) {\r\n            openModal();\r\n            setEdge(props.selectedEdge)\r\n            setTitle(props.title)\r\n        }\r\n    }, [props.open]);\r\n\r\n    return (\r\n        <div className=\"Modal ModalEditEdge\">\r\n            {title &&\r\n            <div>\r\n                <h3>{title}</h3>\r\n                <div>\r\n                    {edge &&\r\n                        <form>\r\n                            <input type=\"text\" id=\"label\" name=\"label\" placeholder=\"label\" defaultValue={edge.label}/>\r\n                        </form>\r\n                    }\r\n                    <div className=\"action\">\r\n                        <button className=\"button filled\" onClick={customFunction}>Save</button>\r\n                        <button className=\"button outlined\" onClick={closeModal}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModalEditEdge;\r\n","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\tree\\ModalEditMethod.js",["208","209","210"],"import React, {useEffect, useState} from \"react\";\r\nimport $ from 'jquery';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faMinusSquare } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction ModalEditMethod(props) {\r\n    const [method, setMethod] = useState(null);\r\n    const [resources, setResources] = useState(null);\r\n    const [allResources, setAllResources] = useState(null);\r\n    const [title, setTitle] = useState(null);\r\n\r\n    function customFunction(){\r\n        let data = {\r\n            label: $('#label').val(),\r\n            description: $('#description').val(),\r\n            productedData: $('#productedData').val(),\r\n            workforce: $('#workforce').val(),\r\n            method: $('#method').val(),\r\n            analysis: $('#analysis').val(),\r\n            exemple: $('#exemple').val()\r\n        }\r\n        props.mainAction(data, resources)\r\n        closeModal();\r\n    }\r\n\r\n    function closeModal() {\r\n        $('.ModalEditMethod').css(\"display\", \"none\");\r\n        props.close();\r\n        setMethod(null)\r\n    }\r\n\r\n    function openModal() {\r\n        $('.ModalEditMethod').css(\"display\", \"block\");\r\n    }\r\n\r\n    function addFile(){\r\n        let selectedFileId = $('select').val();\r\n        if(selectedFileId){\r\n            let selectedFile = props.initialTree.ressources.find(item => item.ID_Ressource === selectedFileId.toString());\r\n            setResources(resources.concat(selectedFile));\r\n        }\r\n    }\r\n\r\n    function removeFile(id){\r\n        if(id){\r\n            let selectedFile = resources.find(item => item.ID_Ressource === id.toString());\r\n            let index = resources.indexOf(selectedFile);\r\n            setResources(resources.filter(item => resources.indexOf(item) !== index))\r\n        }\r\n    }\r\n\r\n    function openFile(name){\r\n        let protocol = window.location.protocol;\r\n        let host = window.location.hostname;\r\n        let url = protocol + '//' + host;\r\n        window.open(url + '/reactTest/MATUI/src/public/documentsRessources/' + name);\r\n    }\r\n\r\n    function initResources(resources, methodesRessources, method){\r\n        // ressources lié a notre methode\r\n        let methodeRessources = methodesRessources.filter(item => item.ID_Methode === method.id.slice(1));\r\n        // prépare le tableau des ressources\r\n        let ressources = []\r\n        methodeRessources.forEach(element => {\r\n            // push les ressources de la méthode a partir du tableau de liaison\r\n            let ressource = resources.find(item => item.ID_Ressource === element.ID_Ressource);\r\n            ressources.push(ressource)\r\n        })\r\n        setResources(ressources);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.open) {\r\n            openModal();\r\n            setMethod(props.selectedMethod)\r\n            setTitle(props.title)\r\n            setAllResources(props.initialTree.ressources);\r\n            initResources(props.initialTree.ressources, props.initialTree.methodesRessources, props.selectedMethod)\r\n        }\r\n    }, [props.open]);\r\n\r\n    useEffect(() => {\r\n        if (method && props.resources) {\r\n            setResources(props.resources[method.id.slice(1)])\r\n        }\r\n    }, [method]);\r\n\r\n    return (\r\n        <div className=\"Modal ModalEditMethod\">\r\n            {title &&\r\n            <div>\r\n                <h3>{title}</h3>\r\n                <div>\r\n                    <div className=\"content\">\r\n                        {method &&\r\n                            <form>\r\n                                <label htmlFor=\"label\">label</label>\r\n                                <input type=\"text\" id=\"label\" name=\"label\" placeholder=\"\" defaultValue={method.data.label}/>\r\n                                \r\n                                <label htmlFor=\"label\">description</label>\r\n                                <input type=\"text\" id=\"description\" name=\"description\" placeholder=\"\" defaultValue={method.data.description}/>\r\n                                \r\n                                <label htmlFor=\"label\">workforce</label>\r\n                                <input type=\"text\" id=\"workforce\" name=\"workforce\" placeholder=\"\" defaultValue={method.data.workforce}/>\r\n                                \r\n                                <label htmlFor=\"label\">producted data</label>\r\n                                <input type=\"text\" id=\"productedData\" name=\"productedData\" placeholder=\"\" defaultValue={method.data.productedData}/>\r\n\r\n                                <label htmlFor=\"label\">method</label>\r\n                                <input type=\"text\" id=\"method\" name=\"method\" placeholder=\"\" defaultValue={method.data.method}/>\r\n\r\n                                <label htmlFor=\"label\">analysis</label>\r\n                                <input type=\"text\" id=\"analysis\" name=\"analysis\" placeholder=\"\" defaultValue={method.data.analysis}/>\r\n                                \r\n                                <label htmlFor=\"label\">exemple</label>\r\n                                <input type=\"text\" id=\"exemple\" name=\"exemple\" placeholder=\"\" defaultValue={method.data.exemple}/>     \r\n                            </form>\r\n                        }\r\n                        <div className=\"ressources\">\r\n                            <div className=\"selector\">\r\n                                {allResources &&\r\n                                    <select name=\"pets\" id=\"pet-select\">\r\n                                        <option value=\"\">Choose method</option>\r\n                                        {allResources.map((element, i) => {   \r\n                                            if(!resources.find(item => item.ID_Ressource === element.ID_Ressource)){\r\n                                                return (\r\n                                                    <option key={i} value={element.ID_Ressource}>{element.Nom}</option>\r\n                                                ) \r\n                                            }\r\n                                        })}    \r\n                                    </select>\r\n                                }\r\n                                <button onClick={addFile}><FontAwesomeIcon className=\"icon\" icon={faPlus} /></button>\r\n                            </div>\r\n                            {resources &&\r\n                                <div>\r\n                                {Object.keys(resources).map(function(keyName, keyIndex) {\r\n                                    return (<div className=\"item\" key={keyName}>\r\n                                        <p onClick={() => openFile(resources[keyName].Nom)}>{resources[keyName].Nom}</p>\r\n                                        <FontAwesomeIcon onClick={() => removeFile(resources[keyName].ID_Ressource)} className=\"icon\" icon={faMinusSquare} />\r\n                                        </div>\r\n                                    ) \r\n                                })}    \r\n                                </div>\r\n                            }  \r\n                            {/* <form onSubmit={onSubmit}>\r\n                                <h1>Upload File</h1>\r\n                                <input type=\"file\" onChange={onChange}/>\r\n                                <button type=\"submit\">Upload File</button>\r\n                            </form>   */}\r\n                        </div>      \r\n                    </div>   \r\n                    <div className=\"action\">\r\n                        <button className=\"button filled\" onClick={customFunction}>Save</button>\r\n                        <button className=\"button outlined\" onClick={closeModal}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModalEditMethod;\r\n","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\tree\\ModalEditEndNode.js",["211"],"import React, {useEffect, useState} from \"react\";\r\nimport $ from 'jquery';\r\n\r\nfunction ModalEditEndNode(props) {\r\n    const [endNode, setEndNode] = useState(null);\r\n    const [title, setTitle] = useState(null);\r\n\r\n    function customFunction(){\r\n        let message = $('#message').val();\r\n        props.mainAction(message)\r\n        closeModal();\r\n    }\r\n\r\n    function closeModal() {\r\n        $('.ModalEditEndNode').css(\"display\", \"none\");\r\n        props.close();\r\n        setEndNode(null)\r\n    }\r\n\r\n    function openModal() {\r\n        $('.ModalEditEndNode').css(\"display\", \"block\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.open) {\r\n            openModal();\r\n            setEndNode(props.selectedEndNode)\r\n            setTitle(props.title)\r\n        }\r\n    }, [props.open]);\r\n\r\n    return (\r\n        <div className=\"Modal ModalEditEndNode\">\r\n            {title &&\r\n            <div>\r\n                <h3>{title}</h3>\r\n                <div>\r\n                    {endNode &&\r\n                        <form>\r\n                            <input type=\"text\" id=\"message\" name=\"message\" placeholder=\"message\" defaultValue={endNode.data.message}/>\r\n                        </form>\r\n                    }\r\n                    <div className=\"action\">\r\n                        <button className=\"button filled\" onClick={customFunction}>Save</button>\r\n                        <button className=\"button outlined\" onClick={closeModal}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModalEditEndNode;\r\n","C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\ModalInformation.js",[],"C:\\wamp64\\www\\Projet_TER\\src\\components\\modal\\ModalWarning.js",[],{"ruleId":"212","severity":1,"message":"213","line":194,"column":13,"nodeType":"214","messageId":"215","endLine":194,"endColumn":32},{"ruleId":"212","severity":1,"message":"213","line":212,"column":9,"nodeType":"214","messageId":"215","endLine":212,"endColumn":28},{"ruleId":"212","severity":1,"message":"213","line":213,"column":9,"nodeType":"214","messageId":"215","endLine":213,"endColumn":35},{"ruleId":"216","severity":1,"message":"217","line":2,"column":13,"nodeType":"218","messageId":"219","endLine":2,"endColumn":16},{"ruleId":"216","severity":1,"message":"220","line":20,"column":10,"nodeType":"218","messageId":"219","endLine":20,"endColumn":19},{"ruleId":"221","severity":1,"message":"222","line":64,"column":25,"nodeType":"223","messageId":"224","endLine":64,"endColumn":27},{"ruleId":"225","severity":1,"message":"226","line":64,"column":33,"nodeType":"227","messageId":"228","endLine":64,"endColumn":35},{"ruleId":"221","severity":1,"message":"222","line":64,"column":44,"nodeType":"223","messageId":"224","endLine":64,"endColumn":46},{"ruleId":"225","severity":1,"message":"226","line":64,"column":52,"nodeType":"227","messageId":"228","endLine":64,"endColumn":54},{"ruleId":"229","severity":1,"message":"230","line":83,"column":13,"nodeType":"231","messageId":"232","endLine":99,"endColumn":14},{"ruleId":"225","severity":1,"message":"233","line":103,"column":29,"nodeType":"227","messageId":"228","endLine":103,"endColumn":31},{"ruleId":"229","severity":1,"message":"230","line":150,"column":9,"nodeType":"231","messageId":"232","endLine":221,"endColumn":10},{"ruleId":"225","severity":1,"message":"226","line":244,"column":38,"nodeType":"227","messageId":"228","endLine":244,"endColumn":40},{"ruleId":"234","severity":1,"message":"235","line":385,"column":7,"nodeType":"236","endLine":385,"endColumn":9,"suggestions":"237"},{"ruleId":"234","severity":1,"message":"238","line":403,"column":8,"nodeType":"236","endLine":403,"endColumn":21,"suggestions":"239"},{"ruleId":"229","severity":1,"message":"230","line":431,"column":13,"nodeType":"231","messageId":"232","endLine":454,"endColumn":14},{"ruleId":"225","severity":1,"message":"233","line":557,"column":36,"nodeType":"227","messageId":"228","endLine":557,"endColumn":38},{"ruleId":"225","severity":1,"message":"233","line":560,"column":44,"nodeType":"227","messageId":"228","endLine":560,"endColumn":46},{"ruleId":"225","severity":1,"message":"226","line":633,"column":52,"nodeType":"227","messageId":"228","endLine":633,"endColumn":54},{"ruleId":"229","severity":1,"message":"230","line":640,"column":9,"nodeType":"231","messageId":"232","endLine":648,"endColumn":10},{"ruleId":"216","severity":1,"message":"240","line":7,"column":8,"nodeType":"218","messageId":"219","endLine":7,"endColumn":15},{"ruleId":"234","severity":1,"message":"241","line":46,"column":7,"nodeType":"236","endLine":46,"endColumn":9,"suggestions":"242"},{"ruleId":"234","severity":1,"message":"243","line":50,"column":8,"nodeType":"236","endLine":50,"endColumn":17,"suggestions":"244"},{"ruleId":"234","severity":1,"message":"243","line":23,"column":8,"nodeType":"236","endLine":23,"endColumn":17,"suggestions":"245"},{"ruleId":"225","severity":1,"message":"226","line":84,"column":14,"nodeType":"227","messageId":"228","endLine":84,"endColumn":16},{"ruleId":"229","severity":1,"message":"230","line":85,"column":9,"nodeType":"231","messageId":"232","endLine":90,"endColumn":10},{"ruleId":"234","severity":1,"message":"246","line":107,"column":8,"nodeType":"236","endLine":107,"endColumn":10,"suggestions":"247"},{"ruleId":"234","severity":1,"message":"241","line":28,"column":8,"nodeType":"236","endLine":28,"endColumn":10,"suggestions":"248"},{"ruleId":"249","severity":1,"message":"250","line":80,"column":48,"nodeType":"251","endLine":80,"endColumn":68},{"ruleId":"216","severity":1,"message":"252","line":11,"column":8,"nodeType":"218","messageId":"219","endLine":11,"endColumn":9},{"ruleId":"216","severity":1,"message":"253","line":29,"column":22,"nodeType":"218","messageId":"219","endLine":29,"endColumn":33},{"ruleId":"229","severity":1,"message":"230","line":9,"column":9,"nodeType":"231","messageId":"232","endLine":23,"endColumn":10},{"ruleId":"216","severity":1,"message":"254","line":1,"column":16,"nodeType":"218","messageId":"219","endLine":1,"endColumn":25},{"ruleId":"234","severity":1,"message":"255","line":31,"column":8,"nodeType":"236","endLine":31,"endColumn":20,"suggestions":"256"},{"ruleId":"234","severity":1,"message":"257","line":30,"column":8,"nodeType":"236","endLine":30,"endColumn":20,"suggestions":"258"},{"ruleId":"234","severity":1,"message":"259","line":81,"column":8,"nodeType":"236","endLine":81,"endColumn":20,"suggestions":"260"},{"ruleId":"234","severity":1,"message":"261","line":87,"column":8,"nodeType":"236","endLine":87,"endColumn":16,"suggestions":"262"},{"ruleId":"263","severity":1,"message":"264","line":125,"column":72,"nodeType":"265","messageId":"266","endLine":125,"endColumn":74},{"ruleId":"234","severity":1,"message":"267","line":30,"column":8,"nodeType":"236","endLine":30,"endColumn":20,"suggestions":"268"},"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","no-unused-vars","'get' is defined but never used.","Identifier","unusedVar","'faHubspot' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initialTree'. Either include it or remove the dependency array.","ArrayExpression",["269"],"React Hook useEffect has missing dependencies: 'initEdgesId', 'initMethodId', 'initNodeId', and 'initTree'. Either include them or remove the dependency array.",["270"],"'Exemple' is defined but never used.","React Hook useEffect has a missing dependency: 'getRessources'. Either include it or remove the dependency array.",["271"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["272"],["273"],"React Hook useEffect has a missing dependency: 'allFiles'. Either include it or remove the dependency array.",["274"],["275"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'$' is defined but never used.","'setUserRole' is assigned a value but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'props.selectedCritere' and 'props.title'. Either include them or remove the dependency array. If 'setCritere' needs the current value of 'props.selectedCritere', you can also switch to useReducer instead of useState and read 'props.selectedCritere' in the reducer.",["276"],"React Hook useEffect has missing dependencies: 'props.selectedEdge' and 'props.title'. Either include them or remove the dependency array. If 'setEdge' needs the current value of 'props.selectedEdge', you can also switch to useReducer instead of useState and read 'props.selectedEdge' in the reducer.",["277"],"React Hook useEffect has missing dependencies: 'props.initialTree.methodesRessources', 'props.initialTree.ressources', 'props.selectedMethod', and 'props.title'. Either include them or remove the dependency array. If 'setMethod' needs the current value of 'props.selectedMethod', you can also switch to useReducer instead of useState and read 'props.selectedMethod' in the reducer.",["278"],"React Hook useEffect has a missing dependency: 'props.resources'. Either include it or remove the dependency array. If 'setResources' needs the current value of 'props.resources', you can also switch to useReducer instead of useState and read 'props.resources' in the reducer.",["279"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'props.selectedEndNode' and 'props.title'. Either include them or remove the dependency array. If 'setEndNode' needs the current value of 'props.selectedEndNode', you can also switch to useReducer instead of useState and read 'props.selectedEndNode' in the reducer.",["280"],{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"287","fix":"289"},{"desc":"290","fix":"291"},{"desc":"285","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},"Update the dependencies array to be: [initialTree]",{"range":"303","text":"304"},"Update the dependencies array to be: [initEdgesId, initMethodId, initNodeId, initTree, initialTree]",{"range":"305","text":"306"},"Update the dependencies array to be: [getRessources]",{"range":"307","text":"308"},"Update the dependencies array to be: [checked, props]",{"range":"309","text":"310"},{"range":"311","text":"310"},"Update the dependencies array to be: [allFiles]",{"range":"312","text":"313"},{"range":"314","text":"308"},"Update the dependencies array to be: [props.open, props.selectedCritere, props.title]",{"range":"315","text":"316"},"Update the dependencies array to be: [props.open, props.selectedEdge, props.title]",{"range":"317","text":"318"},"Update the dependencies array to be: [props.initialTree.methodesRessources, props.initialTree.ressources, props.open, props.selectedMethod, props.title]",{"range":"319","text":"320"},"Update the dependencies array to be: [method, props.resources]",{"range":"321","text":"322"},"Update the dependencies array to be: [props.open, props.selectedEndNode, props.title]",{"range":"323","text":"324"},[14938,14940],"[initialTree]",[15763,15776],"[initEdgesId, initMethodId, initNodeId, initTree, initialTree]",[1388,1390],"[getRessources]",[1479,1488],"[checked, props]",[591,600],[3442,3444],"[allFiles]",[946,948],[833,845],"[props.open, props.selectedCritere, props.title]",[741,753],"[props.open, props.selectedEdge, props.title]",[3010,3022],"[props.initialTree.methodesRessources, props.initialTree.ressources, props.open, props.selectedMethod, props.title]",[3174,3182],"[method, props.resources]",[771,783],"[props.open, props.selectedEndNode, props.title]"]
{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\Projet_TER\\\\src\\\\views\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport $, { get } from 'jquery';\nimport axios from 'axios';\nimport ReactFlow, { addEdge, ReactFlowProvider, removeElements } from 'react-flow-renderer';\nimport Loader from '../components/Loader';\nimport Toolbar from '../components/Toolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tree() {\n  _s();\n\n  const defaultElements = [{\n    id: '1',\n    type: 'input',\n    data: {\n      label: 'Start Node'\n    },\n    position: {\n      x: 250,\n      y: 25\n    }\n  }, {\n    id: '2',\n    type: 'default',\n    data: {\n      label: 'Node'\n    },\n    position: {\n      x: 100,\n      y: 125\n    }\n  }, {\n    id: '3',\n    type: 'output',\n    data: {\n      label: 'End Node'\n    },\n    position: {\n      x: 250,\n      y: 250\n    }\n  }, {\n    id: 'e1-2',\n    source: '1',\n    target: '2',\n    type: 'smoothstep',\n    arrowHeadType: 'arrowclosed',\n    label: 'edge label'\n  }, {\n    id: 'e2-3',\n    source: '2',\n    target: '3',\n    type: 'smoothstep',\n    arrowHeadType: 'arrowclosed',\n    label: 'edge label'\n  }];\n  const colors = ['black', 'marron', 'blue', 'red', 'purple', 'fushia', 'green', 'lime', 'yellow', 'navy', 'aqua', 'aquamarine', 'chocolate', 'coral', 'crimson', 'darkcyan', 'darkgreen', 'darkorange', 'darkseagreen', 'deeppink', 'gold', 'indgo', 'lightcoral'];\n  const [initialTree, setinitialTree] = useState(null);\n  const [nextId, setNextId] = useState(\"0\");\n  const [editedElement, setEditedElement] = useState(null);\n  const [elements, setElements] = useState([]);\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  const onElementsRemove = elementsToRemove => setElements(els => removeElements(elementsToRemove, els));\n\n  const onConnect = params => setElements(els => addEdge({ ...params,\n    arrowHeadType: 'arrowclosed',\n    label: 'edge label',\n    type: 'smoothstep'\n  }, els));\n\n  const onLoad = _reactFlowInstance => setReactFlowInstance(_reactFlowInstance); // HOOKS REACT-FLOW\n\n\n  const onDragOver = event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  const onDrop = event => {\n    event.preventDefault(); //check if input/output already exists\n\n    const type = event.dataTransfer.getData('application/reactflow');\n\n    if (type != null && type == \"input\" || type == \"output\") {\n      if (checkExist(type)) {\n        return alert(\"Désolé, il ne peut y avoir qu'un seul noeud de type \" + type);\n      }\n    }\n\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n    createNode(type, position);\n    setNextId((parseInt(nextId) + 1).toString());\n  };\n\n  const onElementClick = (event, element) => {\n    // event.preventDefault();\n    let el = $(\"div\").find(`[data-id='${element.id}']`);\n\n    if (el.text() === \"Start Node\" || el.text() === \"End Node\") {\n      console.log(\"Impossible de modifier le noeud (début ou fin)\");\n    } else {\n      openEdition(element);\n    }\n  };\n\n  const onPaneClick = event => {\n    event.preventDefault();\n    closeEdition();\n  }; // FUNCTIONS\n  // set next ID\n\n\n  (function setId() {\n    $(\".react-flow__node\").each(function (index) {\n      let currentId = $(this).data(\"id\");\n\n      if (currentId >= nextId) {\n        setNextId((currentId + 1).toString());\n      }\n    });\n  })();\n\n  function getId() {\n    return nextId;\n  } // add input in selected node\n\n\n  function openEdition(element) {\n    if (!editedElement) {\n      let el = $(\"div\").find(`[data-id='${element.id}']`);\n      let text = el.text();\n      el.css(\"font-size\", 0);\n      el.append(`<input type=\"text\" id=\"label\" name=\"label\" value=\"${text}\"/>`);\n      setEditedElement(el);\n    }\n  } // remove input in selected node and save label\n\n\n  function closeEdition() {\n    if (editedElement) {\n      let newValue = editedElement.children(\"input\").val();\n      elements.forEach(element => {\n        if (element.id == editedElement.data(\"id\")) {\n          element.data.label = newValue;\n        }\n      });\n      editedElement.children(\"input\").remove();\n      editedElement.css(\"font-size\", \"12px\");\n      setEditedElement(null);\n    }\n  }\n\n  function createNode(id, type, position, label) {\n    let newNode;\n\n    if (label) {\n      newNode = {\n        id: id,\n        type,\n        position,\n        data: {\n          label: label\n        }\n      };\n    } else {\n      newNode = {\n        id: getId(),\n        type,\n        position,\n        data: {\n          label: `${type} node`\n        }\n      };\n    }\n\n    setElements(es => es.concat(newNode));\n    setNextId((parseInt(nextId) + 1).toString());\n  }\n\n  function createEdge(id_source, id_target, label, color) {\n    let newEdge = {\n      id: `e${id_source}-${id_target}`,\n      source: id_source,\n      target: id_target,\n      type: 'smoothstep',\n      arrowHeadType: 'arrowclosed',\n      label: label,\n      style: {\n        stroke: color\n      }\n    };\n    setElements(es => es.concat(newEdge));\n  } // check if a node type already exists\n\n\n  function checkExist(type) {\n    if (elements) {\n      console.log(\"yes\");\n\n      for (let i = 0; i < elements.length; i++) {\n        if (elements[i].type == type) {\n          return true;\n        }\n      }\n\n      return false;\n    } else {\n      return true;\n    }\n  } // DEBUG\n\n\n  function printNodes() {\n    console.log(initialTree);\n  } // INIT TREE\n\n\n  function initInput() {\n    createNode('0', 'input', {\n      x: 0,\n      y: 0\n    });\n    let firstNode = initialTree.criteres.find(el => el.ID_Critere === initialTree.entree[0].ID_Critere);\n    createNode(firstNode.ID_Critere, 'default', {\n      x: 0,\n      y: 100\n    }, firstNode.Libelle);\n    createEdge('0', firstNode.ID_Critere, null);\n    initNodes(initialTree.entree[0].ID_Critere);\n  }\n\n  function initNodes(start) {\n    // pour chaque critère on créer le noeud\n    initialTree.criteres.forEach(node => {\n      let color = colors[0];\n      colors.splice(0, 1);\n\n      if (node.ID_Critere !== start) {\n        createNode(node.ID_Critere, 'default', {\n          x: node.x,\n          y: node.y\n        }, node.Libelle);\n      } // on récupère les décisions attaché au critère et on regarde si un méthode est attaché\n\n\n      let decisions = getDecisions(node.ID_Critere);\n      decisions.forEach(decision => {\n        let method = getMethod(decision);\n\n        if (method) {\n          createNode(\"M\" + method.ID_Methode, 'default', {\n            x: method.x,\n            y: method.y\n          }, method.Libelle);\n          createEdge(node.ID_Critere, \"M\" + method.ID_Methode, decision.Libelle, color);\n          createEdge(\"M\" + method.ID_Methode, decision.ID_Critere_sortant, null, color);\n        } else {\n          if (decision.ID_Critere_sortant) {\n            createEdge(decision.ID_Critere_entrant, decision.ID_Critere_sortant, decision.Libelle, color);\n          }\n        }\n      });\n    });\n  }\n\n  function getDecisions(nodeId) {\n    let decisions = initialTree.decisions.filter(decision => decision.ID_Critere_entrant === nodeId);\n    return decisions;\n  }\n\n  function getMethod(decision) {\n    let method = initialTree.methodes.find(method => method.ID_Decision === decision.ID_Decision);\n    return method;\n  }\n\n  useEffect(() => {\n    if (!initialTree) {\n      let protocol = window.location.protocol;\n      let host = window.location.hostname;\n      let url = protocol + '//' + host;\n      axios.get(url + '/reactTest/MATUI/API/Controllers/lireArbre.php').then(response => {\n        setinitialTree(response.data);\n      }).catch(error => console.log(error));\n    }\n  }, []);\n  useEffect(() => {\n    if (initialTree) {\n      console.log(initialTree);\n      initInput();\n    }\n  }, [initialTree]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Tree\",\n    children: elements ? /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reactflow-wrapper\",\n        ref: reactFlowWrapper,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Tree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: 600,\n            backgroundColor: 'lightgrey',\n            margin: '100px'\n          },\n          children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n            elements: elements,\n            onElementsRemove: onElementsRemove,\n            onConnect: onConnect,\n            deleteKeyCode: 46,\n            onLoad: onLoad,\n            onDrop: onDrop,\n            onDragOver: onDragOver,\n            onElementClick: onElementClick,\n            onPaneClick: onPaneClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => printNodes(),\n          children: \"print nodes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tree, \"226r1HbtuqwOLvd3izYG2XyM/Po=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/wamp64/www/Projet_TER/src/views/Tree.js"],"names":["React","useRef","useState","useEffect","$","get","axios","ReactFlow","addEdge","ReactFlowProvider","removeElements","Loader","Toolbar","Tree","defaultElements","id","type","data","label","position","x","y","source","target","arrowHeadType","colors","initialTree","setinitialTree","nextId","setNextId","editedElement","setEditedElement","elements","setElements","reactFlowWrapper","reactFlowInstance","setReactFlowInstance","onElementsRemove","elementsToRemove","els","onConnect","params","onLoad","_reactFlowInstance","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","getData","checkExist","alert","reactFlowBounds","current","getBoundingClientRect","project","clientX","left","clientY","top","createNode","parseInt","toString","onElementClick","element","el","find","text","console","log","openEdition","onPaneClick","closeEdition","setId","each","index","currentId","getId","css","append","newValue","children","val","forEach","remove","newNode","es","concat","createEdge","id_source","id_target","color","newEdge","style","stroke","i","length","printNodes","initInput","firstNode","criteres","ID_Critere","entree","Libelle","initNodes","start","node","splice","decisions","getDecisions","decision","method","getMethod","ID_Methode","ID_Critere_sortant","ID_Critere_entrant","nodeId","filter","methodes","ID_Decision","protocol","window","location","host","hostname","url","then","response","catch","error","height","backgroundColor","margin"],"mappings":"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","sourcesContent":["import React, {useRef, useState, useEffect} from 'react';\r\nimport $, { get } from 'jquery';\r\nimport axios from 'axios';\r\nimport ReactFlow, {addEdge, ReactFlowProvider, removeElements} from 'react-flow-renderer';\r\n\r\nimport Loader from '../components/Loader';\r\nimport Toolbar from '../components/Toolbar';\r\n\r\nfunction Tree() {\r\n\r\n    const defaultElements = [\r\n        {\r\n            id: '1',\r\n            type: 'input',\r\n            data: {label: 'Start Node'},\r\n            position: {x: 250, y: 25},\r\n        },\r\n        {\r\n            id: '2',\r\n            type: 'default',\r\n            data: {label: 'Node'},\r\n            position: {x: 100, y: 125},\r\n        },\r\n        {\r\n            id: '3',\r\n            type: 'output',\r\n            data: {label: 'End Node'},\r\n            position: {x: 250, y: 250},\r\n        },\r\n        {\r\n            id: 'e1-2',\r\n            source: '1',\r\n            target: '2',\r\n            type: 'smoothstep',\r\n            arrowHeadType: 'arrowclosed',\r\n            label: 'edge label',\r\n        },\r\n        {\r\n            id: 'e2-3',\r\n            source: '2',\r\n            target: '3',\r\n            type: 'smoothstep',\r\n            arrowHeadType: 'arrowclosed',\r\n            label: 'edge label',\r\n        },\r\n    ];\r\n\r\n    const colors = ['black', 'marron', 'blue', 'red', 'purple', 'fushia', 'green', 'lime', 'yellow',\r\n'navy', 'aqua', 'aquamarine', 'chocolate', 'coral', 'crimson', 'darkcyan', 'darkgreen', 'darkorange', 'darkseagreen',\r\n'deeppink', 'gold', 'indgo', 'lightcoral'];\r\n\r\n    const [initialTree, setinitialTree] = useState(null);\r\n    const [nextId, setNextId] = useState(\"0\");\r\n    const [editedElement, setEditedElement] = useState(null);\r\n    const [elements, setElements] = useState([]);\r\n    const reactFlowWrapper = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    const onElementsRemove = (elementsToRemove) => setElements((els) => removeElements(elementsToRemove, els));\r\n    const onConnect = (params) => setElements((els) => addEdge({\r\n        ...params,\r\n        arrowHeadType: 'arrowclosed', label: 'edge label', type: 'smoothstep'\r\n    }, els));\r\n    const onLoad = (_reactFlowInstance) => setReactFlowInstance(_reactFlowInstance);\r\n\r\n\r\n    // HOOKS REACT-FLOW\r\n\r\n    const onDragOver = (event) => {\r\n        event.preventDefault();\r\n        event.dataTransfer.dropEffect = 'move';\r\n    };\r\n\r\n    const onDrop = (event) => {\r\n        event.preventDefault();\r\n\r\n        //check if input/output already exists\r\n        const type = event.dataTransfer.getData('application/reactflow');\r\n        if (type!= null && type == \"input\" || type == \"output\") {\r\n            if (checkExist(type)) {\r\n                return alert(\"Désolé, il ne peut y avoir qu'un seul noeud de type \" + type)\r\n            }\r\n        }\r\n\r\n        const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n        const position = reactFlowInstance.project({\r\n            x: event.clientX - reactFlowBounds.left,\r\n            y: event.clientY - reactFlowBounds.top,\r\n        });\r\n        createNode(type, position);\r\n        setNextId((parseInt(nextId) + 1).toString());\r\n    };\r\n\r\n    const onElementClick = (event, element) => {\r\n        // event.preventDefault();\r\n        let el = $(\"div\").find(`[data-id='${element.id}']`)\r\n        if (el.text() === \"Start Node\" || el.text() === \"End Node\") {\r\n            console.log(\"Impossible de modifier le noeud (début ou fin)\")\r\n        } else {\r\n            openEdition(element);\r\n        }\r\n    }\r\n\r\n    const onPaneClick = (event) => {\r\n        event.preventDefault();\r\n        closeEdition();\r\n    }\r\n\r\n\r\n    // FUNCTIONS\r\n\r\n    // set next ID\r\n    (function setId() {\r\n        $(\".react-flow__node\").each(function (index) {\r\n            let currentId = $(this).data(\"id\");\r\n            if (currentId >= nextId) {\r\n                setNextId((currentId + 1).toString());\r\n            }\r\n        });\r\n    })();\r\n\r\n    function getId() {\r\n        return nextId;\r\n    }\r\n\r\n    // add input in selected node\r\n    function openEdition(element) {\r\n        if (!editedElement) {\r\n            let el = $(\"div\").find(`[data-id='${element.id}']`)\r\n            let text = el.text()\r\n            el.css(\"font-size\", 0);\r\n            el.append(`<input type=\"text\" id=\"label\" name=\"label\" value=\"${text}\"/>`);\r\n            setEditedElement(el)\r\n        }\r\n    }\r\n\r\n    // remove input in selected node and save label\r\n    function closeEdition() {\r\n        if (editedElement) {\r\n            let newValue = editedElement.children(\"input\").val();\r\n            elements.forEach(element => {\r\n                if (element.id == editedElement.data(\"id\")) {\r\n                    element.data.label = newValue;\r\n                }\r\n            });\r\n            editedElement.children(\"input\").remove();\r\n            editedElement.css(\"font-size\", \"12px\");\r\n            setEditedElement(null)\r\n        }\r\n    }\r\n\r\n    function createNode(id, type, position, label) {\r\n        let newNode;\r\n        if(label){\r\n            newNode = {\r\n                id: id,\r\n                type,\r\n                position,\r\n                data: {label: label},\r\n            };\r\n        } else {\r\n            newNode = {\r\n                id: getId(),\r\n                type,\r\n                position,\r\n                data: {label: `${type} node`},\r\n            };\r\n        }\r\n        setElements((es) => es.concat(newNode));\r\n        setNextId((parseInt(nextId) + 1).toString());\r\n    }\r\n\r\n    function createEdge(id_source, id_target, label, color){\r\n        let newEdge = {\r\n            id: `e${id_source}-${id_target}`,\r\n            source: id_source,\r\n            target: id_target,\r\n            type: 'smoothstep',\r\n            arrowHeadType: 'arrowclosed',\r\n            label: label,\r\n            style: { stroke: color },\r\n        }\r\n        setElements((es) => es.concat(newEdge));\r\n    }\r\n\r\n    // check if a node type already exists\r\n    function checkExist(type) {\r\n        if(elements){\r\n            console.log(\"yes\")\r\n            for (let i = 0; i < elements.length; i++) {\r\n                if (elements[i].type == type) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // DEBUG\r\n\r\n    function printNodes() {\r\n        console.log(initialTree);\r\n    }\r\n\r\n    // INIT TREE\r\n\r\n    function initInput(){\r\n        createNode('0', 'input', {x: 0, y: 0});\r\n        let firstNode = initialTree.criteres.find(el => el.ID_Critere === initialTree.entree[0].ID_Critere);\r\n        createNode(firstNode.ID_Critere,'default', {x: 0, y: 100}, firstNode.Libelle);\r\n        createEdge('0', firstNode.ID_Critere, null);\r\n        initNodes(initialTree.entree[0].ID_Critere)\r\n    }\r\n\r\n    function initNodes(start){\r\n        // pour chaque critère on créer le noeud\r\n        initialTree.criteres.forEach(node => {\r\n            let color = colors[0]\r\n            colors.splice(0, 1);\r\n            if(node.ID_Critere !== start){\r\n                createNode(node.ID_Critere, 'default',  {x: node.x, y: node.y}, node.Libelle)\r\n            }\r\n                // on récupère les décisions attaché au critère et on regarde si un méthode est attaché\r\n                let decisions = getDecisions(node.ID_Critere);\r\n                decisions.forEach(decision => {\r\n                    let method = getMethod(decision);\r\n                    if(method){\r\n                        createNode(\"M\" + method.ID_Methode, 'default',  {x: method.x, y: method.y}, method.Libelle);\r\n                        createEdge(node.ID_Critere, \"M\" + method.ID_Methode, decision.Libelle, color);\r\n                        createEdge(\"M\" + method.ID_Methode, decision.ID_Critere_sortant, null, color);\r\n                    } else {\r\n                        if(decision.ID_Critere_sortant){\r\n                            createEdge(decision.ID_Critere_entrant, decision.ID_Critere_sortant, decision.Libelle, color);\r\n                        }\r\n                    }\r\n                })\r\n            \r\n        });\r\n    }\r\n\r\n    function getDecisions(nodeId){\r\n        let decisions =  initialTree.decisions.filter(decision => decision.ID_Critere_entrant === nodeId);\r\n        return decisions;\r\n    }\r\n\r\n    function getMethod(decision){\r\n        let method =  initialTree.methodes.find(method => method.ID_Decision === decision.ID_Decision);\r\n        return method;\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(!initialTree){\r\n            let protocol = window.location.protocol;\r\n            let host = window.location.hostname;\r\n            let url = protocol + '//' + host;\r\n                axios.get(url + '/reactTest/MATUI/API/Controllers/lireArbre.php')\r\n                .then(response => {\r\n                    setinitialTree(response.data)\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        if(initialTree){\r\n            console.log(initialTree)\r\n            initInput();\r\n        }\r\n    }, [initialTree]);\r\n\r\n    return (\r\n        <div className=\"Tree\">\r\n            {elements ?\r\n                <ReactFlowProvider>\r\n                    <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n                        <h1>Tree</h1>\r\n                        <div style={{height: 600, backgroundColor: 'lightgrey', margin: '100px'}}>\r\n                            <ReactFlow \r\n                                elements={elements}\r\n                                onElementsRemove={onElementsRemove}\r\n                                onConnect={onConnect}\r\n                                deleteKeyCode={46}\r\n                                onLoad={onLoad}\r\n                                onDrop={onDrop}\r\n                                onDragOver={onDragOver}\r\n                                onElementClick={onElementClick}\r\n                                onPaneClick={onPaneClick}/>\r\n                        </div>\r\n                        <button onClick={() => printNodes()}>print nodes</button>\r\n                        <Toolbar/>\r\n                    </div>\r\n                </ReactFlowProvider>\r\n            : <Loader/> \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tree;\r\n"]},"metadata":{},"sourceType":"module"}
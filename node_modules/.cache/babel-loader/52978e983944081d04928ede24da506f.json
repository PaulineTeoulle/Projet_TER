{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\Projet_TER\\\\src\\\\views\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport $ from 'jquery';\nimport ReactFlow, { addEdge, ReactFlowProvider, removeElements } from 'react-flow-renderer';\nimport Toolbar from '../components/Toolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tree() {\n  _s();\n\n  const initialElements = [{\n    id: '1',\n    type: 'input',\n    data: {\n      label: 'Start Node'\n    },\n    position: {\n      x: 250,\n      y: 25\n    }\n  }, {\n    id: '2',\n    type: 'default',\n    data: {\n      label: 'Node'\n    },\n    position: {\n      x: 100,\n      y: 125\n    }\n  }, {\n    id: '3',\n    type: 'output',\n    data: {\n      label: 'End Node'\n    },\n    position: {\n      x: 250,\n      y: 250\n    }\n  }, {\n    id: 'e1-2',\n    source: '1',\n    target: '2',\n    type: 'smoothstep',\n    arrowHeadType: 'arrowclosed',\n    label: 'edge label'\n  }, {\n    id: 'e2-3',\n    source: '2',\n    target: '3',\n    type: 'smoothstep',\n    arrowHeadType: 'arrowclosed',\n    label: 'edge label'\n  }];\n  const [nextId, setNextId] = useState(\"0\");\n  const [editedElement, setEditedElement] = useState(null);\n  const [elements, setElements] = useState(initialElements);\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  const onElementsRemove = elementsToRemove => setElements(els => removeElements(elementsToRemove, els));\n\n  const onConnect = params => setElements(els => addEdge({ ...params,\n    arrowHeadType: 'arrowclosed',\n    label: 'edge label',\n    type: 'smoothstep'\n  }, els));\n\n  const onLoad = _reactFlowInstance => setReactFlowInstance(_reactFlowInstance); // HOOKS REACT-FLOW\n\n\n  const onDragOver = event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  const onDrop = event => {\n    event.preventDefault(); //check if input/output already exists\n\n    const type = event.dataTransfer.getData('application/reactflow');\n\n    if (type == \"input\" || type == \"output\") {\n      if (checkExist(type)) {\n        return alert(\"Désolé, il ne peut y avoir qu'un seul noeud de type \" + type);\n      }\n    }\n\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n    createNode(type, position);\n    setNextId((parseInt(nextId) + 1).toString());\n  };\n\n  const onElementClick = (event, element) => {\n    // event.preventDefault();\n    let el = $(\"div\").find(`[data-id='${element.id}']`);\n\n    if (el.text() === \"Start Node\" || el.text() === \"End Node\") {\n      console.log(\"Impossible de modifier le noeud (début ou fin)\");\n    } else {\n      openEdition(element);\n    }\n\n    if (element.type === \"smoothstep\") {} else {\n      console.log(element.type);\n    }\n  };\n\n  const onPaneClick = event => {\n    event.preventDefault();\n    closeEdition();\n  }; // FUNCTIONS\n  // set next ID\n\n\n  (function setId() {\n    $(\".react-flow__node\").each(function (index) {\n      let currentId = $(this).data(\"id\");\n\n      if (currentId >= nextId) {\n        setNextId((currentId + 1).toString());\n      }\n    });\n  })();\n\n  function getId() {\n    return nextId;\n  } // add input in selected node\n\n\n  function openEdition(element) {\n    if (!editedElement) {\n      let el = $(\"div\").find(`[data-id='${element.id}']`);\n      let text = el.text();\n      el.css(\"font-size\", 0);\n      el.append(`<input type=\"text\" id=\"label\" name=\"label\" value=\"${text}\"/>`);\n      setEditedElement(el);\n    }\n  } // remove input in selected node and save label\n\n\n  function closeEdition() {\n    if (editedElement) {\n      let newValue = editedElement.children(\"input\").val();\n      elements.forEach(element => {\n        if (element.id == editedElement.data(\"id\")) {\n          element.data.label = newValue;\n        }\n      });\n      editedElement.children(\"input\").remove();\n      editedElement.css(\"font-size\", \"12px\");\n      setEditedElement(null);\n    }\n  }\n\n  function createNode(type, position) {\n    let newNode = {\n      id: getId(),\n      type,\n      position,\n      data: {\n        label: `${type} node`\n      }\n    };\n    setElements(es => es.concat(newNode));\n  } // check if a node type already exists\n\n\n  function checkExist(type) {\n    for (let i = 0; i < elements.length; i++) {\n      if (elements[i].type == type) {\n        return true;\n      }\n    }\n\n    return false;\n  } // DEBUG\n\n\n  function printNodes() {\n    console.log(elements);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Tree\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reactflow-wrapper\",\n        ref: reactFlowWrapper,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Tree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: 600,\n            backgroundColor: 'lightgrey'\n          },\n          children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n            elements: elements,\n            onElementsRemove: onElementsRemove,\n            onConnect: onConnect,\n            deleteKeyCode: 46,\n            onLoad: onLoad,\n            onDrop: onDrop,\n            onDragOver: onDragOver,\n            onElementClick: onElementClick,\n            onPaneClick: onPaneClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => printNodes(),\n          children: \"print nodes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tree, \"iYNdwPcO89BIf0BNeRTjTFjbp0Y=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/wamp64/www/Projet_TER/src/views/Tree.js"],"names":["React","useRef","useState","$","ReactFlow","addEdge","ReactFlowProvider","removeElements","Toolbar","Tree","initialElements","id","type","data","label","position","x","y","source","target","arrowHeadType","nextId","setNextId","editedElement","setEditedElement","elements","setElements","reactFlowWrapper","reactFlowInstance","setReactFlowInstance","onElementsRemove","elementsToRemove","els","onConnect","params","onLoad","_reactFlowInstance","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","getData","checkExist","alert","reactFlowBounds","current","getBoundingClientRect","project","clientX","left","clientY","top","createNode","parseInt","toString","onElementClick","element","el","find","text","console","log","openEdition","onPaneClick","closeEdition","setId","each","index","currentId","getId","css","append","newValue","children","val","forEach","remove","newNode","es","concat","i","length","printNodes","height","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from 'react';\r\nimport $ from 'jquery';\r\nimport ReactFlow, {addEdge, ReactFlowProvider, removeElements} from 'react-flow-renderer';\r\n\r\nimport Toolbar from '../components/Toolbar';\r\n\r\nfunction Tree() {\r\n\r\n    const initialElements = [\r\n        {\r\n            id: '1',\r\n            type: 'input',\r\n            data: {label: 'Start Node'},\r\n            position: {x: 250, y: 25},\r\n        },\r\n        {\r\n            id: '2',\r\n            type: 'default',\r\n            data: {label: 'Node'},\r\n            position: {x: 100, y: 125},\r\n        },\r\n        {\r\n            id: '3',\r\n            type: 'output',\r\n            data: {label: 'End Node'},\r\n            position: {x: 250, y: 250},\r\n        },\r\n        {\r\n            id: 'e1-2',\r\n            source: '1',\r\n            target: '2',\r\n            type: 'smoothstep',\r\n            arrowHeadType: 'arrowclosed',\r\n            label: 'edge label',\r\n        },\r\n        {\r\n            id: 'e2-3',\r\n            source: '2',\r\n            target: '3',\r\n            type: 'smoothstep',\r\n            arrowHeadType: 'arrowclosed',\r\n            label: 'edge label',\r\n        },\r\n    ];\r\n\r\n    const [nextId, setNextId] = useState(\"0\");\r\n    const [editedElement, setEditedElement] = useState(null);\r\n    const [elements, setElements] = useState(initialElements);\r\n    const reactFlowWrapper = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    const onElementsRemove = (elementsToRemove) => setElements((els) => removeElements(elementsToRemove, els));\r\n    const onConnect = (params) => setElements((els) => addEdge({\r\n        ...params,\r\n        arrowHeadType: 'arrowclosed', label: 'edge label', type: 'smoothstep'\r\n    }, els));\r\n    const onLoad = (_reactFlowInstance) => setReactFlowInstance(_reactFlowInstance);\r\n\r\n\r\n    // HOOKS REACT-FLOW\r\n\r\n    const onDragOver = (event) => {\r\n        event.preventDefault();\r\n        event.dataTransfer.dropEffect = 'move';\r\n    };\r\n\r\n    const onDrop = (event) => {\r\n        event.preventDefault();\r\n\r\n        //check if input/output already exists\r\n        const type = event.dataTransfer.getData('application/reactflow');\r\n        if (type == \"input\" || type == \"output\") {\r\n            if (checkExist(type)) {\r\n                return alert(\"Désolé, il ne peut y avoir qu'un seul noeud de type \" + type)\r\n            }\r\n        }\r\n\r\n        const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n        const position = reactFlowInstance.project({\r\n            x: event.clientX - reactFlowBounds.left,\r\n            y: event.clientY - reactFlowBounds.top,\r\n        });\r\n        createNode(type, position);\r\n        setNextId((parseInt(nextId) + 1).toString());\r\n    };\r\n\r\n    const onElementClick = (event, element) => {\r\n        // event.preventDefault();\r\n        let el = $(\"div\").find(`[data-id='${element.id}']`)\r\n        if (el.text() === \"Start Node\" || el.text() === \"End Node\") {\r\n            console.log(\"Impossible de modifier le noeud (début ou fin)\")\r\n        } else {\r\n            openEdition(element);\r\n        }\r\n        if (element.type === \"smoothstep\") {\r\n\r\n        } else {\r\n            console.log(element.type)\r\n        }\r\n    }\r\n\r\n    const onPaneClick = (event) => {\r\n        event.preventDefault();\r\n        closeEdition();\r\n    }\r\n\r\n\r\n    // FUNCTIONS\r\n\r\n    // set next ID\r\n    (function setId() {\r\n        $(\".react-flow__node\").each(function (index) {\r\n            let currentId = $(this).data(\"id\");\r\n            if (currentId >= nextId) {\r\n                setNextId((currentId + 1).toString());\r\n            }\r\n        });\r\n    })();\r\n\r\n    function getId() {\r\n        return nextId;\r\n    }\r\n\r\n    // add input in selected node\r\n    function openEdition(element) {\r\n        if (!editedElement) {\r\n            let el = $(\"div\").find(`[data-id='${element.id}']`)\r\n            let text = el.text()\r\n            el.css(\"font-size\", 0);\r\n            el.append(`<input type=\"text\" id=\"label\" name=\"label\" value=\"${text}\"/>`);\r\n            setEditedElement(el)\r\n        }\r\n    }\r\n\r\n    // remove input in selected node and save label\r\n    function closeEdition() {\r\n        if (editedElement) {\r\n            let newValue = editedElement.children(\"input\").val();\r\n            elements.forEach(element => {\r\n                if (element.id == editedElement.data(\"id\")) {\r\n                    element.data.label = newValue;\r\n                }\r\n            });\r\n            editedElement.children(\"input\").remove();\r\n            editedElement.css(\"font-size\", \"12px\");\r\n            setEditedElement(null)\r\n        }\r\n    }\r\n\r\n    function createNode(type, position) {\r\n        let newNode = {\r\n            id: getId(),\r\n            type,\r\n            position,\r\n            data: {label: `${type} node`},\r\n        };\r\n        setElements((es) => es.concat(newNode));\r\n    }\r\n\r\n    // check if a node type already exists\r\n    function checkExist(type) {\r\n        for (let i = 0; i < elements.length; i++) {\r\n            if (elements[i].type == type) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // DEBUG\r\n\r\n    function printNodes() {\r\n        console.log(elements);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Tree\">\r\n            <ReactFlowProvider>\r\n                <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n                    <h1>Tree</h1>\r\n                    <div style={{height: 600, backgroundColor: 'lightgrey'}}>\r\n                        <ReactFlow elements={elements}\r\n                                   onElementsRemove={onElementsRemove}\r\n                                   onConnect={onConnect}\r\n                                   deleteKeyCode={46}\r\n                                   onLoad={onLoad}\r\n                                   onDrop={onDrop}\r\n                                   onDragOver={onDragOver}\r\n                                   onElementClick={onElementClick}\r\n                                   onPaneClick={onPaneClick}/>\r\n                    </div>\r\n                    <button onClick={() => printNodes()}>print nodes</button>\r\n                    <Toolbar/>\r\n                </div>\r\n            </ReactFlowProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tree;\r\n"]},"metadata":{},"sourceType":"module"}
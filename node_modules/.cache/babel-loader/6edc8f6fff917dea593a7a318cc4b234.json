{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\Projet_TER\\\\src\\\\views\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport $, { get } from 'jquery';\nimport axios from 'axios';\nimport ReactFlow, { addEdge, ReactFlowProvider, removeElements } from 'react-flow-renderer';\nimport Loader from '../components/Loader';\nimport Toolbar from '../components/Toolbar';\nimport CustomNode from '../components/tree/CustomNode';\nimport DebugNode from '../components/tree/DebugNode';\nimport ModalEditCritere from '../components/modal/tree/ModalEditCritere';\nimport ModalEditEdge from '../components/modal/tree/ModalEditEdge';\nimport ModalEditMethod from '../components/modal/tree/ModalEditMethod';\nimport ModalEditEndNode from '../components/modal/tree/ModalEditEndNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tree() {\n  _s();\n\n  const nodeTypes = {\n    critereNode: CustomNode,\n    debugNode: DebugNode\n  };\n  const colors = ['black', 'marron', 'blue', 'red', 'purple', 'fushia', 'green', 'lime', 'yellow', 'navy', 'aqua', 'aquamarine', 'chocolate', 'coral', 'crimson', 'darkcyan', 'darkgreen', 'darkorange', 'darkseagreen', 'deeppink', 'gold', 'indgo', 'lightcoral'];\n  const [initialTree, setInitialTree] = useState(null);\n  const [resources, setResources] = useState(null);\n  const [nextId, setNextId] = useState(\"1\");\n  const [nextEdgeId, setNextEdgeId] = useState(\"D1\");\n  const [nextMethodId, setNextMethodId] = useState(\"M1\");\n  const [elements, setElements] = useState([]);\n  const [remove, setRemove] = useState(false);\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  const onElementsRemove = elementsToRemove => setElements(els => removeElements(elementsToRemove, els));\n\n  const onConnect = params => setElements(els => addEdge({ ...params,\n    id: getEdgeId(),\n    arrowHeadType: 'arrowclosed',\n    label: 'edge label',\n    type: 'smoothstep'\n  }, els, setNextEdgeId(\"D\" + (parseInt(nextEdgeId.slice(1)) + 1).toString()))); // HOOKS REACT-FLOW\n\n\n  const onDragOver = event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  const onDrop = event => {\n    event.preventDefault(); //check if input/output already exists\n\n    const type = event.dataTransfer.getData('application/reactflow');\n\n    if (type != null && type == \"input\" || type == \"output\") {\n      if (checkExist(type)) {\n        return alert(\"Désolé, il ne peut y avoir qu'un seul noeud de type \" + type);\n      }\n    }\n\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    let toolbarWidth = $('aside').width();\n    const position = reactFlowInstance.project({\n      x: event.clientX - toolbarWidth,\n      y: event.clientY - reactFlowBounds.top\n    });\n    createNode(type, position);\n  };\n\n  const onElementClick = (event, element) => {\n    if (!remove) {\n      switch (element.type) {\n        case 'critereNode':\n          openModalEditCritere(element);\n          break;\n\n        case 'default':\n          openModalEditMethod(element);\n          break;\n\n        case 'smoothstep':\n          openModalEditEdge(element);\n          break;\n\n        case 'input':\n          alert(\"Cannot modify start node\");\n          break;\n\n        case 'output':\n          openModalEditEndNode(element);\n          break;\n      }\n    } else {\n      if (element.type != \"smoothstep\") {\n        let edges = elements.filter(item => item.type === \"smoothstep\");\n        let attachedEdges = edges.filter(item => item.source === element.id || item.target === element.id);\n        console.log(attachedEdges);\n\n        if (attachedEdges.length > 0) {\n          alert(\"You must remove all edges from this element\");\n        } else {\n          deleteElement(element);\n        }\n      } else {\n        deleteElement(element);\n      }\n    }\n  };\n\n  const onPaneClick = event => {\n    event.preventDefault();\n  }; // FUNCTIONS\n  // return les prochains ID utilisable\n\n\n  function getId() {\n    return nextId;\n  }\n\n  function getEdgeId() {\n    return nextEdgeId;\n  }\n\n  function getMethodId() {\n    return nextMethodId;\n  }\n  /*\r\n  crée un noeud de type :\r\n      - input\r\n      - output\r\n      - default (method)\r\n      - critereNode (critere)\r\n    parametres :\r\n      - type : type du noeud\r\n      - position : position du client si noeud créer via toolbar ou position x et y stocké en bd\r\n      - data : toutes les data du noeud de la BD, si noeud créer via toolbar le label et générer par défault\r\n  */\n\n\n  function createNode(type, position, data) {\n    let newNode;\n\n    switch (type) {\n      case 'input':\n        // noeud entree\n        console.log(\"INPUT\");\n        newNode = {\n          id: \"0\",\n          type,\n          position,\n          data: {\n            label: `${type} node`\n          }\n        };\n        break;\n\n      case 'output':\n        // noeud sortie\n        console.log(\"OUTPUT\");\n        newNode = {\n          id: \"S0\",\n          type,\n          position,\n          data: {\n            label: `${type} node`\n          }\n        };\n        break;\n\n      case 'critereNode':\n        // noeud critere\n        console.log(\"CRITERE\");\n\n        if (data) {\n          newNode = {\n            id: data.ID_Critere,\n            type,\n            position,\n            data: {\n              label: data.Libelle,\n              informations: data.Informations ? data.Informations : null\n            }\n          };\n\n          if (data.ID_Critere > getId()) {\n            setNextId((parseInt(data.ID_Critere) + 1).toString());\n          }\n        } else {\n          newNode = {\n            id: getId(),\n            type,\n            position,\n            data: {\n              label: `${type} node`\n            }\n          };\n          setNextId((parseInt(nextId) + 1).toString());\n        }\n\n        break;\n\n      case 'default':\n        // noeud methode\n        console.log(\"METHODE\");\n\n        if (data) {\n          newNode = {\n            id: \"M\" + data.ID_Methode,\n            type,\n            position,\n            data: {\n              label: data.Libelle,\n              description: data.Description,\n              productedData: data.Donnees_produites,\n              workforce: data.Effectif_preconise,\n              method: data.Type_methode,\n              analysis: data.Type_analyse,\n              exemple: data.Exemple\n            }\n          };\n\n          if (parseInt(data.ID_Methode) > getMethodId().slice(1)) {\n            setNextMethodId(\"M\" + (parseInt(data.ID_Methode) + 1).toString());\n          }\n        } else {\n          newNode = {\n            id: getMethodId(),\n            type,\n            position,\n            data: {\n              label: `${type} node`\n            }\n          };\n          setNextMethodId(\"M\" + (parseInt(getMethodId().slice(1)) + 1).toString());\n        }\n\n        break;\n    } // insertion du noeud dans les elements react flow render\n\n\n    setElements(es => es.concat(newNode));\n  } // crée un lien entre 2 noeuds\n\n\n  function createEdge(id, id_source, id_target, label, color) {\n    let newEdge = {\n      id: id,\n      source: id_source,\n      target: id_target,\n      type: 'smoothstep',\n      arrowHeadType: 'arrowclosed',\n      label: label,\n      style: {\n        stroke: color\n      }\n    };\n    setElements(es => es.concat(newEdge));\n\n    if (id.substring(0, 2) != \"DM\") {\n      if (parseInt(id.slice(1)) > getEdgeId().slice(1)) {\n        setNextEdgeId(\"D\" + (parseInt(id.slice(1)) + 1).toString());\n      }\n    }\n  } // check if a node type already exists\n\n\n  function checkExist(type) {\n    if (elements) {\n      for (let i = 0; i < elements.length; i++) {\n        if (elements[i].type == type) {\n          return true;\n        }\n      }\n\n      return false;\n    } else {\n      return true;\n    }\n  } // gestion de la supression\n\n\n  function deleteMode() {\n    remove ? setRemove(false) : setRemove(true);\n  }\n\n  function deleteElement(element) {\n    console.log(\"delete => \");\n    console.log(element);\n    let selectedElement = elements.find(el => el.id === element.id);\n    let index = elements.indexOf(selectedElement);\n    setElements(elements.filter(item => elements.indexOf(item) !== index));\n  }\n\n  useEffect(() => {\n    if (remove) {\n      $(\".canvas\").css(\"border\", \"1px solid red\");\n    } else {\n      $(\".canvas\").css(\"border\", \"none\");\n    }\n  }, [remove]); // INIT TREE\n  // initialise le noeud de debut et le premier critere pour commencer\n\n  function initTree() {\n    createNode('input', {\n      x: 0,\n      y: 0\n    });\n    let firstNode = initialTree.criteres.find(el => el.ID_Critere === initialTree.entree[0].ID_Critere);\n    createNode('critereNode', {\n      x: 0,\n      y: 100\n    }, firstNode);\n    createEdge('D0', '0', firstNode.ID_Critere, null);\n    initNodes(initialTree.entree[0].ID_Critere);\n  } // initilialise critère, méthodes et décisiosn depuis le premier critère\n\n\n  function initNodes(start) {\n    initialTree.criteres.forEach(node => {\n      let color = colors[0];\n      colors.splice(0, 1);\n\n      if (node.ID_Critere !== start) {\n        createNode('critereNode', {\n          x: parseInt(node.x),\n          y: parseInt(node.y)\n        }, node);\n      } // on récupère les décisions attaché au critère et on regarde si un méthode est attaché\n\n\n      let decisions = getDecisions(node.ID_Critere);\n      decisions.forEach(decision => {\n        let method = getMethod(decision);\n\n        if (method) {\n          createNode('default', {\n            x: parseInt(method.x),\n            y: parseInt(method.y)\n          }, method);\n          createEdge(\"D\" + decision.ID_Decision, node.ID_Critere, \"M\" + method.ID_Methode, decision.Libelle, color);\n          createEdge(\"DM\" + decision.ID_Decision, \"M\" + method.ID_Methode, decision.ID_Critere_sortant, null, color);\n        } else {\n          if (decision.ID_Critere_sortant) {\n            createEdge(\"D\" + decision.ID_Decision, decision.ID_Critere_entrant, decision.ID_Critere_sortant, decision.Libelle, color);\n          }\n        }\n      });\n    });\n  } // retourne les décisions d'un noeud\n\n\n  function getDecisions(nodeId) {\n    let decisions = initialTree.decisions.filter(decision => decision.ID_Critere_entrant === nodeId);\n    return decisions;\n  } // retourne la méthode d'un décision si elle existe\n\n\n  function getMethod(decision) {\n    let method = initialTree.methodes.find(method => method.ID_Decision === decision.ID_Decision);\n    return method;\n  }\n\n  function initResources() {\n    let resources = [];\n    initialTree.methodesRessources.forEach(element => {\n      let resource = initialTree.ressources.filter(item => item.ID_Ressource === element.ID_Ressource);\n      let method = initialTree.methodes.find(item => item.ID_Methode === element.ID_Methode);\n      resources[method.ID_Methode] ? resources[method.ID_Methode].push(resource[0]) : resources[method.ID_Methode] = [resource[0]];\n    });\n    setResources(resources);\n  } // récupère l'arbre a l'initialisation du composant\n\n\n  useEffect(() => {\n    if (!initialTree) {\n      let protocol = window.location.protocol;\n      let host = window.location.hostname;\n      let url = protocol + '//' + host;\n      axios.get(url + '/reactTest/MATUI/API/Controllers/lireArbre.php').then(response => {\n        setInitialTree(response.data);\n      }).catch(error => console.log(error));\n    }\n  }, []); // quand l'arbre et chargé et si il possède une entree on lance la création de l'arbre visuel\n\n  useEffect(() => {\n    if (initialTree && initialTree.entree.length) {\n      initTree();\n      initResources();\n    }\n  }, [initialTree]); // RECONSTRUCTION DE L'ARBRE\n\n  /*\r\n  types :\r\n      - input (start node)\r\n      - output (end node)\r\n      - default (node)\r\n      - smoothstep (edge)\r\n  */\n\n  function printNodes() {\n    console.log(elements);\n    let flow = reactFlowInstance.toObject();\n    let finalTree = {\n      entree: [],\n      sortie: [],\n      criteres: [],\n      methodes: [],\n      decisions: []\n    };\n    flow.elements.forEach(element => {\n      let transformedElement;\n\n      switch (element.type) {\n        case 'critereNode':\n          transformedElement = transformToCritere(element);\n          finalTree.criteres.push(transformedElement);\n          break;\n\n        case 'default':\n          transformedElement = transformToMethod(element, flow);\n          finalTree.methodes.push(transformedElement);\n          break;\n\n        case 'smoothstep':\n          if (element.label) {\n            transformedElement = transformToDecision(element, flow);\n            finalTree.decisions.push(transformedElement);\n          }\n\n          break;\n\n        case 'input':\n          transformedElement = transformToEntree(element, flow);\n          finalTree.entree.push(transformedElement);\n          break;\n\n        case 'output':\n          transformedElement = transformToSortie(element);\n          finalTree.sortie.push(transformedElement);\n          break;\n      }\n    });\n    console.log(initialTree);\n    console.log(finalTree);\n    checkTree(finalTree);\n  }\n\n  function transformToCritere(element) {\n    let critere = {\n      ID_Critere: element.id,\n      Libelle: element.data.label,\n      Informations: element.data.informations ? element.data.informations : null,\n      x: element.position.x,\n      y: element.position.y\n    };\n    return critere;\n  }\n\n  function transformToMethod(element, flow) {\n    let decision = flow.elements.find(el => el.type === \"smoothstep\" && el.target === element.id);\n    let method = {\n      ID_Method: element.id.slice(1),\n      ID_Decision: decision ? decision.id.slice(1) : null,\n      Libelle: element.data.label,\n      Description: element.data.description,\n      Donnees_produites: element.data.productedData,\n      Effectif_preconise: element.data.workforce,\n      Exemple: element.data.exemple,\n      Type_analyse: element.data.analysis,\n      Type_methode: element.data.method,\n      x: element.position.x,\n      y: element.position.y\n    };\n    return method;\n  }\n\n  function transformToDecision(element, flow) {\n    let outDecision;\n\n    if (element.target.includes(\"M\")) {\n      outDecision = flow.elements.find(el => el.type === \"smoothstep\" && el.source === element.target);\n    }\n\n    let decision = {\n      ID_Decision: element.id.slice(1),\n      ID_Critere_entrant: element.source,\n      ID_Critere_sortant: outDecision ? outDecision.target : element.target,\n      Libelle: element.label\n    };\n    return decision;\n  }\n\n  function transformToEntree(element, flow) {\n    let outDecision = flow.elements.find(el => el.type === \"smoothstep\" && el.source === element.id);\n    let critere = {\n      ID_Entree: element.id,\n      ID_Critere: outDecision.target,\n      x: element.position.x,\n      y: element.position.y\n    };\n    return critere;\n  }\n\n  function transformToSortie(element) {\n    let endNode = {\n      ID_Sortie: element.id.slice(1),\n      message: element.data.message,\n      x: element.position.x,\n      y: element.position.y\n    };\n    return endNode;\n  }\n  /*\r\n  l'abre doit :\r\n      - posséder un noeud entree et sortie\r\n      - ne pas posséder d'élements flottant (non relié ou partiellement relié)\r\n      - ne pas posséder d'élements non labellisé excepté les noeud d'entree, sortie,\r\n          liens sortant des méthodes et le lien source du noeud d'entree\r\n  */\n\n\n  function checkTree(finalTree) {\n    if (finalTree.entree.length != 1) {\n      alert(\"pb entree\");\n    } else if (finalTree.sortie.length != 1) {\n      alert(\"pb sortie\");\n    }\n\n    checkFloatingNode(finalTree);\n  }\n\n  function checkFloatingNode(finalTree) {\n    finalTree.criteres.forEach(element => {\n      console.log(element);\n    });\n  } // MODAL MANAGEMENT\n  // edit critères\n\n\n  const [modalEditCritereOpen, setModalEditCritereOpen] = useState(false);\n  const [selectedCritere, setSelectedCritere] = useState(null);\n\n  function openModalEditCritere(element) {\n    let critere = elements.find(el => el.id === element.id);\n    setSelectedCritere(critere);\n    setModalEditCritereOpen(true);\n  }\n\n  function closeModalEditCritere() {\n    setModalEditCritereOpen(false);\n  }\n\n  function saveCritere(label, informations) {\n    // change les data dans l'instance react flow\n    selectedCritere.data.label = label;\n\n    if (informations) {\n      selectedCritere.data.informations = informations;\n    } // force le rendu du noeud\n    // l'instance ne se rerender pas si modification dans sous object donc on change position\n\n\n    selectedCritere.position = {\n      x: selectedCritere.position.x,\n      y: selectedCritere.position.y + 1\n    };\n    rerenderFlow();\n  } // edit edges\n\n\n  const [modalEditEdgeOpen, setModalEditEdgeOpen] = useState(false);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n\n  function openModalEditEdge(element) {\n    let edge = elements.find(el => el.id === element.id);\n    setSelectedEdge(edge);\n    setModalEditEdgeOpen(true);\n  }\n\n  function closeModalEditEdge() {\n    setModalEditEdgeOpen(false);\n  }\n\n  function saveEdge(label) {\n    selectedEdge.label = label;\n    rerenderFlow();\n  } // edit method\n\n\n  const [modalEditMethodOpen, setModalEditMethodOpen] = useState(false);\n  const [selectedMethod, setSelectedMethod] = useState(null);\n\n  function openModalEditMethod(element) {\n    let method = elements.find(el => el.id === element.id);\n    setSelectedMethod(method);\n    setModalEditMethodOpen(true);\n  }\n\n  function closeModalEditMethod() {\n    setModalEditMethodOpen(false);\n  }\n\n  function saveMethod(newData) {\n    // change les data dans l'instance react flow\n    selectedMethod.data.label = newData.label;\n    selectedMethod.data.description = newData.description;\n    selectedMethod.data.productedData = newData.productedData;\n    selectedMethod.data.workforce = newData.workforce;\n    selectedMethod.data.method = newData.method;\n    selectedMethod.data.analysis = newData.analysis;\n    selectedMethod.data.exemple = newData.exemple; // force le rendu du noeud\n    // l'instance ne se rerender pas si modification dans sous object donc on change position\n\n    selectedMethod.position = {\n      x: selectedMethod.position.x,\n      y: selectedMethod.position.y + 1\n    };\n    rerenderFlow();\n  } // edit noeud de fin\n\n\n  const [modalEditEndNodeOpen, setModalEditEndNodeOpen] = useState(false);\n  const [selectedEndNode, setSelectedEndNode] = useState(null);\n\n  function openModalEditEndNode(element) {\n    let endNode = elements.find(el => el.id === element.id);\n    setSelectedEndNode(endNode);\n    setModalEditEndNodeOpen(true);\n  }\n\n  function closeModalEditEndNode() {\n    setModalEditEndNodeOpen(false);\n  }\n\n  function saveEndNode(message) {\n    // change les data dans l'instance react flow\n    selectedEndNode.data.message = message; // force le rendu du noeud\n    // l'instance ne se rerender pas si modification dans sous object donc on change position\n\n    selectedEndNode.position = {\n      x: selectedEndNode.position.x,\n      y: selectedEndNode.position.y + 1\n    };\n    rerenderFlow();\n  } // FORCE RERENDER\n\n\n  function rerenderFlow() {\n    let cloneElements = [...elements];\n    setElements(cloneElements);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Tree\",\n    children: elements ? /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reactflow-wrapper\",\n        ref: reactFlowWrapper,\n        children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n          className: \"tools\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"canvas\",\n          children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n            elements: elements,\n            nodeTypes: nodeTypes,\n            onElementsRemove: onElementsRemove,\n            onConnect: onConnect,\n            deleteKeyCode: 46,\n            onLoad: setReactFlowInstance,\n            onDrop: onDrop,\n            onDragOver: onDragOver,\n            onElementClick: onElementClick,\n            onPaneClick: onPaneClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => printNodes(),\n        children: \"print nodes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteMode(),\n        children: \"delete mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ModalEditCritere, {\n        title: \"Edit critere\",\n        open: modalEditCritereOpen,\n        close: closeModalEditCritere,\n        mainAction: saveCritere,\n        selectedCritere: selectedCritere\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ModalEditEdge, {\n        title: \"Edit Edge\",\n        open: modalEditEdgeOpen,\n        close: closeModalEditEdge,\n        mainAction: saveEdge,\n        selectedEdge: selectedEdge\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ModalEditMethod, {\n        title: \"Edit Method\",\n        open: modalEditMethodOpen,\n        close: closeModalEditMethod,\n        mainAction: saveMethod,\n        selectedMethod: selectedMethod,\n        resources: resources\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ModalEditEndNode, {\n        title: \"Edit End node\",\n        open: modalEditEndNodeOpen,\n        close: closeModalEditEndNode,\n        mainAction: saveEndNode,\n        selectedEndNode: selectedEndNode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 607,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tree, \"nXTYBjg29WXvATgr7vFcgVjTwuk=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/wamp64/www/Projet_TER/src/views/Tree.js"],"names":["React","useRef","useState","useEffect","$","get","axios","ReactFlow","addEdge","ReactFlowProvider","removeElements","Loader","Toolbar","CustomNode","DebugNode","ModalEditCritere","ModalEditEdge","ModalEditMethod","ModalEditEndNode","Tree","nodeTypes","critereNode","debugNode","colors","initialTree","setInitialTree","resources","setResources","nextId","setNextId","nextEdgeId","setNextEdgeId","nextMethodId","setNextMethodId","elements","setElements","remove","setRemove","reactFlowWrapper","reactFlowInstance","setReactFlowInstance","onElementsRemove","elementsToRemove","els","onConnect","params","id","getEdgeId","arrowHeadType","label","type","parseInt","slice","toString","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","getData","checkExist","alert","reactFlowBounds","current","getBoundingClientRect","toolbarWidth","width","position","project","x","clientX","y","clientY","top","createNode","onElementClick","element","openModalEditCritere","openModalEditMethod","openModalEditEdge","openModalEditEndNode","edges","filter","item","attachedEdges","source","target","console","log","length","deleteElement","onPaneClick","getId","getMethodId","data","newNode","ID_Critere","Libelle","informations","Informations","ID_Methode","description","Description","productedData","Donnees_produites","workforce","Effectif_preconise","method","Type_methode","analysis","Type_analyse","exemple","Exemple","es","concat","createEdge","id_source","id_target","color","newEdge","style","stroke","substring","i","deleteMode","selectedElement","find","el","index","indexOf","css","initTree","firstNode","criteres","entree","initNodes","start","forEach","node","splice","decisions","getDecisions","decision","getMethod","ID_Decision","ID_Critere_sortant","ID_Critere_entrant","nodeId","methodes","initResources","methodesRessources","resource","ressources","ID_Ressource","push","protocol","window","location","host","hostname","url","then","response","catch","error","printNodes","flow","toObject","finalTree","sortie","transformedElement","transformToCritere","transformToMethod","transformToDecision","transformToEntree","transformToSortie","checkTree","critere","ID_Method","outDecision","includes","ID_Entree","endNode","ID_Sortie","message","checkFloatingNode","modalEditCritereOpen","setModalEditCritereOpen","selectedCritere","setSelectedCritere","closeModalEditCritere","saveCritere","rerenderFlow","modalEditEdgeOpen","setModalEditEdgeOpen","selectedEdge","setSelectedEdge","edge","closeModalEditEdge","saveEdge","modalEditMethodOpen","setModalEditMethodOpen","selectedMethod","setSelectedMethod","closeModalEditMethod","saveMethod","newData","modalEditEndNodeOpen","setModalEditEndNodeOpen","selectedEndNode","setSelectedEndNode","closeModalEditEndNode","saveEndNode","cloneElements"],"mappings":"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","sourcesContent":["import React, {useRef, useState, useEffect} from 'react';\r\nimport $, { get } from 'jquery';\r\nimport axios from 'axios';\r\nimport ReactFlow, {addEdge, ReactFlowProvider, removeElements} from 'react-flow-renderer';\r\n\r\nimport Loader from '../components/Loader';\r\nimport Toolbar from '../components/Toolbar';\r\nimport CustomNode from '../components/tree/CustomNode';\r\nimport DebugNode from '../components/tree/DebugNode';\r\n\r\nimport ModalEditCritere from '../components/modal/tree/ModalEditCritere';\r\nimport ModalEditEdge from '../components/modal/tree/ModalEditEdge';\r\nimport ModalEditMethod from '../components/modal/tree/ModalEditMethod';\r\nimport ModalEditEndNode from '../components/modal/tree/ModalEditEndNode';\r\n\r\nfunction Tree() {\r\n    const nodeTypes = {\r\n        critereNode: CustomNode,\r\n        debugNode: DebugNode\r\n    };\r\n\r\n    const colors = ['black', 'marron', 'blue', 'red', 'purple', 'fushia', 'green', 'lime', 'yellow',\r\n'navy', 'aqua', 'aquamarine', 'chocolate', 'coral', 'crimson', 'darkcyan', 'darkgreen', 'darkorange', 'darkseagreen',\r\n'deeppink', 'gold', 'indgo', 'lightcoral'];\r\n\r\n    const [initialTree, setInitialTree] = useState(null);\r\n    const [resources, setResources] = useState(null);\r\n    const [nextId, setNextId] = useState(\"1\");\r\n    const [nextEdgeId, setNextEdgeId] = useState(\"D1\");\r\n    const [nextMethodId, setNextMethodId] = useState(\"M1\");\r\n    const [elements, setElements] = useState([]);\r\n    const [remove, setRemove] = useState(false);\r\n\r\n    const reactFlowWrapper = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    const onElementsRemove = (elementsToRemove) => setElements((els) => removeElements(elementsToRemove, els));\r\n    const onConnect = (params) => setElements((els) => addEdge({\r\n        ...params,\r\n        id: getEdgeId(), arrowHeadType: 'arrowclosed', label: 'edge label', type: 'smoothstep',\r\n    }, els, setNextEdgeId(\"D\" + (parseInt(nextEdgeId.slice(1)) + 1).toString())));\r\n\r\n    // HOOKS REACT-FLOW\r\n\r\n    const onDragOver = (event) => {\r\n        event.preventDefault();\r\n        event.dataTransfer.dropEffect = 'move';\r\n    };\r\n\r\n    const onDrop = (event) => {\r\n        event.preventDefault();\r\n\r\n        //check if input/output already exists\r\n        const type = event.dataTransfer.getData('application/reactflow');\r\n        if (type!= null && type == \"input\" || type == \"output\") {\r\n            if (checkExist(type)) {\r\n                return alert(\"Désolé, il ne peut y avoir qu'un seul noeud de type \" + type)\r\n            }\r\n        }\r\n\r\n        const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n        let toolbarWidth = $('aside').width();\r\n        const position = reactFlowInstance.project({\r\n            x: event.clientX - toolbarWidth,\r\n            y: event.clientY - reactFlowBounds.top,\r\n        });\r\n        createNode(type, position);\r\n    };\r\n\r\n    const onElementClick = (event, element) => {\r\n        if(!remove){\r\n            switch (element.type) {\r\n                case 'critereNode':\r\n                    openModalEditCritere(element);\r\n                    break;\r\n                case 'default':\r\n                    openModalEditMethod(element);\r\n                    break;\r\n                case 'smoothstep':\r\n                    openModalEditEdge(element);\r\n                    break;\r\n                case 'input':\r\n                    alert(\"Cannot modify start node\")\r\n                    break;\r\n                case 'output':\r\n                    openModalEditEndNode(element);\r\n                    break;\r\n            }\r\n        } else {\r\n            if(element.type != \"smoothstep\"){\r\n                let edges = elements.filter(item => item.type === \"smoothstep\");\r\n                let attachedEdges = edges.filter(item => item.source === element.id || item.target === element.id );\r\n                console.log(attachedEdges)\r\n                if(attachedEdges.length > 0){\r\n                    alert(\"You must remove all edges from this element\")\r\n                } else {\r\n                    deleteElement(element); \r\n                }\r\n            } else {\r\n                deleteElement(element); \r\n            }\r\n        }\r\n    }\r\n\r\n    const onPaneClick = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    // FUNCTIONS\r\n\r\n    // return les prochains ID utilisable\r\n    function getId() {\r\n        return nextId;\r\n    }\r\n\r\n    function getEdgeId() {\r\n        return nextEdgeId;\r\n    }\r\n\r\n    function getMethodId() {\r\n        return nextMethodId;\r\n    }\r\n\r\n    /*\r\n    crée un noeud de type :\r\n        - input\r\n        - output\r\n        - default (method)\r\n        - critereNode (critere)\r\n\r\n    parametres :\r\n        - type : type du noeud\r\n        - position : position du client si noeud créer via toolbar ou position x et y stocké en bd\r\n        - data : toutes les data du noeud de la BD, si noeud créer via toolbar le label et générer par défault\r\n    */\r\n    function createNode(type, position, data) {\r\n        let newNode;\r\n        switch (type) {\r\n            case 'input':\r\n                // noeud entree\r\n                console.log(\"INPUT\")\r\n                newNode = {\r\n                    id: \"0\",\r\n                    type,\r\n                    position,\r\n                    data: {label: `${type} node`},\r\n                };\r\n                break;\r\n            case 'output':\r\n                // noeud sortie\r\n                console.log(\"OUTPUT\")\r\n                newNode = {\r\n                    id: \"S0\",\r\n                    type,\r\n                    position,\r\n                    data: {label: `${type} node`},\r\n                };\r\n                break;\r\n            case 'critereNode':\r\n                // noeud critere\r\n                console.log(\"CRITERE\")\r\n                if(data){\r\n                    newNode = {\r\n                        id: data.ID_Critere,\r\n                        type,\r\n                        position,\r\n                        data: {\r\n                            label: data.Libelle,\r\n                            informations: (data.Informations ? data.Informations : null)\r\n                        },\r\n                    };\r\n                    if(data.ID_Critere > getId()){\r\n                        setNextId((parseInt(data.ID_Critere) + 1).toString());\r\n                    }      \r\n                } else {\r\n                    newNode = {\r\n                        id: getId(),\r\n                        type,\r\n                        position,\r\n                        data: {label: `${type} node`},\r\n                    };\r\n                    setNextId((parseInt(nextId) + 1).toString());\r\n                }\r\n                break;\r\n            case 'default':\r\n                // noeud methode\r\n                console.log(\"METHODE\")\r\n                if(data){\r\n                    newNode = {\r\n                        id: \"M\" + data.ID_Methode,\r\n                        type,\r\n                        position,\r\n                        data: {\r\n                            label: data.Libelle,\r\n                            description: data.Description,\r\n                            productedData: data.Donnees_produites,\r\n                            workforce: data.Effectif_preconise,\r\n                            method: data.Type_methode,\r\n                            analysis: data.Type_analyse,\r\n                            exemple: data.Exemple\r\n                        },\r\n                    };\r\n                    if(parseInt(data.ID_Methode) > getMethodId().slice(1)){\r\n                        setNextMethodId(\"M\" + (parseInt(data.ID_Methode) + 1).toString());\r\n                    }               \r\n                } else {\r\n                    newNode = {\r\n                        id: getMethodId(),\r\n                        type,\r\n                        position,\r\n                        data: {label: `${type} node`},\r\n                    };\r\n                    setNextMethodId(\"M\" + (parseInt(getMethodId().slice(1)) + 1).toString());\r\n                }\r\n                break;\r\n        }\r\n        // insertion du noeud dans les elements react flow render\r\n        setElements((es) => es.concat(newNode));\r\n    }\r\n    \r\n    // crée un lien entre 2 noeuds\r\n    function createEdge(id, id_source, id_target, label, color){\r\n        let newEdge = {\r\n            id: id,\r\n            source: id_source,\r\n            target: id_target,\r\n            type: 'smoothstep',\r\n            arrowHeadType: 'arrowclosed',\r\n            label: label,\r\n            style: { stroke: color },\r\n        }\r\n        setElements((es) => es.concat(newEdge));\r\n        if(id.substring(0, 2) != \"DM\"){\r\n            if(parseInt(id.slice(1)) > getEdgeId().slice(1)){\r\n                setNextEdgeId(\"D\" + (parseInt(id.slice(1)) + 1).toString());\r\n            }\r\n        }    \r\n    }\r\n\r\n    // check if a node type already exists\r\n    function checkExist(type) {\r\n        if(elements){\r\n            for (let i = 0; i < elements.length; i++) {\r\n                if (elements[i].type == type) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // gestion de la supression\r\n    function deleteMode(){\r\n        remove ? setRemove(false) : setRemove(true);\r\n    }\r\n\r\n    function deleteElement(element){\r\n            console.log(\"delete => \")\r\n            console.log(element);\r\n            let selectedElement = elements.find(el => el.id === element.id);\r\n            let index = elements.indexOf(selectedElement);\r\n            setElements(elements.filter(item => elements.indexOf(item) !== index))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(remove){\r\n            $(\".canvas\").css(\"border\", \"1px solid red\");\r\n        } else {\r\n            $(\".canvas\").css(\"border\", \"none\");\r\n        }\r\n    },[remove]);\r\n\r\n    // INIT TREE\r\n\r\n    // initialise le noeud de debut et le premier critere pour commencer\r\n    function initTree(){\r\n        createNode('input', {x: 0, y: 0});\r\n        let firstNode = initialTree.criteres.find(el => el.ID_Critere === initialTree.entree[0].ID_Critere);\r\n        createNode('critereNode', {x: 0, y: 100}, firstNode);\r\n        createEdge('D0' ,'0', firstNode.ID_Critere, null);\r\n        initNodes(initialTree.entree[0].ID_Critere);\r\n    }\r\n\r\n    // initilialise critère, méthodes et décisiosn depuis le premier critère\r\n    function initNodes(start){\r\n        initialTree.criteres.forEach(node => {\r\n            let color = colors[0]\r\n            colors.splice(0, 1);\r\n            if(node.ID_Critere !== start){\r\n                createNode('critereNode',  {x: parseInt(node.x), y: parseInt(node.y)}, node)\r\n            }\r\n            // on récupère les décisions attaché au critère et on regarde si un méthode est attaché\r\n            let decisions = getDecisions(node.ID_Critere);\r\n            decisions.forEach(decision => {\r\n                let method = getMethod(decision);\r\n                if(method){\r\n                    createNode('default',  {x: parseInt(method.x), y: parseInt(method.y)}, method);\r\n                    createEdge(\"D\" + decision.ID_Decision ,node.ID_Critere, \"M\" + method.ID_Methode, decision.Libelle, color);\r\n                    createEdge(\"DM\" + decision.ID_Decision, \"M\" + method.ID_Methode, decision.ID_Critere_sortant, null, color);\r\n                } else {\r\n                    if(decision.ID_Critere_sortant){\r\n                        createEdge(\"D\" + decision.ID_Decision, decision.ID_Critere_entrant, decision.ID_Critere_sortant, decision.Libelle, color);\r\n                    }\r\n                }\r\n            })                \r\n        });\r\n    }\r\n\r\n    // retourne les décisions d'un noeud\r\n    function getDecisions(nodeId){\r\n        let decisions =  initialTree.decisions.filter(decision => decision.ID_Critere_entrant === nodeId);\r\n        return decisions;\r\n    }\r\n\r\n    // retourne la méthode d'un décision si elle existe\r\n    function getMethod(decision){\r\n        let method =  initialTree.methodes.find(method => method.ID_Decision === decision.ID_Decision);\r\n        return method;\r\n    }\r\n\r\n    function initResources(){\r\n        let resources = [];\r\n        initialTree.methodesRessources.forEach(element => {\r\n            let resource = initialTree.ressources.filter(item => item.ID_Ressource === element.ID_Ressource);\r\n            let method = initialTree.methodes.find(item => item.ID_Methode === element.ID_Methode);\r\n            resources[method.ID_Methode] ? resources[method.ID_Methode].push(resource[0]): resources[method.ID_Methode] = [resource[0]]; \r\n        })\r\n        setResources(resources);\r\n    }\r\n\r\n    // récupère l'arbre a l'initialisation du composant\r\n    useEffect(() => {\r\n        if(!initialTree){\r\n            let protocol = window.location.protocol;\r\n            let host = window.location.hostname;\r\n            let url = protocol + '//' + host;\r\n                axios.get(url + '/reactTest/MATUI/API/Controllers/lireArbre.php')\r\n                .then(response => {\r\n                    setInitialTree(response.data)\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    },[]);\r\n\r\n    // quand l'arbre et chargé et si il possède une entree on lance la création de l'arbre visuel\r\n    useEffect(() => {\r\n        if(initialTree && initialTree.entree.length){\r\n            initTree();\r\n            initResources();\r\n        }\r\n    }, [initialTree]);\r\n\r\n    // RECONSTRUCTION DE L'ARBRE\r\n\r\n    /*\r\n    types :\r\n        - input (start node)\r\n        - output (end node)\r\n        - default (node)\r\n        - smoothstep (edge)\r\n    */\r\n    function printNodes() {\r\n        console.log(elements);\r\n        let flow = reactFlowInstance.toObject();\r\n        let finalTree = {\r\n            entree: [],\r\n            sortie: [],\r\n            criteres: [],\r\n            methodes: [],\r\n            decisions: []\r\n        };\r\n        flow.elements.forEach(element => {\r\n            let transformedElement;\r\n            switch (element.type) {\r\n                case 'critereNode':\r\n                    transformedElement = transformToCritere(element);\r\n                    finalTree.criteres.push(transformedElement)\r\n                    break;\r\n                case 'default':\r\n                    transformedElement = transformToMethod(element, flow);\r\n                    finalTree.methodes.push(transformedElement)\r\n                    break;\r\n                case 'smoothstep':\r\n                    if(element.label){\r\n                        transformedElement = transformToDecision(element, flow);\r\n                        finalTree.decisions.push(transformedElement)\r\n                    }\r\n                        break;\r\n                case 'input':\r\n                    transformedElement = transformToEntree(element,flow);\r\n                    finalTree.entree.push(transformedElement)\r\n                    break;\r\n                case 'output':\r\n                    transformedElement = transformToSortie(element);\r\n                    finalTree.sortie.push(transformedElement)\r\n                    break;\r\n            }\r\n        })\r\n        console.log(initialTree)\r\n        console.log(finalTree);\r\n        checkTree(finalTree);\r\n    }\r\n\r\n    \r\n    function transformToCritere(element){\r\n        let critere = {\r\n            ID_Critere: element.id,\r\n            Libelle: element.data.label,\r\n            Informations: (element.data.informations ? element.data.informations : null),\r\n            x: element.position.x,\r\n            y: element.position.y\r\n        }\r\n        return critere;\r\n    }\r\n\r\n    function transformToMethod(element, flow){\r\n        let decision = flow.elements.find(el => el.type === \"smoothstep\" && el.target === element.id);\r\n        let method = {\r\n            ID_Method: element.id.slice(1),\r\n            ID_Decision: (decision ? decision.id.slice(1) : null),\r\n            Libelle: element.data.label,\r\n            Description: element.data.description,\r\n            Donnees_produites: element.data.productedData,\r\n            Effectif_preconise: element.data.workforce,\r\n            Exemple: element.data.exemple,\r\n            Type_analyse: element.data.analysis,\r\n            Type_methode: element.data.method,\r\n            x: element.position.x,\r\n            y: element.position.y\r\n        }\r\n        return method;\r\n    }\r\n\r\n    function transformToDecision(element, flow){\r\n        let outDecision;\r\n        if(element.target.includes(\"M\")){\r\n            outDecision = flow.elements.find(el => el.type === \"smoothstep\" && el.source === element.target);\r\n        }\r\n\r\n        let decision = {\r\n            ID_Decision: element.id.slice(1),\r\n            ID_Critere_entrant: element.source,\r\n            ID_Critere_sortant: (outDecision ? outDecision.target : element.target),\r\n            Libelle: element.label,\r\n        }\r\n        return decision;\r\n    }\r\n\r\n    function transformToEntree(element, flow){\r\n        let outDecision = flow.elements.find(el => el.type === \"smoothstep\" && el.source === element.id);\r\n\r\n        let critere = {\r\n            ID_Entree: element.id,\r\n            ID_Critere: outDecision.target,\r\n            x: element.position.x,\r\n            y: element.position.y\r\n        }\r\n        return critere;\r\n    }\r\n\r\n    function transformToSortie(element){\r\n        let endNode = {\r\n            ID_Sortie: element.id.slice(1),\r\n            message: element.data.message,\r\n            x: element.position.x,\r\n            y: element.position.y\r\n        }\r\n        return endNode;\r\n    }\r\n\r\n    /*\r\n    l'abre doit :\r\n        - posséder un noeud entree et sortie\r\n        - ne pas posséder d'élements flottant (non relié ou partiellement relié)\r\n        - ne pas posséder d'élements non labellisé excepté les noeud d'entree, sortie,\r\n            liens sortant des méthodes et le lien source du noeud d'entree\r\n    */\r\n    function checkTree(finalTree){\r\n        if(finalTree.entree.length != 1){\r\n            alert(\"pb entree\")\r\n        } else if (finalTree.sortie.length != 1){\r\n            alert(\"pb sortie\")\r\n        } \r\n        checkFloatingNode(finalTree);\r\n    }\r\n\r\n    function checkFloatingNode(finalTree){\r\n        finalTree.criteres.forEach(element => {\r\n            console.log(element)\r\n        })\r\n    }\r\n\r\n    \r\n    // MODAL MANAGEMENT\r\n\r\n    // edit critères\r\n\r\n    const [modalEditCritereOpen, setModalEditCritereOpen] = useState(false);\r\n    const [selectedCritere, setSelectedCritere] = useState(null);\r\n\r\n    function openModalEditCritere(element) {\r\n        let critere = elements.find(el => el.id === element.id);\r\n        setSelectedCritere(critere);\r\n        setModalEditCritereOpen(true);\r\n    }\r\n\r\n    function closeModalEditCritere(){\r\n        setModalEditCritereOpen(false);\r\n    }\r\n\r\n    function saveCritere(label, informations){\r\n        // change les data dans l'instance react flow\r\n        selectedCritere.data.label = label;\r\n        if(informations){selectedCritere.data.informations = informations;}\r\n\r\n        // force le rendu du noeud\r\n        // l'instance ne se rerender pas si modification dans sous object donc on change position\r\n        selectedCritere.position = {x: selectedCritere.position.x, y: selectedCritere.position.y + 1}\r\n        rerenderFlow();\r\n    }\r\n\r\n    // edit edges\r\n    const [modalEditEdgeOpen, setModalEditEdgeOpen] = useState(false);\r\n    const [selectedEdge, setSelectedEdge] = useState(null);\r\n\r\n    function openModalEditEdge(element) {\r\n        let edge = elements.find(el => el.id === element.id);\r\n        setSelectedEdge(edge);\r\n        setModalEditEdgeOpen(true);\r\n    }\r\n\r\n    function closeModalEditEdge(){\r\n        setModalEditEdgeOpen(false);\r\n    }\r\n\r\n    function saveEdge(label){\r\n        selectedEdge.label = label;\r\n        rerenderFlow();\r\n    }\r\n\r\n    // edit method\r\n\r\n    const [modalEditMethodOpen, setModalEditMethodOpen] = useState(false);\r\n    const [selectedMethod, setSelectedMethod] = useState(null);\r\n\r\n    function openModalEditMethod(element) {\r\n        let method = elements.find(el => el.id === element.id);\r\n        setSelectedMethod(method);\r\n        setModalEditMethodOpen(true);\r\n    }\r\n\r\n    function closeModalEditMethod(){\r\n        setModalEditMethodOpen(false);\r\n    }\r\n\r\n    function saveMethod(newData){\r\n        // change les data dans l'instance react flow\r\n        selectedMethod.data.label = newData.label;\r\n        selectedMethod.data.description = newData.description;\r\n        selectedMethod.data.productedData = newData.productedData;\r\n        selectedMethod.data.workforce = newData.workforce;\r\n        selectedMethod.data.method = newData.method;\r\n        selectedMethod.data.analysis = newData.analysis;\r\n        selectedMethod.data.exemple = newData.exemple;\r\n\r\n        // force le rendu du noeud\r\n        // l'instance ne se rerender pas si modification dans sous object donc on change position\r\n        selectedMethod.position = {x: selectedMethod.position.x, y: selectedMethod.position.y + 1}\r\n        rerenderFlow();\r\n    }\r\n\r\n    // edit noeud de fin\r\n\r\n    const [modalEditEndNodeOpen, setModalEditEndNodeOpen] = useState(false);\r\n    const [selectedEndNode, setSelectedEndNode] = useState(null);\r\n\r\n    function openModalEditEndNode(element) {\r\n        let endNode = elements.find(el => el.id === element.id);\r\n        setSelectedEndNode(endNode);\r\n        setModalEditEndNodeOpen(true);\r\n    }\r\n\r\n    function closeModalEditEndNode(){\r\n        setModalEditEndNodeOpen(false);\r\n    }\r\n\r\n    function saveEndNode(message){\r\n        // change les data dans l'instance react flow\r\n        selectedEndNode.data.message = message;\r\n\r\n        // force le rendu du noeud\r\n        // l'instance ne se rerender pas si modification dans sous object donc on change position\r\n        selectedEndNode.position = {x: selectedEndNode.position.x, y: selectedEndNode.position.y + 1}\r\n        rerenderFlow();\r\n    }\r\n\r\n    // FORCE RERENDER\r\n\r\n    function rerenderFlow(){\r\n        let cloneElements = [...elements];\r\n        setElements(cloneElements);     \r\n    }\r\n\r\n    return (\r\n        <div className=\"Tree\">\r\n            {elements ?\r\n                <ReactFlowProvider>\r\n                    <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n                        <Toolbar className=\"tools\"/>\r\n                        <div className=\"canvas\">\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                nodeTypes={nodeTypes}\r\n                                onElementsRemove={onElementsRemove}\r\n                                onConnect={onConnect}\r\n                                deleteKeyCode={46}\r\n                                onLoad={setReactFlowInstance}\r\n                                onDrop={onDrop}\r\n                                onDragOver={onDragOver}\r\n                                onElementClick={onElementClick}\r\n                                onPaneClick={onPaneClick}/>\r\n                        </div>\r\n                    </div>\r\n                    <button onClick={() => printNodes()}>print nodes</button>\r\n                    <button onClick={() => deleteMode()}>delete mode</button>\r\n\r\n                    <ModalEditCritere\r\n                        title=\"Edit critere\"\r\n                        open={modalEditCritereOpen}  \r\n                        close={closeModalEditCritere}\r\n                        mainAction={saveCritere}\r\n                        selectedCritere={selectedCritere}\r\n                    />\r\n\r\n                    <ModalEditEdge\r\n                        title=\"Edit Edge\"\r\n                        open={modalEditEdgeOpen}  \r\n                        close={closeModalEditEdge}\r\n                        mainAction={saveEdge}\r\n                        selectedEdge={selectedEdge}\r\n                    />\r\n\r\n                    <ModalEditMethod\r\n                        title=\"Edit Method\"\r\n                        open={modalEditMethodOpen}  \r\n                        close={closeModalEditMethod}\r\n                        mainAction={saveMethod}\r\n                        selectedMethod={selectedMethod}\r\n                        resources={resources}\r\n                    />\r\n\r\n                    <ModalEditEndNode\r\n                        title=\"Edit End node\"\r\n                        open={modalEditEndNodeOpen}  \r\n                        close={closeModalEditEndNode}\r\n                        mainAction={saveEndNode}\r\n                        selectedEndNode={selectedEndNode}\r\n                    />\r\n                </ReactFlowProvider>\r\n            : <Loader/> \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tree;\r\n"]},"metadata":{},"sourceType":"module"}
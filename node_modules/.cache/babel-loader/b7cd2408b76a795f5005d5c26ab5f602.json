{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\Projet_TER\\\\src\\\\views\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport $, { get } from 'jquery';\nimport axios from 'axios';\nimport ReactFlow, { addEdge, ReactFlowProvider, removeElements } from 'react-flow-renderer';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport Loader from '../components/Loader';\nimport Toolbar from '../components/Toolbar';\nimport CustomNode from '../components/tree/CustomNode';\nimport DebugNode from '../components/tree/DebugNode';\nimport ModalEditCritere from '../components/modal/tree/ModalEditCritere';\nimport ModalEditEdge from '../components/modal/tree/ModalEditEdge';\nimport ModalEditMethod from '../components/modal/tree/ModalEditMethod';\nimport ModalEditEndNode from '../components/modal/tree/ModalEditEndNode';\nimport ModalWarning from '../components/modal/ModalWarning';\nimport ModalInformation from '../components/modal/ModalInformation';\nimport ModalConfirmation from '../components/modal/ModalConfirmation';\nimport { faHubspot } from '@fortawesome/free-brands-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tree() {\n  _s();\n\n  const nodeTypes = {\n    critereNode: CustomNode,\n    debugNode: DebugNode\n  };\n  const colors = ['black', 'marron', 'blue', 'red', 'purple', 'fushia', 'green', 'lime', 'yellow', 'navy', 'aqua', 'aquamarine', 'chocolate', 'coral', 'crimson', 'darkcyan', 'darkgreen', 'darkorange', 'darkseagreen', 'deeppink', 'gold', 'indgo', 'lightcoral'];\n  const [initialTree, setInitialTree] = useState(null); // const [resources, setResources] = useState(null);\n\n  const [nextId, setNextId] = useState(\"1\");\n  const [nextEdgeId, setNextEdgeId] = useState(\"D1\");\n  const [nextMethodId, setNextMethodId] = useState(\"M1\");\n  const [elements, setElements] = useState([]);\n  const [remove, setRemove] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  const onElementsRemove = elementsToRemove => setElements(els => removeElements(elementsToRemove, els));\n\n  const onConnect = params => setElements(els => addEdge({ ...params,\n    id: getEdgeId(),\n    arrowHeadType: 'arrowclosed',\n    label: '',\n    type: 'smoothstep'\n  }, els, setNextEdgeId(\"D\" + (parseInt(nextEdgeId.slice(1)) + 1).toString()))); // HOOKS REACT-FLOW\n\n\n  const onDragOver = event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  const onDrop = event => {\n    event.preventDefault(); //check if input/output already exists\n\n    const type = event.dataTransfer.getData('application/reactflow');\n\n    if (type != null && type == \"input\" || type == \"output\") {\n      if (checkExist(type)) {\n        return alert(\"Désolé, il ne peut y avoir qu'un seul noeud de type \" + type);\n      }\n    }\n\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    let toolbarWidth = $('aside').width();\n    console.log(reactFlowBounds.left);\n    const position = reactFlowInstance.project({\n      x: event.clientX - (reactFlowBounds.left + toolbarWidth),\n      y: event.clientY - reactFlowBounds.top\n    });\n    createNode(type, position);\n  };\n\n  const onElementClick = (event, element) => {\n    if (!remove) {\n      switch (element.type) {\n        case 'critereNode':\n          openModalEditCritere(element);\n          break;\n\n        case 'default':\n          openModalEditMethod(element);\n          break;\n\n        case 'smoothstep':\n          openModalEditEdge(element);\n          break;\n\n        case 'input':\n          alert(\"Cannot modify start node\");\n          break;\n\n        case 'output':\n          openModalEditEndNode(element);\n          break;\n      }\n    } else {\n      if (element.type != \"smoothstep\") {\n        let edges = elements.filter(item => item.type === \"smoothstep\");\n        let attachedEdges = edges.filter(item => item.source === element.id || item.target === element.id);\n\n        if (attachedEdges.length > 0) {\n          alert(\"You must remove all edges from this element\");\n        } else {\n          openModalConfirmation(element); // deleteElement(element); \n        }\n      } else {\n        openModalConfirmation(element); // deleteElement(element); \n      }\n    }\n  };\n\n  const onPaneClick = event => {\n    event.preventDefault();\n  }; // FUNCTIONS\n  // return les prochains ID utilisable\n\n\n  function getId() {\n    return nextId;\n  }\n\n  function getEdgeId() {\n    return nextEdgeId;\n  }\n\n  function getMethodId() {\n    return nextMethodId;\n  }\n  /*\r\n  crée un noeud de type :\r\n      - input\r\n      - output\r\n      - default (method)\r\n      - critereNode (critere)\r\n    parametres :\r\n      - type : type du noeud\r\n      - position : position du client si noeud créer via toolbar ou position x et y stocké en bd\r\n      - data : toutes les data du noeud de la BD, si noeud créer via toolbar le label et générer par défault\r\n  */\n\n\n  function createNode(type, position, data) {\n    let newNode;\n\n    switch (type) {\n      case 'input':\n        // noeud entree\n        newNode = {\n          id: \"0\",\n          type,\n          position,\n          data: {\n            label: `${type} node`\n          }\n        };\n        break;\n\n      case 'output':\n        // noeud sortie\n        newNode = {\n          id: \"S0\",\n          type,\n          position,\n          data: {\n            label: `${type} node`,\n            message: data ? data.Message : null\n          }\n        };\n        break;\n\n      case 'critereNode':\n        // noeud critere\n        if (data) {\n          newNode = {\n            id: data.ID_Critere,\n            type,\n            position,\n            data: {\n              label: data.Libelle,\n              informations: data.Informations ? data.Informations : null\n            }\n          };\n        } else {\n          newNode = {\n            id: getId(),\n            type,\n            position,\n            data: {\n              label: \"default critere label\"\n            }\n          };\n          setNextId((parseInt(nextId) + 1).toString());\n        }\n\n        break;\n\n      case 'default':\n        // noeud methode\n        if (data) {\n          newNode = {\n            id: \"M\" + data.ID_Methode,\n            type,\n            position,\n            data: {\n              label: data.Libelle,\n              description: data.Description,\n              productedData: data.Donnees_produites,\n              workforce: data.Effectif_preconise,\n              method: data.Type_methode,\n              analysis: data.Type_analyse,\n              exemple: data.Exemple\n            }\n          };\n        } else {\n          newNode = {\n            id: getMethodId(),\n            type,\n            position,\n            data: {\n              label: \"default method label\"\n            }\n          };\n          setNextMethodId(\"M\" + (parseInt(getMethodId().slice(1)) + 1).toString());\n        }\n\n        break;\n    } // insertion du noeud dans les elements react flow render\n\n\n    setElements(es => es.concat(newNode));\n  }\n\n  useEffect(() => {\n    if (nextId) {\n      console.log(nextId);\n    }\n  }, [nextId]); // crée un lien entre 2 noeuds\n\n  function createEdge(id, id_source, id_target, label, color) {\n    let newEdge = {\n      id: id,\n      source: id_source,\n      target: id_target,\n      type: 'smoothstep',\n      arrowHeadType: 'arrowclosed',\n      label: label,\n      style: {\n        stroke: color\n      }\n    };\n    setElements(es => es.concat(newEdge));\n  } // check if a node type already exists\n\n\n  function checkExist(type) {\n    if (elements) {\n      for (let i = 0; i < elements.length; i++) {\n        if (elements[i].type == type) {\n          return true;\n        }\n      }\n\n      return false;\n    } else {\n      return true;\n    }\n  } // gestion de la supression\n\n\n  function deleteMode() {\n    remove ? setRemove(false) : setRemove(true);\n  }\n\n  function deleteElement(element) {\n    let selectedElement = elements.find(el => el.id === element.id);\n    let index = elements.indexOf(selectedElement);\n    setElements(elements.filter(item => elements.indexOf(item) !== index));\n  }\n\n  useEffect(() => {\n    if (remove) {\n      $(\".canvas\").addClass(\"removeMode\");\n      $(\".removeModeMessage\").css(\"opacity\", \"1\");\n      $(\".Toolbar\").css({\n        \"pointer-events\": \"none\",\n        \"filter\": \"grayscale(1)\"\n      });\n    } else {\n      $(\".canvas\").removeClass(\"removeMode\");\n      $(\".removeModeMessage\").css(\"opacity\", \"0\");\n      $(\".Toolbar\").css({\n        \"pointer-events\": \"auto\",\n        \"filter\": \"none\"\n      });\n    }\n  }, [remove]); // INIT TREE\n  // initialise le noeud de debut et le premier critere pour commencer\n\n  function initTree() {\n    let startNode = initialTree.entree[0];\n    createNode('input', {\n      x: parseInt(startNode.x),\n      y: parseInt(startNode.y)\n    });\n    let firstNode = initialTree.criteres.find(el => el.ID_Critere === initialTree.entree[0].ID_Critere);\n    createNode('critereNode', {\n      x: parseInt(firstNode.x),\n      y: parseInt(firstNode.y)\n    }, firstNode);\n    createEdge('D0', '0', firstNode.ID_Critere, null);\n    let endNode = initialTree.sortie[0];\n    createNode('output', {\n      x: parseInt(endNode.x),\n      y: parseInt(endNode.y)\n    }, endNode);\n    initNodes(initialTree.entree[0].ID_Critere);\n  } // initilialise critère, méthodes et décisiosn depuis le premier critère\n\n\n  function initNodes(start) {\n    initialTree.criteres.forEach(node => {\n      let color = colors[0];\n      colors.splice(0, 1);\n\n      if (node.ID_Critere !== start) {\n        createNode('critereNode', {\n          x: parseInt(node.x),\n          y: parseInt(node.y)\n        }, node);\n      } // on récupère les décisions attaché au critère et on regarde si un méthode est attaché\n\n\n      let decisions = getDecisions(node.ID_Critere);\n      decisions.forEach(decision => {\n        let method = getMethod(decision);\n\n        if (method) {\n          createNode('default', {\n            x: parseInt(method.x),\n            y: parseInt(method.y)\n          }, method);\n          createEdge(\"D\" + decision.ID_Decision, node.ID_Critere, \"M\" + method.ID_Methode, decision.Libelle, color);\n          createEdge(\"DM\" + decision.ID_Decision, \"M\" + method.ID_Methode, decision.ID_Critere_sortant, null, color);\n        } else {\n          if (decision.ID_Critere_sortant) {\n            createEdge(\"D\" + decision.ID_Decision, decision.ID_Critere_entrant, decision.ID_Critere_sortant, decision.Libelle, color);\n          } else {\n            createEdge(\"D\" + decision.ID_Decision, decision.ID_Critere_entrant, \"S0\", decision.Libelle, color);\n          }\n        }\n      });\n    });\n  }\n\n  function initEdgesId() {\n    let highest = 0;\n    initialTree.decisions.forEach(decision => {\n      if (parseInt(decision.ID_Decision) >= highest) {\n        highest = decision.ID_Decision;\n      }\n    });\n    setNextEdgeId(\"D\" + (parseInt(highest) + 1).toString());\n  }\n\n  function initMethodId() {\n    let highest = 0;\n    initialTree.methodes.forEach(methode => {\n      if (parseInt(methode.ID_Methode) >= highest) {\n        highest = methode.ID_Methode;\n      }\n    });\n    setNextMethodId(\"M\" + (parseInt(highest) + 1).toString());\n  }\n\n  function initNodeId() {\n    let highest = 0;\n    initialTree.criteres.forEach(critere => {\n      if (parseInt(critere.ID_Critere) >= highest) {\n        highest = critere.ID_Critere;\n      }\n    });\n    setNextId((parseInt(highest) + 1).toString());\n  } // retourne les décisions d'un noeud\n\n\n  function getDecisions(nodeId) {\n    let decisions = initialTree.decisions.filter(decision => decision.ID_Critere_entrant === nodeId);\n    return decisions;\n  } // retourne la méthode d'un décision si elle existe\n\n\n  function getMethod(decision) {\n    let method = initialTree.methodes.find(method => method.ID_Decision === decision.ID_Decision);\n    return method;\n  } // récupère l'arbre a l'initialisation du composant\n\n\n  useEffect(() => {\n    if (!initialTree) {\n      let protocol = window.location.protocol;\n      let host = window.location.hostname;\n      let url = protocol + '//' + host;\n      axios.get(url + '/API/Controllers/lireArbre.php').then(response => {\n        setInitialTree(response.data);\n      }).catch(error => console.log(error));\n    }\n  }, []); // quand l'arbre et chargé et si il possède une entree on lance la création de l'arbre visuel\n\n  useEffect(() => {\n    if (initialTree) {\n      // si l'arbre possède un noeud d'entrée et de sortie on peut le construire\n      if (initialTree.entree.length && initialTree.sortie.length) {\n        initTree();\n        initEdgesId();\n        initMethodId();\n        initNodeId();\n      } else {\n        // si ce n'est pas le cas on vérifie si il existe, si il y'a des résidu on prévient qu'il y'a un problème\n        if (initialTree.methodes.length || initialTree.criteres.length || initialTree.decisions.length) {\n          alert('Something went wrong, tree cannot be built');\n        }\n      }\n    }\n  }, [initialTree]); // RECONSTRUCTION DE L'ARBRE\n\n  /*\r\n  types :\r\n      - input (start node)\r\n      - output (end node)\r\n      - default (node)\r\n      - smoothstep (edge)\r\n  */\n\n  function saveTree() {\n    let flow = reactFlowInstance.toObject();\n    let finalTree = {\n      criteres: [],\n      methodes: [],\n      methodesRessources: initialTree.methodesRessources,\n      decisions: [],\n      entree: [],\n      sortie: []\n    };\n    flow.elements.forEach(element => {\n      let transformedElement;\n\n      switch (element.type) {\n        case 'critereNode':\n          transformedElement = transformToCritere(element);\n          finalTree.criteres.push(transformedElement);\n          break;\n\n        case 'default':\n          transformedElement = transformToMethod(element, flow);\n          finalTree.methodes.push(transformedElement);\n          break;\n\n        case 'smoothstep':\n          if (element.label) {\n            transformedElement = transformToDecision(element, flow);\n            finalTree.decisions.push(transformedElement);\n          }\n\n          break;\n\n        case 'input':\n          transformedElement = transformToEntree(element, flow);\n          finalTree.entree.push(transformedElement);\n          break;\n\n        case 'output':\n          transformedElement = transformToSortie(element);\n          finalTree.sortie.push(transformedElement);\n          break;\n      }\n    }); // on regarde si il y'a des erreurs dans l'arbre (cas inaproprié)\n\n    let error = checkTree(finalTree);\n\n    if (!error) {\n      let protocol = window.location.protocol;\n      let host = window.location.hostname;\n      let url = protocol + '//' + host;\n      axios.post(url + '/API/Controllers/creerArbre.php', finalTree).then(response => {\n        setModalInformationOpen(true);\n      }).catch(error => console.log(error));\n    }\n  }\n  /*\r\n      Fonctions de transformation de l'arbre final\r\n  */\n\n\n  function transformToCritere(element) {\n    let critere = {\n      ID_Critere: element.id,\n      Libelle: element.data.label,\n      Informations: element.data.informations ? element.data.informations : null,\n      x: element.position.x,\n      y: element.position.y\n    };\n    return critere;\n  }\n\n  function transformToMethod(element, flow) {\n    let decision = flow.elements.find(el => el.type === \"smoothstep\" && el.target === element.id);\n    let method = {\n      ID_Methode: element.id.slice(1),\n      ID_Decision: decision ? decision.id.slice(1) : null,\n      Libelle: element.data.label,\n      Description: element.data.description,\n      Donnees_produites: element.data.productedData,\n      Effectif_preconise: element.data.workforce,\n      Exemple: element.data.exemple,\n      Type_analyse: element.data.analysis,\n      Type_methode: element.data.method,\n      x: element.position.x,\n      y: element.position.y\n    };\n    return method;\n  }\n\n  function transformToDecision(element, flow) {\n    let outDecision;\n\n    if (element.target.includes(\"M\")) {\n      outDecision = flow.elements.find(el => el.type === \"smoothstep\" && el.source === element.target);\n    }\n\n    let decision = {\n      ID_Decision: element.id.slice(1),\n      ID_Critere_entrant: element.source,\n      ID_Critere_sortant: outDecision ? outDecision.target : element.target,\n      Libelle: element.label\n    };\n    return decision;\n  }\n\n  function transformToEntree(element, flow) {\n    let outDecision = flow.elements.find(el => el.type === \"smoothstep\" && el.source === element.id);\n    let startNode = {\n      ID_Entree: element.id,\n      ID_Critere: outDecision ? outDecision.target : null,\n      x: element.position.x,\n      y: element.position.y\n    };\n    return startNode;\n  }\n\n  function transformToSortie(element) {\n    let endNode = {\n      ID_Sortie: element.id.slice(1),\n      message: element.data.message,\n      x: element.position.x,\n      y: element.position.y\n    };\n    return endNode;\n  }\n  /*\r\n  l'abre doit :\r\n      - posséder un noeud entree et sortie\r\n      - ne pas posséder d'élements flottant (non relié ou partiellement relié)\r\n      - ne pas posséder d'élements non labellisé excepté les noeud d'entree, sortie,\r\n          liens sortant des méthodes et le lien source du noeud d'entree\r\n  */\n\n\n  function checkTree(finalTree) {\n    let error = false; // vérifie si il y'a bien un noeud d'entrée et de sortie\n\n    if (finalTree.entree.length != 1) {\n      setErrorMessage(\"Tree must have start node\");\n      error = true;\n    } else if (finalTree.sortie.length != 1) {\n      setErrorMessage(\"Tree must have end node\");\n      error = true;\n    } else if (!finalTree.criteres.length) {\n      setErrorMessage(\"Tree must have node\");\n      error = true;\n    } // si c'est le cas on vérifie si il n'y a pas de noeud flottant\n\n\n    if (!error) {\n      let floatingNode = checkFloatingNode(finalTree);\n      let floatingMethod = checkFloatingMethod(finalTree);\n\n      if (floatingNode || floatingMethod) {\n        error = true;\n      }\n    }\n\n    return error;\n  } // vérifie si il y'a un noeud flottant\n\n\n  function checkFloatingNode(finalTree) {\n    let condition = true; // pour chaque critère on regarde les décisions entrante et sortante\n\n    finalTree.criteres.forEach(critere => {\n      let outputEdge = null;\n      let inputEdge = null;\n      outputEdge = finalTree.decisions.filter(decision => decision.ID_Critere_entrant === critere.ID_Critere);\n      inputEdge = finalTree.decisions.filter(decision => decision.ID_Critere_sortant === critere.ID_Critere); // on gère le cas ou c'est la décision suivant le noeud d'entrée\n\n      if (!inputEdge.length) {\n        if (finalTree.entree[0].ID_Critere === critere.ID_Critere) {\n          inputEdge.push(finalTree.entree[0]);\n        }\n      } // si il n'ya pas de noeud sortant ou entrant la condition n'est pas respecté\n\n\n      if (!inputEdge.length || !outputEdge.length) {\n        condition = false;\n      } // si le noeud sortant contient un \"M\" ca veut dire qu'il manque un lien après la méthode\n      // la condition n'est pas respecté\n\n\n      outputEdge.forEach(element => {\n        if (element.ID_Critere_sortant.charAt(0) === \"M\") {\n          condition = false;\n        }\n      });\n    }); // si la condition n'est pas respecté on set un message d'erreur\n\n    if (!condition) {\n      setErrorMessage(\"There is a floating node somewhere, check that each edge has a label (except output edge from the start node and methods) and that each critere is connected\");\n      return true;\n    } else {\n      return false;\n    }\n  } // vérifie si il y'a une méthode flottante\n\n\n  function checkFloatingMethod(finalTree) {\n    let condition = true;\n    finalTree.methodes.forEach(element => {\n      if (!element.ID_Decision) {\n        condition = false;\n      } else {\n        let decision = finalTree.decisions.find(item => item.ID_Decision === element.ID_Decision);\n\n        if (!decision) {\n          condition = false;\n        } else {\n          // vérifie qu'un méthode n'est pas conencté au noeud de fin\n          if (decision.ID_Critere_sortant == \"S0\") {\n            condition = false;\n          }\n        }\n      }\n    });\n\n    switch (condition) {\n      case true:\n        return false;\n\n      case false:\n        if (!errorMessage) {\n          setErrorMessage(\"There is a floating method somewhere, check that each edge has a label and that each method is connected\");\n        }\n\n        return true;\n    }\n  } // MODAL MANAGEMENT\n  // warning modal\n\n\n  const [modalWarningOpen, setModalWarningOpen] = useState(false);\n\n  function closeModalWarning() {\n    setErrorMessage(null);\n    setModalWarningOpen(false);\n  }\n\n  useEffect(() => {\n    if (errorMessage) {\n      setModalWarningOpen(true);\n    }\n  }, [errorMessage]); // information modal\n\n  const [modalInformationOpen, setModalInformationOpen] = useState(false);\n\n  function closeModalInformation() {\n    setModalInformationOpen(false);\n  } // connfirmation modal\n\n\n  const [modalConfirmationOpen, setModalConfirmationOpen] = useState(false);\n  const [messageConfirmation, setMessageConfirmation] = useState(null);\n  const [selectedConfirmationElement, setSelectedConfirmationElement] = useState(null);\n\n  function openModalConfirmation(element) {\n    setModalConfirmationOpen(true);\n    setMessageConfirmation(\"Do you want to delete this element ?\");\n    setSelectedConfirmationElement(element);\n  }\n\n  function closeConfirmationModal() {\n    setModalConfirmationOpen(false);\n  } // edit critères\n\n\n  const [modalEditCritereOpen, setModalEditCritereOpen] = useState(false);\n  const [selectedCritere, setSelectedCritere] = useState(null);\n\n  function openModalEditCritere(element) {\n    let critere = elements.find(el => el.id === element.id);\n    setSelectedCritere(critere);\n    setModalEditCritereOpen(true);\n  }\n\n  function closeModalEditCritere() {\n    setModalEditCritereOpen(false);\n  }\n\n  function saveCritere(label, informations) {\n    // change les data dans l'instance react flow\n    selectedCritere.data.label = label;\n\n    if (informations) {\n      selectedCritere.data.informations = informations;\n    } // force le rendu du noeud\n    // l'instance ne se rerender pas si modification dans sous object donc on change position\n\n\n    selectedCritere.position = {\n      x: selectedCritere.position.x,\n      y: selectedCritere.position.y + 1\n    };\n    rerenderFlow();\n  } // edit edges\n\n\n  const [modalEditEdgeOpen, setModalEditEdgeOpen] = useState(false);\n  const [selectedEdge, setSelectedEdge] = useState(null);\n\n  function openModalEditEdge(element) {\n    let edge = elements.find(el => el.id === element.id);\n    setSelectedEdge(edge);\n    setModalEditEdgeOpen(true);\n  }\n\n  function closeModalEditEdge() {\n    setModalEditEdgeOpen(false);\n  }\n\n  function saveEdge(label) {\n    selectedEdge.label = label;\n    rerenderFlow();\n  } // edit method\n\n\n  const [modalEditMethodOpen, setModalEditMethodOpen] = useState(false);\n  const [selectedMethod, setSelectedMethod] = useState(null);\n\n  function openModalEditMethod(element) {\n    let method = elements.find(el => el.id === element.id);\n    setSelectedMethod(method);\n    setModalEditMethodOpen(true);\n  }\n\n  function closeModalEditMethod() {\n    setModalEditMethodOpen(false);\n  }\n\n  function saveMethod(newData, newResources) {\n    // change les data dans l'instance react flow\n    selectedMethod.data.label = newData.label;\n    selectedMethod.data.description = newData.description;\n    selectedMethod.data.productedData = newData.productedData;\n    selectedMethod.data.workforce = newData.workforce;\n    selectedMethod.data.method = newData.method;\n    selectedMethod.data.analysis = newData.analysis;\n    selectedMethod.data.exemple = newData.exemple; // liste des ressources actuellement associé à la méthode\n\n    let thisMethodResources = initialTree.methodesRessources.filter(item => item.ID_Methode === selectedMethod.id.slice(1)); // associe les ressources qui ne l'etait aps deja a la méthode        \n\n    newResources.forEach(newResource => {\n      let resource = thisMethodResources.filter(item => item.ID_Ressource === newResource.ID_Ressource);\n\n      if (!resource.length) {\n        let newMethodResource = {\n          ID_Methode: selectedMethod.id.slice(1),\n          ID_Ressource: newResource.ID_Ressource\n        };\n        initialTree.methodesRessources.push(newMethodResource);\n      }\n    }); // supprime les ressources qui ne sont plus associé\n\n    initialTree.methodesRessources.forEach(oldResource => {\n      let resource = newResources.filter(item => item.ID_Ressource === oldResource.ID_Ressource);\n\n      if (!resource.length) {\n        let index = initialTree.methodesRessources.indexOf(oldResource);\n        initialTree.methodesRessources = initialTree.methodesRessources.filter(item => initialTree.methodesRessources.indexOf(item) !== index);\n      }\n    }); // force le rendu du noeud\n    // l'instance ne se rerender pas si modification dans sous object donc on change position\n\n    selectedMethod.position = {\n      x: selectedMethod.position.x,\n      y: selectedMethod.position.y + 1\n    };\n    rerenderFlow();\n  } // edit noeud de fin\n\n\n  const [modalEditEndNodeOpen, setModalEditEndNodeOpen] = useState(false);\n  const [selectedEndNode, setSelectedEndNode] = useState(null);\n\n  function openModalEditEndNode(element) {\n    let endNode = elements.find(el => el.id === element.id);\n    setSelectedEndNode(endNode);\n    setModalEditEndNodeOpen(true);\n  }\n\n  function closeModalEditEndNode() {\n    setModalEditEndNodeOpen(false);\n  }\n\n  function saveEndNode(message) {\n    // change les data dans l'instance react flow\n    selectedEndNode.data.message = message; // force le rendu du noeud\n    // l'instance ne se rerender pas si modification dans sous object donc on change position\n\n    selectedEndNode.position = {\n      x: selectedEndNode.position.x,\n      y: selectedEndNode.position.y + 1\n    };\n    rerenderFlow();\n  } // FORCE RERENDER\n\n\n  function rerenderFlow() {\n    let cloneElements = [...elements];\n    setElements(cloneElements);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Tree\",\n    children: elements ? /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reactflow-wrapper\",\n        ref: reactFlowWrapper,\n        children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n          className: \"tools\",\n          save: saveTree\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"canvas\",\n          children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n            elements: elements,\n            nodeTypes: nodeTypes,\n            onElementsRemove: onElementsRemove,\n            onConnect: onConnect // deleteKeyCode={46}\n            ,\n            onLoad: setReactFlowInstance,\n            onDrop: onDrop,\n            onDragOver: onDragOver,\n            onElementClick: onElementClick,\n            onPaneClick: onPaneClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 812,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 811,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          onClick: () => deleteMode(),\n          className: \"icon delete\",\n          icon: faTrashAlt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"removeModeMessage\",\n          children: \"Warning, you activated the suppression mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => console.log(nextEdgeId),\n        children: \"debug\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 827,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ModalEditCritere, {\n        title: \"Edit critere\",\n        open: modalEditCritereOpen,\n        close: closeModalEditCritere,\n        mainAction: saveCritere,\n        selectedCritere: selectedCritere\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 829,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ModalEditEdge, {\n        title: \"Edit Edge\",\n        open: modalEditEdgeOpen,\n        close: closeModalEditEdge,\n        mainAction: saveEdge,\n        selectedEdge: selectedEdge\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 837,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ModalEditMethod, {\n        title: \"Edit Method\",\n        open: modalEditMethodOpen,\n        close: closeModalEditMethod,\n        mainAction: saveMethod,\n        selectedMethod: selectedMethod,\n        initialTree: initialTree\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 845,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ModalEditEndNode, {\n        title: \"Edit End node\",\n        open: modalEditEndNodeOpen,\n        close: closeModalEditEndNode,\n        mainAction: saveEndNode,\n        selectedEndNode: selectedEndNode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 854,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ModalWarning, {\n        message: errorMessage,\n        open: modalWarningOpen,\n        close: closeModalWarning\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 862,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ModalInformation, {\n        open: modalInformationOpen,\n        close: closeModalInformation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 868,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ModalConfirmation, {\n        title: \"Warning\",\n        message: messageConfirmation,\n        open: modalConfirmationOpen,\n        close: closeConfirmationModal,\n        mainAction: deleteElement,\n        mainActionParameters: selectedConfirmationElement,\n        mainActionName: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 873,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 883,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 804,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tree, \"7SNaWlSE+uWGsOcALzfk8LJVaeo=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/wamp64/www/Projet_TER/src/views/Tree.js"],"names":["React","useRef","useState","useEffect","$","get","axios","ReactFlow","addEdge","ReactFlowProvider","removeElements","FontAwesomeIcon","faTrashAlt","Loader","Toolbar","CustomNode","DebugNode","ModalEditCritere","ModalEditEdge","ModalEditMethod","ModalEditEndNode","ModalWarning","ModalInformation","ModalConfirmation","faHubspot","Tree","nodeTypes","critereNode","debugNode","colors","initialTree","setInitialTree","nextId","setNextId","nextEdgeId","setNextEdgeId","nextMethodId","setNextMethodId","elements","setElements","remove","setRemove","errorMessage","setErrorMessage","reactFlowWrapper","reactFlowInstance","setReactFlowInstance","onElementsRemove","elementsToRemove","els","onConnect","params","id","getEdgeId","arrowHeadType","label","type","parseInt","slice","toString","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","getData","checkExist","alert","reactFlowBounds","current","getBoundingClientRect","toolbarWidth","width","console","log","left","position","project","x","clientX","y","clientY","top","createNode","onElementClick","element","openModalEditCritere","openModalEditMethod","openModalEditEdge","openModalEditEndNode","edges","filter","item","attachedEdges","source","target","length","openModalConfirmation","onPaneClick","getId","getMethodId","data","newNode","message","Message","ID_Critere","Libelle","informations","Informations","ID_Methode","description","Description","productedData","Donnees_produites","workforce","Effectif_preconise","method","Type_methode","analysis","Type_analyse","exemple","Exemple","es","concat","createEdge","id_source","id_target","color","newEdge","style","stroke","i","deleteMode","deleteElement","selectedElement","find","el","index","indexOf","addClass","css","removeClass","initTree","startNode","entree","firstNode","criteres","endNode","sortie","initNodes","start","forEach","node","splice","decisions","getDecisions","decision","getMethod","ID_Decision","ID_Critere_sortant","ID_Critere_entrant","initEdgesId","highest","initMethodId","methodes","methode","initNodeId","critere","nodeId","protocol","window","location","host","hostname","url","then","response","catch","error","saveTree","flow","toObject","finalTree","methodesRessources","transformedElement","transformToCritere","push","transformToMethod","transformToDecision","transformToEntree","transformToSortie","checkTree","post","setModalInformationOpen","outDecision","includes","ID_Entree","ID_Sortie","floatingNode","checkFloatingNode","floatingMethod","checkFloatingMethod","condition","outputEdge","inputEdge","charAt","modalWarningOpen","setModalWarningOpen","closeModalWarning","modalInformationOpen","closeModalInformation","modalConfirmationOpen","setModalConfirmationOpen","messageConfirmation","setMessageConfirmation","selectedConfirmationElement","setSelectedConfirmationElement","closeConfirmationModal","modalEditCritereOpen","setModalEditCritereOpen","selectedCritere","setSelectedCritere","closeModalEditCritere","saveCritere","rerenderFlow","modalEditEdgeOpen","setModalEditEdgeOpen","selectedEdge","setSelectedEdge","edge","closeModalEditEdge","saveEdge","modalEditMethodOpen","setModalEditMethodOpen","selectedMethod","setSelectedMethod","closeModalEditMethod","saveMethod","newData","newResources","thisMethodResources","newResource","resource","ID_Ressource","newMethodResource","oldResource","modalEditEndNodeOpen","setModalEditEndNodeOpen","selectedEndNode","setSelectedEndNode","closeModalEditEndNode","saveEndNode","cloneElements"],"mappings":"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","sourcesContent":["import React, {useRef, useState, useEffect} from 'react';\r\nimport $, { get } from 'jquery';\r\nimport axios from 'axios';\r\nimport ReactFlow, {addEdge, ReactFlowProvider, removeElements} from 'react-flow-renderer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport Loader from '../components/Loader';\r\nimport Toolbar from '../components/Toolbar';\r\nimport CustomNode from '../components/tree/CustomNode';\r\nimport DebugNode from '../components/tree/DebugNode';\r\n\r\nimport ModalEditCritere from '../components/modal/tree/ModalEditCritere';\r\nimport ModalEditEdge from '../components/modal/tree/ModalEditEdge';\r\nimport ModalEditMethod from '../components/modal/tree/ModalEditMethod';\r\nimport ModalEditEndNode from '../components/modal/tree/ModalEditEndNode';\r\nimport ModalWarning from '../components/modal/ModalWarning';\r\nimport ModalInformation from '../components/modal/ModalInformation';\r\nimport ModalConfirmation from '../components/modal/ModalConfirmation';\r\nimport { faHubspot } from '@fortawesome/free-brands-svg-icons';\r\n\r\nfunction Tree() {\r\n    const nodeTypes = {\r\n        critereNode: CustomNode,\r\n        debugNode: DebugNode\r\n    };\r\n\r\n    const colors = ['black', 'marron', 'blue', 'red', 'purple', 'fushia', 'green', 'lime', 'yellow',\r\n'navy', 'aqua', 'aquamarine', 'chocolate', 'coral', 'crimson', 'darkcyan', 'darkgreen', 'darkorange', 'darkseagreen',\r\n'deeppink', 'gold', 'indgo', 'lightcoral'];\r\n\r\n    const [initialTree, setInitialTree] = useState(null);\r\n    // const [resources, setResources] = useState(null);\r\n    const [nextId, setNextId] = useState(\"1\");\r\n    const [nextEdgeId, setNextEdgeId] = useState(\"D1\");\r\n    const [nextMethodId, setNextMethodId] = useState(\"M1\");\r\n    const [elements, setElements] = useState([]);\r\n    const [remove, setRemove] = useState(false);\r\n\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    const reactFlowWrapper = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    const onElementsRemove = (elementsToRemove) => setElements((els) => removeElements(elementsToRemove, els));\r\n    const onConnect = (params) => setElements((els) => addEdge({\r\n        ...params,\r\n        id: getEdgeId(), arrowHeadType: 'arrowclosed', label: '', type: 'smoothstep',\r\n    }, els, setNextEdgeId(\"D\" + (parseInt(nextEdgeId.slice(1)) + 1).toString())));\r\n\r\n    // HOOKS REACT-FLOW\r\n\r\n    const onDragOver = (event) => {\r\n        event.preventDefault();\r\n        event.dataTransfer.dropEffect = 'move';\r\n    };\r\n\r\n    const onDrop = (event) => {\r\n        event.preventDefault();\r\n\r\n        //check if input/output already exists\r\n        const type = event.dataTransfer.getData('application/reactflow');\r\n        if (type!= null && type == \"input\" || type == \"output\") {\r\n            if (checkExist(type)) {\r\n                return alert(\"Désolé, il ne peut y avoir qu'un seul noeud de type \" + type)\r\n            }\r\n        }\r\n\r\n        const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n        let toolbarWidth = $('aside').width();\r\n        console.log(reactFlowBounds.left)\r\n        const position = reactFlowInstance.project({\r\n            x: event.clientX - (reactFlowBounds.left + toolbarWidth),\r\n            y: event.clientY - reactFlowBounds.top,\r\n        });\r\n        createNode(type, position);\r\n    };\r\n\r\n    const onElementClick = (event, element) => {\r\n        if(!remove){\r\n            switch (element.type) {\r\n                case 'critereNode':\r\n                    openModalEditCritere(element);\r\n                    break;\r\n                case 'default':\r\n                    openModalEditMethod(element);\r\n                    break;\r\n                case 'smoothstep':\r\n                    openModalEditEdge(element);\r\n                    break;\r\n                case 'input':\r\n                    alert(\"Cannot modify start node\")\r\n                    break;\r\n                case 'output':\r\n                    openModalEditEndNode(element);\r\n                    break;\r\n            }\r\n        } else {\r\n            if(element.type != \"smoothstep\"){\r\n                let edges = elements.filter(item => item.type === \"smoothstep\");\r\n                let attachedEdges = edges.filter(item => item.source === element.id || item.target === element.id );\r\n                if(attachedEdges.length > 0){\r\n                    alert(\"You must remove all edges from this element\")\r\n                } else {\r\n                    openModalConfirmation(element)\r\n                    // deleteElement(element); \r\n                }\r\n            } else {\r\n                openModalConfirmation(element)\r\n                // deleteElement(element); \r\n            }\r\n        }\r\n    }\r\n\r\n    const onPaneClick = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    // FUNCTIONS\r\n\r\n    // return les prochains ID utilisable\r\n    function getId() {\r\n        return nextId;\r\n    }\r\n\r\n    function getEdgeId() {\r\n        return nextEdgeId;\r\n    }\r\n\r\n    function getMethodId() {\r\n        return nextMethodId;\r\n    }\r\n\r\n    /*\r\n    crée un noeud de type :\r\n        - input\r\n        - output\r\n        - default (method)\r\n        - critereNode (critere)\r\n\r\n    parametres :\r\n        - type : type du noeud\r\n        - position : position du client si noeud créer via toolbar ou position x et y stocké en bd\r\n        - data : toutes les data du noeud de la BD, si noeud créer via toolbar le label et générer par défault\r\n    */\r\n    function createNode(type, position, data) {\r\n        let newNode;\r\n        switch (type) {\r\n            case 'input':\r\n                // noeud entree\r\n                newNode = {\r\n                    id: \"0\",\r\n                    type,\r\n                    position,\r\n                    data: {label: `${type} node`},\r\n                };\r\n                break;\r\n            case 'output':\r\n                // noeud sortie\r\n                newNode = {\r\n                    id: \"S0\",\r\n                    type,\r\n                    position,\r\n                    data: {\r\n                        label: `${type} node`,\r\n                        message: (data ? data.Message : null)\r\n                    },\r\n                };\r\n                break;\r\n            case 'critereNode':\r\n                // noeud critere\r\n                if(data){\r\n                    newNode = {\r\n                        id: data.ID_Critere,\r\n                        type,\r\n                        position,\r\n                        data: {\r\n                            label: data.Libelle,\r\n                            informations: (data.Informations ? data.Informations : null)\r\n                        },\r\n                    };\r\n                } else {\r\n                    newNode = {\r\n                        id: getId(),\r\n                        type,\r\n                        position,\r\n                        data: {label: \"default critere label\"},\r\n                    };\r\n                    setNextId((parseInt(nextId) + 1).toString());\r\n                }\r\n                break;\r\n            case 'default':\r\n                // noeud methode\r\n                if(data){\r\n                    newNode = {\r\n                        id: \"M\" + data.ID_Methode,\r\n                        type,\r\n                        position,\r\n                        data: {\r\n                            label: data.Libelle,\r\n                            description: data.Description,\r\n                            productedData: data.Donnees_produites,\r\n                            workforce: data.Effectif_preconise,\r\n                            method: data.Type_methode,\r\n                            analysis: data.Type_analyse,\r\n                            exemple: data.Exemple\r\n                        },\r\n                    };   \r\n                } else {\r\n                    newNode = {\r\n                        id: getMethodId(),\r\n                        type,\r\n                        position,\r\n                        data: {label: \"default method label\"},\r\n                    };\r\n                    setNextMethodId(\"M\" + (parseInt(getMethodId().slice(1)) + 1).toString());\r\n                }\r\n                break;\r\n        }\r\n        // insertion du noeud dans les elements react flow render\r\n        setElements((es) => es.concat(newNode));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(nextId){\r\n            console.log(nextId);\r\n        }\r\n    }, [nextId]);\r\n    \r\n    // crée un lien entre 2 noeuds\r\n    function createEdge(id, id_source, id_target, label, color){\r\n        let newEdge = {\r\n            id: id,\r\n            source: id_source,\r\n            target: id_target,\r\n            type: 'smoothstep',\r\n            arrowHeadType: 'arrowclosed',\r\n            label: label,\r\n            style: { stroke: color },\r\n        }\r\n        setElements((es) => es.concat(newEdge));\r\n    }\r\n\r\n    // check if a node type already exists\r\n    function checkExist(type) {\r\n        if(elements){\r\n            for (let i = 0; i < elements.length; i++) {\r\n                if (elements[i].type == type) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // gestion de la supression\r\n    function deleteMode(){\r\n        remove ? setRemove(false) : setRemove(true);\r\n    }\r\n\r\n    function deleteElement(element){\r\n            let selectedElement = elements.find(el => el.id === element.id);\r\n            let index = elements.indexOf(selectedElement);\r\n            setElements(elements.filter(item => elements.indexOf(item) !== index))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(remove){\r\n            $(\".canvas\").addClass( \"removeMode\" );\r\n            $(\".removeModeMessage\").css(\"opacity\", \"1\");\r\n            $(\".Toolbar\").css({\"pointer-events\": \"none\", \"filter\" : \"grayscale(1)\"});\r\n        } else {\r\n            $(\".canvas\").removeClass( \"removeMode\" );\r\n            $(\".removeModeMessage\").css(\"opacity\", \"0\");\r\n            $(\".Toolbar\").css({\"pointer-events\": \"auto\", \"filter\" : \"none\"});\r\n        }\r\n    },[remove]);\r\n\r\n    // INIT TREE\r\n\r\n    // initialise le noeud de debut et le premier critere pour commencer\r\n    function initTree(){\r\n        let startNode = initialTree.entree[0];\r\n        createNode('input', {x: parseInt(startNode.x), y: parseInt(startNode.y)});\r\n        let firstNode = initialTree.criteres.find(el => el.ID_Critere === initialTree.entree[0].ID_Critere);\r\n        createNode('critereNode', {x: parseInt(firstNode.x), y: parseInt(firstNode.y)}, firstNode);\r\n        createEdge('D0' ,'0', firstNode.ID_Critere, null);\r\n\r\n        let endNode = initialTree.sortie[0];\r\n        createNode('output',  {x: parseInt(endNode.x), y: parseInt(endNode.y)}, endNode);\r\n\r\n        initNodes(initialTree.entree[0].ID_Critere);\r\n    }\r\n\r\n    // initilialise critère, méthodes et décisiosn depuis le premier critère\r\n    function initNodes(start){\r\n        initialTree.criteres.forEach(node => {\r\n            let color = colors[0]\r\n            colors.splice(0, 1);\r\n            if(node.ID_Critere !== start){\r\n                createNode('critereNode',  {x: parseInt(node.x), y: parseInt(node.y)}, node)\r\n            }\r\n            // on récupère les décisions attaché au critère et on regarde si un méthode est attaché\r\n            let decisions = getDecisions(node.ID_Critere);\r\n            decisions.forEach(decision => {\r\n                let method = getMethod(decision);\r\n                if(method){\r\n                    createNode('default',  {x: parseInt(method.x), y: parseInt(method.y)}, method);\r\n                    createEdge(\"D\" + decision.ID_Decision ,node.ID_Critere, \"M\" + method.ID_Methode, decision.Libelle, color);\r\n                    createEdge(\"DM\" + decision.ID_Decision, \"M\" + method.ID_Methode, decision.ID_Critere_sortant, null, color);\r\n                } else {\r\n                    if(decision.ID_Critere_sortant){\r\n                        createEdge(\"D\" + decision.ID_Decision, decision.ID_Critere_entrant, decision.ID_Critere_sortant, decision.Libelle, color);\r\n                    } else {\r\n                        createEdge(\"D\" + decision.ID_Decision, decision.ID_Critere_entrant, \"S0\", decision.Libelle, color);\r\n                    }\r\n                }\r\n            })                \r\n        });\r\n    }\r\n\r\n    function initEdgesId(){\r\n        let highest = 0;\r\n        initialTree.decisions.forEach(decision => {\r\n            if(parseInt(decision.ID_Decision) >= highest){\r\n                highest = decision.ID_Decision;\r\n            }\r\n        })\r\n        setNextEdgeId(\"D\" + (parseInt(highest) + 1).toString());\r\n    }\r\n\r\n    function initMethodId(){\r\n        let highest = 0;\r\n        initialTree.methodes.forEach(methode => {\r\n            if(parseInt(methode.ID_Methode) >= highest){\r\n                highest = methode.ID_Methode;\r\n            }\r\n        })\r\n        setNextMethodId(\"M\" + (parseInt(highest) + 1).toString());\r\n    }\r\n\r\n    function initNodeId(){\r\n        let highest = 0;\r\n        initialTree.criteres.forEach(critere => {\r\n            if(parseInt(critere.ID_Critere) >= highest){\r\n                highest = critere.ID_Critere;\r\n            }\r\n        })\r\n        setNextId((parseInt(highest) + 1).toString());\r\n    }\r\n    // retourne les décisions d'un noeud\r\n    function getDecisions(nodeId){\r\n        let decisions =  initialTree.decisions.filter(decision => decision.ID_Critere_entrant === nodeId);\r\n        return decisions;\r\n    }\r\n\r\n    // retourne la méthode d'un décision si elle existe\r\n    function getMethod(decision){\r\n        let method =  initialTree.methodes.find(method => method.ID_Decision === decision.ID_Decision);\r\n        return method;\r\n    }\r\n\r\n    // récupère l'arbre a l'initialisation du composant\r\n    useEffect(() => {\r\n        if(!initialTree){\r\n            let protocol = window.location.protocol;\r\n            let host = window.location.hostname;\r\n            let url = protocol + '//' + host;\r\n                axios.get(url + '/API/Controllers/lireArbre.php')\r\n                .then(response => {\r\n                    setInitialTree(response.data)\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    },[]);\r\n\r\n    // quand l'arbre et chargé et si il possède une entree on lance la création de l'arbre visuel\r\n    useEffect(() => {\r\n        if(initialTree){\r\n            // si l'arbre possède un noeud d'entrée et de sortie on peut le construire\r\n            if(initialTree.entree.length && initialTree.sortie.length){\r\n                initTree();\r\n                initEdgesId();\r\n                initMethodId();\r\n                initNodeId();\r\n            }else{\r\n                // si ce n'est pas le cas on vérifie si il existe, si il y'a des résidu on prévient qu'il y'a un problème\r\n                if(initialTree.methodes.length || initialTree.criteres.length || initialTree.decisions.length){\r\n                    alert('Something went wrong, tree cannot be built');\r\n                }\r\n            }\r\n        } \r\n    }, [initialTree]);\r\n\r\n    // RECONSTRUCTION DE L'ARBRE\r\n\r\n    /*\r\n    types :\r\n        - input (start node)\r\n        - output (end node)\r\n        - default (node)\r\n        - smoothstep (edge)\r\n    */\r\n    function saveTree() {\r\n        let flow = reactFlowInstance.toObject();\r\n        let finalTree = {\r\n            criteres: [],\r\n            methodes: [],\r\n            methodesRessources: initialTree.methodesRessources,\r\n            decisions: [],\r\n            entree: [],\r\n            sortie: [],\r\n        };\r\n        flow.elements.forEach(element => {\r\n            let transformedElement;\r\n            switch (element.type) {\r\n                case 'critereNode':\r\n                    transformedElement = transformToCritere(element);\r\n                    finalTree.criteres.push(transformedElement)\r\n                    break;\r\n                case 'default':\r\n                    transformedElement = transformToMethod(element, flow);\r\n                    finalTree.methodes.push(transformedElement)\r\n                    break;\r\n                case 'smoothstep':\r\n                    if(element.label){\r\n                        transformedElement = transformToDecision(element, flow);\r\n                        finalTree.decisions.push(transformedElement)\r\n                    }\r\n                        break;\r\n                case 'input':\r\n                    transformedElement = transformToEntree(element,flow);\r\n                    finalTree.entree.push(transformedElement)\r\n                    break;\r\n                case 'output':\r\n                    transformedElement = transformToSortie(element);\r\n                    finalTree.sortie.push(transformedElement)\r\n                    break;\r\n            }\r\n        })\r\n        \r\n        // on regarde si il y'a des erreurs dans l'arbre (cas inaproprié)\r\n        let error = checkTree(finalTree);\r\n        if(!error){\r\n            let protocol = window.location.protocol;\r\n            let host = window.location.hostname;\r\n            let url = protocol + '//' + host;\r\n                axios.post(url + '/API/Controllers/creerArbre.php', finalTree)\r\n                .then(response => {\r\n                    setModalInformationOpen(true);\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    }\r\n\r\n    /*\r\n        Fonctions de transformation de l'arbre final\r\n    */\r\n    function transformToCritere(element){\r\n        let critere = {\r\n            ID_Critere: element.id,\r\n            Libelle: element.data.label,\r\n            Informations: (element.data.informations ? element.data.informations : null),\r\n            x: element.position.x,\r\n            y: element.position.y\r\n        }\r\n        return critere;\r\n    }\r\n\r\n    function transformToMethod(element, flow){\r\n        let decision = flow.elements.find(el => el.type === \"smoothstep\" && el.target === element.id);\r\n        let method = {\r\n            ID_Methode: element.id.slice(1),\r\n            ID_Decision: (decision ? decision.id.slice(1) : null),\r\n            Libelle: element.data.label,\r\n            Description: element.data.description,\r\n            Donnees_produites: element.data.productedData,\r\n            Effectif_preconise: element.data.workforce,\r\n            Exemple: element.data.exemple,\r\n            Type_analyse: element.data.analysis,\r\n            Type_methode: element.data.method,\r\n            x: element.position.x,\r\n            y: element.position.y\r\n        }\r\n        return method;\r\n    }\r\n\r\n    function transformToDecision(element, flow){\r\n        let outDecision;\r\n        if(element.target.includes(\"M\")){\r\n            outDecision = flow.elements.find(el => el.type === \"smoothstep\" && el.source === element.target);\r\n        }\r\n\r\n        let decision = {\r\n            ID_Decision: element.id.slice(1),\r\n            ID_Critere_entrant: element.source,\r\n            ID_Critere_sortant: (outDecision ? outDecision.target : element.target),\r\n            Libelle: element.label,\r\n        }\r\n        return decision;\r\n    }\r\n\r\n    function transformToEntree(element, flow){\r\n        let outDecision = flow.elements.find(el => el.type === \"smoothstep\" && el.source === element.id);\r\n        let startNode = {\r\n            ID_Entree: element.id,\r\n            ID_Critere: (outDecision ? outDecision.target : null),\r\n            x: element.position.x,\r\n            y: element.position.y\r\n        }\r\n        return startNode;\r\n    }\r\n\r\n    function transformToSortie(element){\r\n        let endNode = {\r\n            ID_Sortie: element.id.slice(1),\r\n            message: element.data.message,\r\n            x: element.position.x,\r\n            y: element.position.y\r\n        }\r\n        return endNode;\r\n    }\r\n\r\n    /*\r\n    l'abre doit :\r\n        - posséder un noeud entree et sortie\r\n        - ne pas posséder d'élements flottant (non relié ou partiellement relié)\r\n        - ne pas posséder d'élements non labellisé excepté les noeud d'entree, sortie,\r\n            liens sortant des méthodes et le lien source du noeud d'entree\r\n    */\r\n    function checkTree(finalTree){\r\n        let error = false;\r\n        // vérifie si il y'a bien un noeud d'entrée et de sortie\r\n        if(finalTree.entree.length != 1){\r\n            setErrorMessage(\"Tree must have start node\");\r\n            error = true;\r\n        } else if (finalTree.sortie.length != 1){\r\n            setErrorMessage(\"Tree must have end node\");\r\n            error = true;\r\n        } else if (!finalTree.criteres.length){\r\n            setErrorMessage(\"Tree must have node\");\r\n            error = true;\r\n        } \r\n\r\n        // si c'est le cas on vérifie si il n'y a pas de noeud flottant\r\n        if(!error){\r\n            let floatingNode = checkFloatingNode(finalTree);\r\n            let floatingMethod = checkFloatingMethod(finalTree);\r\n            if(floatingNode || floatingMethod){\r\n                error = true;\r\n            }\r\n        }\r\n        \r\n        return error;\r\n    }\r\n\r\n    // vérifie si il y'a un noeud flottant\r\n    function checkFloatingNode(finalTree){\r\n        let condition = true;\r\n\r\n        // pour chaque critère on regarde les décisions entrante et sortante\r\n        finalTree.criteres.forEach(critere => {\r\n            let outputEdge = null;\r\n            let inputEdge = null;\r\n            outputEdge = finalTree.decisions.filter(decision => decision.ID_Critere_entrant === critere.ID_Critere);\r\n            inputEdge = finalTree.decisions.filter(decision => decision.ID_Critere_sortant === critere.ID_Critere);\r\n\r\n            // on gère le cas ou c'est la décision suivant le noeud d'entrée\r\n            if(!inputEdge.length){\r\n                if(finalTree.entree[0].ID_Critere === critere.ID_Critere){\r\n                    inputEdge.push(finalTree.entree[0]);\r\n                }\r\n            }\r\n\r\n            // si il n'ya pas de noeud sortant ou entrant la condition n'est pas respecté\r\n            if(!inputEdge.length || !outputEdge.length){\r\n                condition = false;\r\n            }\r\n\r\n            // si le noeud sortant contient un \"M\" ca veut dire qu'il manque un lien après la méthode\r\n            // la condition n'est pas respecté\r\n            outputEdge.forEach(element =>{\r\n                if(element.ID_Critere_sortant.charAt(0) === \"M\"){\r\n                    condition = false;\r\n                }\r\n            })\r\n        })\r\n        // si la condition n'est pas respecté on set un message d'erreur\r\n        if(!condition){\r\n            setErrorMessage(\"There is a floating node somewhere, check that each edge has a label (except output edge from the start node and methods) and that each critere is connected\");\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // vérifie si il y'a une méthode flottante\r\n    function checkFloatingMethod(finalTree){\r\n        let condition = true;\r\n\r\n        finalTree.methodes.forEach(element => {\r\n            if(!element.ID_Decision){\r\n                condition = false;\r\n            } else {\r\n                let decision = finalTree.decisions.find(item => item.ID_Decision === element.ID_Decision);\r\n                if(!decision){\r\n                    condition = false;\r\n                } else {\r\n                    // vérifie qu'un méthode n'est pas conencté au noeud de fin\r\n                    if(decision.ID_Critere_sortant == \"S0\"){\r\n                        condition = false;\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        switch(condition){\r\n            case true:\r\n                return false;\r\n            case false:\r\n                if(!errorMessage){\r\n                    setErrorMessage(\"There is a floating method somewhere, check that each edge has a label and that each method is connected\");\r\n                }\r\n                return true;\r\n        }\r\n    }\r\n    \r\n    // MODAL MANAGEMENT\r\n\r\n    // warning modal\r\n\r\n    const [modalWarningOpen, setModalWarningOpen] = useState(false);\r\n\r\n    function closeModalWarning(){\r\n        setErrorMessage(null);\r\n        setModalWarningOpen(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(errorMessage){\r\n            setModalWarningOpen(true);\r\n        }\r\n    }, [errorMessage]);\r\n\r\n    // information modal\r\n\r\n    const [modalInformationOpen, setModalInformationOpen] = useState(false);\r\n\r\n    function closeModalInformation(){\r\n        setModalInformationOpen(false);\r\n    }\r\n\r\n    // connfirmation modal\r\n    const [modalConfirmationOpen, setModalConfirmationOpen] = useState(false);\r\n    const [messageConfirmation, setMessageConfirmation] = useState(null);\r\n    const [selectedConfirmationElement, setSelectedConfirmationElement] = useState(null);\r\n\r\n    function openModalConfirmation(element) {\r\n        setModalConfirmationOpen(true);\r\n        setMessageConfirmation(\"Do you want to delete this element ?\")\r\n        setSelectedConfirmationElement(element)\r\n    }\r\n\r\n    function closeConfirmationModal(){\r\n        setModalConfirmationOpen(false);\r\n    }\r\n\r\n    // edit critères\r\n\r\n    const [modalEditCritereOpen, setModalEditCritereOpen] = useState(false);\r\n    const [selectedCritere, setSelectedCritere] = useState(null);\r\n\r\n    function openModalEditCritere(element) {\r\n        let critere = elements.find(el => el.id === element.id);\r\n        setSelectedCritere(critere);\r\n        setModalEditCritereOpen(true);\r\n    }\r\n\r\n    function closeModalEditCritere(){\r\n        setModalEditCritereOpen(false);\r\n    }\r\n\r\n    function saveCritere(label, informations){\r\n        // change les data dans l'instance react flow\r\n        selectedCritere.data.label = label;\r\n        if(informations){selectedCritere.data.informations = informations;}\r\n\r\n        // force le rendu du noeud\r\n        // l'instance ne se rerender pas si modification dans sous object donc on change position\r\n        selectedCritere.position = {x: selectedCritere.position.x, y: selectedCritere.position.y + 1}\r\n        rerenderFlow();\r\n    }\r\n\r\n    // edit edges\r\n    const [modalEditEdgeOpen, setModalEditEdgeOpen] = useState(false);\r\n    const [selectedEdge, setSelectedEdge] = useState(null);\r\n\r\n    function openModalEditEdge(element) {\r\n        let edge = elements.find(el => el.id === element.id);\r\n        setSelectedEdge(edge);\r\n        setModalEditEdgeOpen(true);\r\n    }\r\n\r\n    function closeModalEditEdge(){\r\n        setModalEditEdgeOpen(false);\r\n    }\r\n\r\n    function saveEdge(label){\r\n        selectedEdge.label = label;\r\n        rerenderFlow();\r\n    }\r\n\r\n    // edit method\r\n\r\n    const [modalEditMethodOpen, setModalEditMethodOpen] = useState(false);\r\n    const [selectedMethod, setSelectedMethod] = useState(null);\r\n\r\n    function openModalEditMethod(element) {\r\n        let method = elements.find(el => el.id === element.id);\r\n        setSelectedMethod(method);\r\n        setModalEditMethodOpen(true);\r\n    }\r\n\r\n    function closeModalEditMethod(){\r\n        setModalEditMethodOpen(false);\r\n    }\r\n\r\n    function saveMethod(newData, newResources){\r\n        // change les data dans l'instance react flow\r\n        selectedMethod.data.label = newData.label;\r\n        selectedMethod.data.description = newData.description;\r\n        selectedMethod.data.productedData = newData.productedData;\r\n        selectedMethod.data.workforce = newData.workforce;\r\n        selectedMethod.data.method = newData.method;\r\n        selectedMethod.data.analysis = newData.analysis;\r\n        selectedMethod.data.exemple = newData.exemple;\r\n\r\n        // liste des ressources actuellement associé à la méthode\r\n        let thisMethodResources = initialTree.methodesRessources.filter(item => item.ID_Methode === selectedMethod.id.slice(1));\r\n\r\n        // associe les ressources qui ne l'etait aps deja a la méthode        \r\n        newResources.forEach(newResource => {\r\n            let resource = thisMethodResources.filter(item => item.ID_Ressource === newResource.ID_Ressource);\r\n            if(!resource.length){\r\n                let newMethodResource = {\r\n                    ID_Methode: selectedMethod.id.slice(1),\r\n                    ID_Ressource: newResource.ID_Ressource\r\n                }\r\n                initialTree.methodesRessources.push(newMethodResource);\r\n            }\r\n        })\r\n\r\n        // supprime les ressources qui ne sont plus associé\r\n        initialTree.methodesRessources.forEach(oldResource => {\r\n            let resource = newResources.filter(item => item.ID_Ressource === oldResource.ID_Ressource);\r\n            if(!resource.length){\r\n                let index =  initialTree.methodesRessources.indexOf(oldResource);\r\n                initialTree.methodesRessources = initialTree.methodesRessources.filter(item => initialTree.methodesRessources.indexOf(item) !== index);\r\n            }   \r\n        })\r\n        \r\n\r\n        // force le rendu du noeud\r\n        // l'instance ne se rerender pas si modification dans sous object donc on change position\r\n        selectedMethod.position = {x: selectedMethod.position.x, y: selectedMethod.position.y + 1}\r\n        rerenderFlow();\r\n    }\r\n\r\n    // edit noeud de fin\r\n\r\n    const [modalEditEndNodeOpen, setModalEditEndNodeOpen] = useState(false);\r\n    const [selectedEndNode, setSelectedEndNode] = useState(null);\r\n\r\n    function openModalEditEndNode(element) {\r\n        let endNode = elements.find(el => el.id === element.id);\r\n        setSelectedEndNode(endNode);\r\n        setModalEditEndNodeOpen(true);\r\n    }\r\n\r\n    function closeModalEditEndNode(){\r\n        setModalEditEndNodeOpen(false);\r\n    }\r\n\r\n    function saveEndNode(message){\r\n        // change les data dans l'instance react flow\r\n        selectedEndNode.data.message = message;\r\n\r\n        // force le rendu du noeud\r\n        // l'instance ne se rerender pas si modification dans sous object donc on change position\r\n        selectedEndNode.position = {x: selectedEndNode.position.x, y: selectedEndNode.position.y + 1}\r\n        rerenderFlow();\r\n    }\r\n\r\n    // FORCE RERENDER\r\n\r\n    function rerenderFlow(){\r\n        let cloneElements = [...elements];\r\n        setElements(cloneElements);     \r\n    }\r\n\r\n    return (\r\n        <div className=\"Tree\">\r\n            {elements ?\r\n                <ReactFlowProvider>\r\n                    <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n                        <Toolbar className=\"tools\"\r\n                            save={saveTree}\r\n                        />\r\n                        <div className=\"canvas\">\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                nodeTypes={nodeTypes}\r\n                                onElementsRemove={onElementsRemove}\r\n                                onConnect={onConnect}\r\n                                // deleteKeyCode={46}\r\n                                onLoad={setReactFlowInstance}\r\n                                onDrop={onDrop}\r\n                                onDragOver={onDragOver}\r\n                                onElementClick={onElementClick}\r\n                                onPaneClick={onPaneClick}/>\r\n                        </div>\r\n                        <FontAwesomeIcon onClick={() => deleteMode()} className=\"icon delete\" icon={faTrashAlt} />\r\n                        <p className=\"removeModeMessage\">Warning, you activated the suppression mode</p>\r\n                    </div>\r\n                    <button onClick={() => console.log(nextEdgeId)}>debug</button>\r\n\r\n                    <ModalEditCritere\r\n                        title=\"Edit critere\"\r\n                        open={modalEditCritereOpen}  \r\n                        close={closeModalEditCritere}\r\n                        mainAction={saveCritere}\r\n                        selectedCritere={selectedCritere}\r\n                    />\r\n\r\n                    <ModalEditEdge\r\n                        title=\"Edit Edge\"\r\n                        open={modalEditEdgeOpen}  \r\n                        close={closeModalEditEdge}\r\n                        mainAction={saveEdge}\r\n                        selectedEdge={selectedEdge}\r\n                    />\r\n\r\n                    <ModalEditMethod\r\n                        title=\"Edit Method\"\r\n                        open={modalEditMethodOpen}  \r\n                        close={closeModalEditMethod}\r\n                        mainAction={saveMethod}\r\n                        selectedMethod={selectedMethod}\r\n                        initialTree={initialTree}\r\n                    />\r\n\r\n                    <ModalEditEndNode\r\n                        title=\"Edit End node\"\r\n                        open={modalEditEndNodeOpen}  \r\n                        close={closeModalEditEndNode}\r\n                        mainAction={saveEndNode}\r\n                        selectedEndNode={selectedEndNode}\r\n                    />\r\n\r\n                    <ModalWarning\r\n                        message={errorMessage}\r\n                        open={modalWarningOpen}  \r\n                        close={closeModalWarning}\r\n                    />\r\n\r\n                    <ModalInformation\r\n                        open={modalInformationOpen}  \r\n                        close={closeModalInformation}\r\n                    />\r\n\r\n                    <ModalConfirmation\r\n                        title=\"Warning\"\r\n                        message={messageConfirmation}\r\n                        open={modalConfirmationOpen}  \r\n                        close={closeConfirmationModal}\r\n                        mainAction={deleteElement}\r\n                        mainActionParameters={selectedConfirmationElement}\r\n                        mainActionName=\"Delete\"\r\n                    />\r\n                </ReactFlowProvider>\r\n            : <Loader/> \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tree;\r\n"]},"metadata":{},"sourceType":"module"}
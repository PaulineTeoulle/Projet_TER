{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\Projet_TER\\\\src\\\\views\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport $ from 'jquery';\nimport ReactFlow, { removeElements, addEdge, ReactFlowProps, Controls, ReactFlowProvider } from 'react-flow-renderer';\nimport Toolbar from '../components/Toolbar';\nimport { createPortal } from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tree() {\n  _s();\n\n  const initialElements = [{\n    id: '1',\n    type: 'input',\n    data: {\n      label: 'Start Node'\n    },\n    position: {\n      x: 250,\n      y: 25\n    }\n  }, {\n    id: '2',\n    type: 'default',\n    data: {\n      label: 'Node'\n    },\n    position: {\n      x: 100,\n      y: 125\n    }\n  }, {\n    id: '3',\n    type: 'output',\n    data: {\n      label: 'End Node'\n    },\n    position: {\n      x: 250,\n      y: 250\n    }\n  }, {\n    id: 'e1-2',\n    source: '1',\n    target: '2',\n    type: 'smoothstep',\n    arrowHeadType: 'arrowclosed',\n    label: 'edge label'\n  }, {\n    id: 'e2-3',\n    source: '2',\n    target: '3',\n    type: 'smoothstep',\n    arrowHeadType: 'arrowclosed',\n    label: 'edge label'\n  }];\n  const [nextId, setNextId] = useState(\"0\");\n  const [editedElement, setEditedElement] = useState(null);\n  const [elements, setElements] = useState(initialElements);\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  const onElementsRemove = elementsToRemove => setElements(els => removeElements(elementsToRemove, els));\n\n  const onConnect = params => setElements(els => addEdge({ ...params,\n    arrowHeadType: 'arrowclosed',\n    label: 'edge label',\n    type: 'smoothstep'\n  }, els));\n\n  const onLoad = _reactFlowInstance => setReactFlowInstance(_reactFlowInstance); // HOOKS REACT-FLOW\n\n\n  const onDragOver = event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  const onDrop = event => {\n    event.preventDefault(); //check if input/output already exists\n\n    const type = event.dataTransfer.getData('application/reactflow');\n\n    if (type == \"input\" || type == \"output\") {\n      if (checkExist(type)) {\n        return alert(\"Désolé, il ne peut y avoir qu'un seul noeud de type \" + type);\n      }\n    }\n\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n    createNode(type, position);\n    setNextId((parseInt(nextId) + 1).toString());\n  };\n\n  const onElementClick = (event, element) => {\n    event.preventDefault();\n    openEdition(element);\n  };\n\n  const onPaneClick = event => {\n    event.preventDefault();\n    closeEdition();\n  }; // FUNCTIONS\n  // set next ID\n\n\n  (function setId() {\n    $(\".react-flow__node\").each(function (index) {\n      let currentId = $(this).data(\"id\");\n\n      if (currentId >= nextId) {\n        setNextId((currentId + 1).toString());\n      }\n    });\n  })();\n\n  function getId() {\n    return nextId;\n  } // add input in selected node\n\n\n  function openEdition(element) {\n    if (!editedElement) {\n      let el = $(\"div\").find(`[data-id='${element.id}']`);\n      let text = el.text();\n      el.css(\"font-size\", 0);\n      el.append(`<input type=\"text\" id=\"label\" name=\"label\" value=\"${text}\"/>`);\n      setEditedElement(el);\n    }\n  } // remove input in selected node and save label\n\n\n  function closeEdition() {\n    if (editedElement) {\n      let newValue = editedElement.children(\"input\").val();\n      elements.forEach(element => {\n        if (element.id == editedElement.data(\"id\")) {\n          element.data.label = newValue;\n        }\n      });\n      editedElement.children(\"input\").remove();\n      editedElement.css(\"font-size\", \"12px\");\n      setEditedElement(null);\n    }\n  }\n\n  function createNode(type, position) {\n    let newNode = {\n      id: getId(),\n      type,\n      position,\n      data: {\n        label: `${type} node`\n      }\n    };\n    setElements(es => es.concat(newNode));\n  } // check if a node type already exists\n\n\n  function checkExist(type) {\n    for (let i = 0; i < elements.length; i++) {\n      if (elements[i].type == type) {\n        return true;\n      }\n    }\n\n    return false;\n  } // DEBUG\n\n\n  function printNodes() {\n    console.log(elements);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Tree\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reactflow-wrapper\",\n        ref: reactFlowWrapper,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Tree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: 600,\n            backgroundColor: 'lightgrey'\n          },\n          children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n            elements: elements,\n            onElementsRemove: onElementsRemove,\n            onConnect: onConnect,\n            deleteKeyCode: 46,\n            onLoad: onLoad,\n            onDrop: onDrop,\n            onDragOver: onDragOver,\n            onElementClick: onElementClick,\n            onPaneClick: onPaneClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => printNodes(),\n          children: \"print nodes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tree, \"iYNdwPcO89BIf0BNeRTjTFjbp0Y=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/wamp64/www/Projet_TER/src/views/Tree.js"],"names":["React","useState","useRef","$","ReactFlow","removeElements","addEdge","ReactFlowProps","Controls","ReactFlowProvider","Toolbar","createPortal","Tree","initialElements","id","type","data","label","position","x","y","source","target","arrowHeadType","nextId","setNextId","editedElement","setEditedElement","elements","setElements","reactFlowWrapper","reactFlowInstance","setReactFlowInstance","onElementsRemove","elementsToRemove","els","onConnect","params","onLoad","_reactFlowInstance","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","getData","checkExist","alert","reactFlowBounds","current","getBoundingClientRect","project","clientX","left","clientY","top","createNode","parseInt","toString","onElementClick","element","openEdition","onPaneClick","closeEdition","setId","each","index","currentId","getId","el","find","text","css","append","newValue","children","val","forEach","remove","newNode","es","concat","i","length","printNodes","console","log","height","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useState, useRef} from 'react';\r\nimport $ from 'jquery';\r\nimport ReactFlow,{ removeElements, addEdge, ReactFlowProps, Controls,ReactFlowProvider  } from 'react-flow-renderer';\r\n\r\nimport Toolbar from '../components/Toolbar';\r\nimport { createPortal } from 'react-dom';\r\n\r\nfunction Tree() {\r\n\r\n    const initialElements = [\r\n        {\r\n            id: '1',\r\n            type: 'input',\r\n            data: { label: 'Start Node' },\r\n            position: { x: 250, y: 25 },\r\n        },\r\n        {\r\n            id: '2',\r\n            type: 'default',\r\n            data: { label: 'Node' },\r\n            position: { x: 100, y: 125 },\r\n        },\r\n        {\r\n            id: '3',\r\n            type: 'output', \r\n            data: { label: 'End Node' },\r\n            position: { x: 250, y: 250 },\r\n        },\r\n        {\r\n            id: 'e1-2',\r\n            source: '1',\r\n            target: '2',\r\n            type: 'smoothstep',\r\n            arrowHeadType: 'arrowclosed',\r\n            label: 'edge label',\r\n        },\r\n        {\r\n            id: 'e2-3',\r\n            source: '2',\r\n            target: '3',\r\n            type: 'smoothstep',\r\n            arrowHeadType: 'arrowclosed',\r\n            label: 'edge label',\r\n          },\r\n      ];\r\n\r\n    const [nextId, setNextId] = useState(\"0\");\r\n    const [editedElement, setEditedElement] = useState(null);\r\n    const [elements, setElements] = useState(initialElements);\r\n    const reactFlowWrapper = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    const onElementsRemove = (elementsToRemove) => setElements((els) => removeElements(elementsToRemove, els));\r\n    const onConnect = (params) => setElements((els) => addEdge({ ...params, \r\n        arrowHeadType: 'arrowclosed', label: 'edge label', type: 'smoothstep'}, els));\r\n    const onLoad = (_reactFlowInstance) => setReactFlowInstance(_reactFlowInstance);\r\n\r\n\r\n    // HOOKS REACT-FLOW\r\n\r\n    const onDragOver = (event) => {\r\n        event.preventDefault();\r\n        event.dataTransfer.dropEffect = 'move';\r\n    };\r\n\r\n    const onDrop = (event) => {\r\n        event.preventDefault();\r\n\r\n        //check if input/output already exists\r\n        const type = event.dataTransfer.getData('application/reactflow');\r\n        if(type == \"input\" || type == \"output\"){\r\n            if(checkExist(type)){\r\n                return alert(\"Désolé, il ne peut y avoir qu'un seul noeud de type \" + type)\r\n            } \r\n        }\r\n        \r\n        const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n        const position = reactFlowInstance.project({\r\n            x: event.clientX - reactFlowBounds.left,\r\n            y: event.clientY - reactFlowBounds.top,\r\n        });\r\n        createNode(type, position);\r\n        setNextId((parseInt(nextId) + 1).toString());\r\n    };\r\n\r\n    const onElementClick = (event, element) =>{\r\n        event.preventDefault();\r\n        openEdition(element);\r\n    }\r\n\r\n    const onPaneClick = (event) => {\r\n        event.preventDefault();\r\n        closeEdition();\r\n    }\r\n\r\n\r\n    // FUNCTIONS\r\n\r\n    // set next ID\r\n    (function setId(){\r\n        $(\".react-flow__node\").each(function( index ) {\r\n            let currentId = $(this).data(\"id\");\r\n            if(currentId >= nextId){\r\n                setNextId((currentId + 1).toString());\r\n            }\r\n        });\r\n    })();\r\n\r\n    function getId(){\r\n        return nextId;\r\n    }\r\n\r\n    // add input in selected node\r\n    function openEdition(element){\r\n        if(!editedElement){\r\n            let el = $(\"div\").find(`[data-id='${element.id}']`)\r\n            let text = el.text()\r\n            el.css(\"font-size\", 0);\r\n            el.append(`<input type=\"text\" id=\"label\" name=\"label\" value=\"${text}\"/>`);\r\n            setEditedElement(el)\r\n        }\r\n    }\r\n\r\n    // remove input in selected node and save label\r\n    function closeEdition(){\r\n        if(editedElement){\r\n            let newValue = editedElement.children(\"input\").val();\r\n            elements.forEach(element => {\r\n                if(element.id == editedElement.data(\"id\")){\r\n                    element.data.label = newValue;\r\n                }\r\n            });\r\n            editedElement.children(\"input\").remove();\r\n            editedElement.css(\"font-size\", \"12px\");\r\n            setEditedElement(null)\r\n        }\r\n    }\r\n\r\n    function createNode(type, position) {\r\n        let newNode = {\r\n            id: getId(),\r\n            type,\r\n            position,\r\n            data: { label: `${type} node` },\r\n        };\r\n        setElements((es) => es.concat(newNode));\r\n    }\r\n\r\n    // check if a node type already exists\r\n    function checkExist(type){\r\n        for (let i = 0; i < elements.length; i++) {\r\n            if(elements[i].type == type){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // DEBUG\r\n\r\n    function printNodes(){\r\n        console.log(elements);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Tree\">\r\n            <ReactFlowProvider>        \r\n                <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n                    <h1>Tree</h1>\r\n                    <div style={{ height: 600, backgroundColor: 'lightgrey' }}>\r\n                        <ReactFlow  elements={elements}\r\n                            onElementsRemove={onElementsRemove}\r\n                            onConnect={onConnect}\r\n                            deleteKeyCode={46}\r\n                            onLoad={onLoad}\r\n                            onDrop={onDrop}\r\n                            onDragOver={onDragOver}\r\n                            onElementClick={onElementClick}\r\n                            onPaneClick={onPaneClick} />\r\n                    </div>\r\n                    <button onClick={() => printNodes()}>print nodes</button>\r\n                    <Toolbar/>\r\n                </div>\r\n            </ReactFlowProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tree;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nimport { addItem, getItem, removeItem } from \"./LocalStorage\"; //Vérifie la connexion avec le token\n\nexport function hasAuthenticated() {\n  const token = getItem('token');\n  const result = token ? tokenIsValid(token) : false;\n\n  if (false === result) {\n    removeItem('token');\n  }\n\n  return result;\n}\nexport function isUser() {\n  const token = getItem('token');\n  const result = token ? tokenIsValid(token) : false;\n\n  if (false === result) {\n    removeItem('token');\n    return false;\n  }\n\n  if (true === result) {\n    return getRole(token);\n  }\n\n  return false;\n} //Récup du role du token décodé\n\nexport function getRole(token) {\n  const tokenResult = decodeToken(token);\n  return tokenResult['user_role'];\n} //Récupération du token + mise en localStorage\n\nexport function login(credentials) {\n  let protocol = window.location.protocol;\n  let host = window.location.hostname;\n  let url = protocol + '//' + host;\n  return axios.post(url + 'API/Controllers/connexion.php', credentials).then(response => response.data.token).then(token => {\n    if (token !== undefined) {\n      addItem('token', token);\n      return true;\n    } else return false;\n  });\n} //Supprime le token du localSTorage\n\nexport function logout() {\n  removeItem('token');\n} //Verifie validité du token (avec temps d'expiration)\n\nfunction tokenIsValid(token) {\n  const decoded = jwt_decode(token);\n  const exp = decoded['exp'];\n  return exp * 1000 > new Date().getTime();\n} //Traduit le token pour récupérer les infos\n\n\nfunction decodeToken(token) {\n  return jwt_decode(token);\n}","map":{"version":3,"sources":["C:/wamp64/www/Projet_TER/src/services/AuthApi.js"],"names":["axios","jwt_decode","addItem","getItem","removeItem","hasAuthenticated","token","result","tokenIsValid","isUser","getRole","tokenResult","decodeToken","login","credentials","protocol","window","location","host","hostname","url","post","then","response","data","undefined","logout","decoded","exp","Date","getTime"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAAQC,OAAR,EAAiBC,OAAjB,EAA0BC,UAA1B,QAA2C,gBAA3C,C,CAEA;;AACA,OAAO,SAASC,gBAAT,GAA4B;AAE/B,QAAMC,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;AACA,QAAMI,MAAM,GAAGD,KAAK,GAAGE,YAAY,CAACF,KAAD,CAAf,GAAyB,KAA7C;;AACA,MAAI,UAAUC,MAAd,EAAsB;AAClBH,IAAAA,UAAU,CAAC,OAAD,CAAV;AACH;;AACD,SAAOG,MAAP;AACH;AAED,OAAO,SAASE,MAAT,GAAiB;AACpB,QAAMH,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;AACA,QAAMI,MAAM,GAAGD,KAAK,GAAGE,YAAY,CAACF,KAAD,CAAf,GAAyB,KAA7C;;AACA,MAAI,UAAUC,MAAd,EAAsB;AAClBH,IAAAA,UAAU,CAAC,OAAD,CAAV;AACA,WAAO,KAAP;AACH;;AACD,MAAG,SAASG,MAAZ,EAAoB;AAChB,WAAOG,OAAO,CAACJ,KAAD,CAAd;AACH;;AACD,SAAO,KAAP;AACH,C,CAED;;AACA,OAAO,SAASI,OAAT,CAAiBJ,KAAjB,EAAuB;AAC1B,QAAMK,WAAW,GAAGC,WAAW,CAACN,KAAD,CAA/B;AACA,SAAOK,WAAW,CAAC,WAAD,CAAlB;AACH,C,CAED;;AACA,OAAO,SAASE,KAAT,CAAeC,WAAf,EAA4B;AAC/B,MAAIC,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBF,QAA/B;AACA,MAAIG,IAAI,GAAGF,MAAM,CAACC,QAAP,CAAgBE,QAA3B;AACA,MAAIC,GAAG,GAAGL,QAAQ,GAAG,IAAX,GAAkBG,IAA5B;AACA,SAAOlB,KAAK,CACPqB,IADE,CACGD,GAAG,GAAG,+BADT,EAC0CN,WAD1C,EAEFQ,IAFE,CAEGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAclB,KAF7B,EAGFgB,IAHE,CAGGhB,KAAK,IAAI;AACX,QAAGA,KAAK,KAAKmB,SAAb,EAAuB;AACnBvB,MAAAA,OAAO,CAAC,OAAD,EAAUI,KAAV,CAAP;AACA,aAAO,IAAP;AACH,KAHD,MAIK,OAAO,KAAP;AACR,GATE,CAAP;AAUH,C,CACD;;AACA,OAAO,SAASoB,MAAT,GAAkB;AACrBtB,EAAAA,UAAU,CAAC,OAAD,CAAV;AACH,C,CAED;;AACA,SAASI,YAAT,CAAsBF,KAAtB,EAA6B;AACzB,QAAMqB,OAAO,GAAG1B,UAAU,CAACK,KAAD,CAA1B;AACA,QAAMsB,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAnB;AACA,SAAOC,GAAG,GAAG,IAAN,GAAa,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACH,C,CAED;;;AACA,SAASlB,WAAT,CAAqBN,KAArB,EAA2B;AACvB,SAAOL,UAAU,CAACK,KAAD,CAAjB;AACH","sourcesContent":["import axios from 'axios';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {addItem, getItem, removeItem} from \"./LocalStorage\";\r\n\r\n//Vérifie la connexion avec le token\r\nexport function hasAuthenticated() {\r\n \r\n    const token = getItem('token');\r\n    const result = token ? tokenIsValid(token) : false;\r\n    if (false === result) {\r\n        removeItem('token');\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function isUser(){\r\n    const token = getItem('token');\r\n    const result = token ? tokenIsValid(token) : false;\r\n    if (false === result) {\r\n        removeItem('token');\r\n        return false;\r\n    }\r\n    if(true === result) {\r\n        return getRole(token);\r\n    }\r\n    return false;\r\n}\r\n\r\n//Récup du role du token décodé\r\nexport function getRole(token){\r\n    const tokenResult = decodeToken(token);\r\n    return tokenResult['user_role'];\r\n}\r\n\r\n//Récupération du token + mise en localStorage\r\nexport function login(credentials) {\r\n    let protocol = window.location.protocol;\r\n    let host = window.location.hostname;\r\n    let url = protocol + '//' + host;\r\n    return axios\r\n        .post(url + 'API/Controllers/connexion.php', credentials)\r\n        .then(response => response.data.token)\r\n        .then(token => {\r\n            if(token !== undefined){\r\n                addItem('token', token);\r\n                return true;\r\n            }\r\n            else return false;\r\n        });\r\n}\r\n//Supprime le token du localSTorage\r\nexport function logout() {\r\n    removeItem('token');\r\n}\r\n\r\n//Verifie validité du token (avec temps d'expiration)\r\nfunction tokenIsValid(token) {\r\n    const decoded = jwt_decode(token);\r\n    const exp = decoded['exp']\r\n    return exp * 1000 > new Date().getTime();\r\n}\r\n\r\n//Traduit le token pour récupérer les infos\r\nfunction decodeToken(token){\r\n    return jwt_decode(token);\r\n}"]},"metadata":{},"sourceType":"module"}
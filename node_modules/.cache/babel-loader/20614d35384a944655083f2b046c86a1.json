{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\Projet_TER\\\\src\\\\views\\\\Quiz.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport Issues from '../components/quiz/issues';\nimport Historic from '../components/quiz/historic';\nimport Method from '../components/quiz/method';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Quiz extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeData = (nextIssueId, decision = null, allChoices = null, historic = true, editHistoric = false) => {\n      // ID de la prochaine question\n      this.setState({\n        checkedDecision: decision\n      }); //  Vérifie si la décision renvoie une méthode\n\n      let method = this.checkMethod(decision);\n\n      if (method) {\n        this.manageMethod(decision, method);\n      } else {\n        // si ID prochaine question pas égal a 0 on récupère info\n        if (nextIssueId != 0) {\n          // this.checkChoices(allChoices);\n          if (allChoices) {\n            let retry = allChoices.find(element => element == 0);\n\n            if (retry) {\n              this.setState({\n                historic: [],\n                step: 0\n              }, () => {\n                console.log(\"choix et 0\");\n                this.manageStoreData(nextIssueId, decision, historic, editHistoric);\n              });\n            } else {\n              console.log(\"choix\");\n              this.manageStoreData(nextIssueId, decision, historic, editHistoric);\n            }\n          } else {\n            console.log(\"pas de choix\");\n            this.manageStoreData(nextIssueId, decision, historic, editHistoric);\n          } // setTimeout( () => {                 \n          // let issue = this.state.tree.criteres.find(critere => critere.ID_Critere === nextIssueId);\n          // let decisions =  this.state.tree.decisions.filter(decision => decision.ID_Critere_entrant === issue.ID_Critere);\n          // let oldIssue = this.state.currentIssue;\n          // this.setState({\n          //     currentIssue: issue,\n          //     currentDecisions: decisions,\n          //     step: this.state.step + 1\n          // }, () => {\n          //     if(historic){\n          //         this.manageHistoric(decision, oldIssue)\n          //     }\n          //     if(editHistoric){\n          //         let historicElement = {\n          //             issue: this.state.currentIssue,\n          //             decision: null\n          //         }\n          //         this.setState({historic: this.state.historic.concat(historicElement)});  \n          //     }\n          // });    \n          // }, 1);      \n\n        } else {\n          alert(\"fini\");\n        }\n      }\n    };\n\n    this.manageStoreData = (nextIssueId, decision, historic, editHistoric) => {\n      let issue = this.state.tree.criteres.find(critere => critere.ID_Critere === nextIssueId);\n      let decisions = this.state.tree.decisions.filter(decision => decision.ID_Critere_entrant === issue.ID_Critere);\n      let oldIssue = this.state.currentIssue;\n      this.setState({\n        currentIssue: issue,\n        currentDecisions: decisions,\n        step: this.state.step + 1\n      }, () => {\n        if (historic) {\n          this.manageHistoric(decision, oldIssue);\n        }\n\n        if (editHistoric) {\n          let historicElement = {\n            issue: this.state.currentIssue,\n            decision: null\n          };\n          this.setState({\n            historic: this.state.historic.concat(historicElement)\n          });\n        }\n      });\n    };\n\n    this.manageMethod = (decision, method) => {\n      this.state.historic[this.state.historic.length - 1].decision = decision;\n      let historicElement = {\n        method: method\n      };\n      this.setState({\n        historic: this.state.historic.concat(historicElement)\n      });\n    };\n\n    this.checkMethod = decision => {\n      if (decision) {\n        let method = this.state.tree.methodes.find(methode => methode.ID_Decision === decision.ID_Decision);\n\n        if (method) {\n          this.setState({\n            currentMethod: method\n          });\n          return method;\n        }\n      }\n    };\n\n    this.checkChoices = choices => {\n      if (choices) {\n        choices.forEach(element => {\n          if (element == 0) {\n            this.setState({\n              historic: [],\n              checkedDecision: \"blabla\",\n              step: 0\n            }, () => {\n              console.log(this.state);\n              return true;\n            });\n          }\n        });\n      }\n    };\n\n    this.backOut = (ID, type) => {\n      if (type == 'issue') {\n        if (this.state.currentMethod) {\n          this.setState({\n            currentMethod: null\n          }, () => {\n            this.test(ID);\n          });\n        } else {\n          this.test(ID);\n        }\n      } else {\n        // let index =  this.state.historic.indexOf(this.state.historic.find(el => el.method.ID_Methode === ID));\n        console.log(this.state.historic);\n        alert(\"methode\");\n      }\n    };\n\n    this.test = ID => {\n      let index;\n      this.changeData(ID, null, null, false);\n      this.state.historic.forEach(element => {\n        if ('issue' in element) {\n          if (element.issue.ID_Critere === ID) {\n            index = this.state.historic.indexOf(element);\n          }\n        }\n      }); // let index =  this.state.historic.indexOf(this.state.historic.find(el => el.issue.ID_Critere === ID));\n\n      this.state.historic.length = index + 1;\n      this.state.historic[index].decision = null;\n      this.setState({\n        step: index + 1\n      });\n    };\n\n    this.manageHistoric = (decision = null, oldIssue) => {\n      if (!this.state.currentMethod && this.state.historic) {\n        let condition = this.state.historic.find(el => el.issue.ID_Critere === oldIssue.ID_Critere);\n\n        if (condition) {\n          condition.decision = decision;\n        }\n\n        console.log(this.state);\n        let historicElement = {\n          issue: this.state.currentIssue,\n          decision: null\n        };\n        this.setState({\n          historic: this.state.historic.concat(historicElement)\n        }, () => console.log(this.state));\n      }\n    };\n\n    this.resumeQuiz = () => {\n      this.setState({\n        currentMethod: null\n      }, () => {\n        this.changeData(this.state.checkedDecision.ID_Critere_sortant, null, null, false, true);\n      });\n    };\n\n    this.state = {\n      tree: null,\n      checkedDecision: null,\n      currentMethod: null,\n      currentIssue: null,\n      currentDecisions: [],\n      historic: [],\n      step: 0\n    }; // this.componentDidMount = this.componentDidMount.bind(this);\n  } // met a jour le questionnaire\n\n\n  componentDidMount() {\n    let protocol = window.location.protocol;\n    let host = window.location.hostname;\n    let url = protocol + '//' + host;\n\n    if (!this.state.tree) {\n      axios.get(url + '/reactTest/MATUI/API/Controllers/lireArbre.php').then(response => {\n        this.setState({\n          tree: response.data\n        });\n        this.changeData(response.data.entree[0].ID_Critere);\n      }).catch(error => console.log(error));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Quiz\",\n      children: [this.state.currentMethod ? /*#__PURE__*/_jsxDEV(Method, {\n        method: this.state.currentMethod,\n        checkedDecision: this.state.checkedDecision,\n        changeData: this.changeData,\n        resumeQuiz: this.resumeQuiz,\n        historic: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(Issues, {\n        issue: this.state.currentIssue,\n        decisions: this.state.currentDecisions,\n        changeData: this.changeData,\n        step: this.state.step\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Historic, {\n        historic: this.state.historic,\n        backOut: this.backOut\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Quiz;","map":{"version":3,"sources":["C:/wamp64/www/Projet_TER/src/views/Quiz.js"],"names":["React","axios","Issues","Historic","Method","Quiz","Component","constructor","props","changeData","nextIssueId","decision","allChoices","historic","editHistoric","setState","checkedDecision","method","checkMethod","manageMethod","retry","find","element","step","console","log","manageStoreData","alert","issue","state","tree","criteres","critere","ID_Critere","decisions","filter","ID_Critere_entrant","oldIssue","currentIssue","currentDecisions","manageHistoric","historicElement","concat","length","methodes","methode","ID_Decision","currentMethod","checkChoices","choices","forEach","backOut","ID","type","test","index","indexOf","condition","el","resumeQuiz","ID_Critere_sortant","componentDidMount","protocol","window","location","host","hostname","url","get","then","response","data","entree","catch","error","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Issues from '../components/quiz/issues';\r\nimport Historic from '../components/quiz/historic';\r\nimport Method from '../components/quiz/method';\r\n\r\n\r\nexport class Quiz extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tree : null,\r\n            checkedDecision: null,\r\n            currentMethod: null,\r\n            currentIssue: null,\r\n            currentDecisions: [],\r\n            historic: [],\r\n            step: 0,\r\n        };\r\n        // this.componentDidMount = this.componentDidMount.bind(this);\r\n    }\r\n\r\n    // met a jour le questionnaire\r\n    changeData = (nextIssueId, decision = null, allChoices = null, historic = true, editHistoric = false) => {\r\n        // ID de la prochaine question\r\n        this.setState({checkedDecision: decision});\r\n\r\n        //  Vérifie si la décision renvoie une méthode\r\n        let method = this.checkMethod(decision);\r\n        if(method){\r\n            this.manageMethod(decision, method);\r\n        } else {\r\n            // si ID prochaine question pas égal a 0 on récupère info\r\n            if(nextIssueId != 0){\r\n                // this.checkChoices(allChoices);\r\n                if(allChoices){\r\n                    let retry = allChoices.find(element => element == 0);\r\n                    if(retry){\r\n                        this.setState({\r\n                            historic: [],\r\n                            step: 0,\r\n                        }, () => {\r\n                            console.log(\"choix et 0\")\r\n                            this.manageStoreData(nextIssueId, decision, historic, editHistoric);\r\n                        });\r\n                    } else {\r\n                        console.log(\"choix\")\r\n                        this.manageStoreData(nextIssueId, decision, historic, editHistoric);\r\n                    }\r\n                } else {\r\n                    console.log(\"pas de choix\")\r\n                    this.manageStoreData(nextIssueId, decision, historic, editHistoric);\r\n                }\r\n                // setTimeout( () => {                 \r\n                    // let issue = this.state.tree.criteres.find(critere => critere.ID_Critere === nextIssueId);\r\n                    // let decisions =  this.state.tree.decisions.filter(decision => decision.ID_Critere_entrant === issue.ID_Critere);\r\n                    // let oldIssue = this.state.currentIssue;\r\n                    // this.setState({\r\n                    //     currentIssue: issue,\r\n                    //     currentDecisions: decisions,\r\n                    //     step: this.state.step + 1\r\n                    // }, () => {\r\n                    //     if(historic){\r\n                    //         this.manageHistoric(decision, oldIssue)\r\n                    //     }\r\n                    //     if(editHistoric){\r\n                    //         let historicElement = {\r\n                    //             issue: this.state.currentIssue,\r\n                    //             decision: null\r\n                    //         }\r\n                    //         this.setState({historic: this.state.historic.concat(historicElement)});  \r\n                    //     }\r\n                    // });    \r\n                // }, 1);      \r\n            }else {\r\n                alert(\"fini\");\r\n            }\r\n        }\r\n    }\r\n\r\n    manageStoreData = (nextIssueId, decision, historic, editHistoric) => {\r\n        let issue = this.state.tree.criteres.find(critere => critere.ID_Critere === nextIssueId);\r\n        let decisions =  this.state.tree.decisions.filter(decision => decision.ID_Critere_entrant === issue.ID_Critere);\r\n        let oldIssue = this.state.currentIssue;\r\n        this.setState({\r\n            currentIssue: issue,\r\n            currentDecisions: decisions,\r\n            step: this.state.step + 1\r\n        }, () => {\r\n            if(historic){\r\n                this.manageHistoric(decision, oldIssue)\r\n            }\r\n            if(editHistoric){\r\n                let historicElement = {\r\n                    issue: this.state.currentIssue,\r\n                    decision: null\r\n                }\r\n                this.setState({historic: this.state.historic.concat(historicElement)});  \r\n            }\r\n        });    \r\n    }\r\n\r\n    manageMethod = (decision, method) => {\r\n        this.state.historic[this.state.historic.length - 1].decision = decision;\r\n        let historicElement = {\r\n            method: method,\r\n        }\r\n        this.setState({historic: this.state.historic.concat(historicElement)}); \r\n    }\r\n\r\n    checkMethod = (decision) => {\r\n        if(decision){\r\n            let method = this.state.tree.methodes.find(methode => methode.ID_Decision === decision.ID_Decision);\r\n            if(method){\r\n                this.setState({currentMethod: method});\r\n                return method;\r\n            }\r\n        }\r\n    }\r\n\r\n    checkChoices = (choices) => {\r\n        if(choices){\r\n            choices.forEach(element => {\r\n                if(element == 0){\r\n                    this.setState({\r\n                        historic: [],\r\n                        checkedDecision: \"blabla\",\r\n                        step: 0,\r\n                    }, () => {\r\n                        console.log(this.state);\r\n                        return true;\r\n                    });\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    backOut = (ID, type) => {\r\n        if(type == 'issue'){\r\n            if(this.state.currentMethod){\r\n                this.setState({currentMethod: null}, () => {\r\n                    this.test(ID);\r\n                })\r\n            } else {\r\n                this.test(ID);\r\n            }\r\n        } else {\r\n            // let index =  this.state.historic.indexOf(this.state.historic.find(el => el.method.ID_Methode === ID));\r\n            console.log(this.state.historic);\r\n            alert(\"methode\")\r\n        }\r\n    }\r\n\r\n    test = (ID) => {\r\n        let index;\r\n        this.changeData(ID, null, null, false);\r\n        this.state.historic.forEach(element => {\r\n            if('issue' in element){\r\n                if(element.issue.ID_Critere === ID){\r\n                    index = this.state.historic.indexOf(element);\r\n                }\r\n            }\r\n        });\r\n        // let index =  this.state.historic.indexOf(this.state.historic.find(el => el.issue.ID_Critere === ID));\r\n        this.state.historic.length = index + 1;\r\n        this.state.historic[index].decision = null;\r\n        this.setState({step: index + 1});\r\n    }\r\n\r\n    manageHistoric = (decision = null, oldIssue) => {\r\n        if(!this.state.currentMethod && this.state.historic){\r\n            let condition = this.state.historic.find(el => el.issue.ID_Critere === oldIssue.ID_Critere);\r\n            if(condition){condition.decision = decision;}\r\n            console.log(this.state)\r\n            let historicElement = {\r\n                issue: this.state.currentIssue,\r\n                decision: null\r\n            }\r\n            this.setState({historic: this.state.historic.concat(historicElement)}, () => console.log(this.state));  \r\n        }  \r\n    }\r\n\r\n    resumeQuiz = () => {\r\n        this.setState({currentMethod: null}, () => {\r\n            this.changeData(this.state.checkedDecision.ID_Critere_sortant, null, null, false, true);\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        let protocol = window.location.protocol;\r\n        let host = window.location.hostname;\r\n        let url = protocol + '//' + host;\r\n\r\n        if(!this.state.tree){\r\n            axios.get(url + '/reactTest/MATUI/API/Controllers/lireArbre.php')\r\n            .then(response => {\r\n                this.setState({tree: response.data});\r\n                this.changeData(response.data.entree[0].ID_Critere);\r\n            })\r\n            .catch(error => console.log(error))\r\n        }\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Quiz\">\r\n                {this.state.currentMethod\r\n                    ? <Method method={this.state.currentMethod}\r\n                        checkedDecision={this.state.checkedDecision}\r\n                        changeData={this.changeData}  \r\n                        resumeQuiz={this.resumeQuiz} \r\n                        historic={this.state}\r\n                    />\r\n                    :<Issues issue={this.state.currentIssue} \r\n                        decisions={this.state.currentDecisions} \r\n                        changeData={this.changeData}\r\n                        step={this.state.step}\r\n                    />\r\n                }\r\n                <Historic historic={this.state.historic} \r\n                    backOut={this.backOut}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Quiz;\r\n"]},"metadata":{},"sourceType":"module"}